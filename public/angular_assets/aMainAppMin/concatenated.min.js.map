{"version":3,"sources":["mainApp.js","adirectives/logout.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","filters/filters.js","filters/postFormFilters.js","services/functions.js","services/globals.js","services/mainFactory.js","services/popularStoriesService.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/editPost.js","adirectives/home/fullPost.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postActions.js","adirectives/home/postMessages.js","adirectives/home/postStream.js","adirectives/home/postViewDir.js","adirectives/home/post_search.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/trashPostDir.js","adirectives/home/universalBanner.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","directive","logoutService","restrict","link","$scope","$element","$attrs","logoutClient","success","resp","main","responseStatusHandler","error","errResponse","controller","$q","$log","PopularStoriesService","globals","getPopularStories","getPopularStoriesFromServer","popularStories","updatePopularStories","errResp","$on","$filter","$interval","$window","$location","socket","socketService","$document","initialRequests","getUserData","userData","broadcastUserData","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","isLoading","startLoading","finishedLoading","redirectToPage","pathWithFirstSlash","location","href","moment","format","updateCurrentTime","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","window","backAngular","prevUrl","length","splice","path","clearToasts","isEditingPost","PostService","UserService","getUsersCount","checkAccountStatus","getUsersCountFromServer","usersCount","updateUsersCount","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","postIndex","post","posts","makeResp","postSummary","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","postContent","forEach","index","textString","theElementString","highlight","checkSearchState","current","status","queryString","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","postTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","postHeading","authorName","console","log","removePostTagsHighlight","makeBanner","show","bannerClass","msg","redirect","redirectPage","notify","type","showToast","banner","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","errors","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","factory","calcObjectLength","obj","len","prop","documentTitle","port","data","getDocumentTitle","defaultDocumentTitle","changeDocumentTitle","newDocumentTitle","hostname","getStatus","emailIsConfirmed","isApproved","showResendEmail","accountStatus","isBanned","theStatus","on","info","done","popularStoriesArray","editPostModel","allPosts","allPostsCount","suggestedPosts","getAllPosts","getPosts","pageNumber","getAllPostsCount","getPostsFromServer","getModelObject","requestedPage","get","updatePosts","postsArray","removePostWithUniqueCuid","postUniqueCuid","found","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getCurrentEditPostModel","getCurrentEditPostModelFromServer","updateCurrentEditPostModel","postSearch","searchObject","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","trashPost","unTrashPost","url","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","templateUrl","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullEditPostModel","thePost","cancelPostUpdate","validateEditForm","getFullPost","postIsLoaded","finishLoading","newPostModel","postUploads","validateForm","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","getMainSearchResultsCount","err","template","scope","showSpan","getPagePosts","getModel","buttonLoading","theModel2","JSON","parse","model","showMore","parseInt","button","getPostSearch","mainSearchModel","theModel","defaultTitle","validateContactUs","email","message","formStatus","$timeout","universalBanner","performMainSearch","uploadService","progress","evt","uploading","percent","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('mainApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(['$templateCache', '$http', '$rootScope', '$state', '$stateParams', function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    }])\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        //    $urlRouterProvider\n        //        .when(\"/home/stream/\", '/home/stream/1')\n        //        .when(\"/home/post/\", '/home')\n        //        .when(\"/home/editPost/\", '/home')\n        //        .when(\"/home/search/\", '/home/')\n        //        .otherwise(\"/home\");\n        //\n        //    $stateProvider\n        //        .state('home', {\n        //            url: '/home',\n        //        })\n        //        .state('home.post', {\n        //            url: '/post/:postIndex',\n        //            templateUrl: 'views/all/partials/views/home/full_post.html'\n        //        })\n        //        .state('home.newPost', {\n        //            url: '/newPost',\n        //            templateUrl: 'views/all/partials/views/home/new_post.html'\n        //        })\n        //        .state('home.editPost', {\n        //            url: '/editPost/:postIndex',\n        //            templateUrl: 'views/all/partials/views/home/edit_post.html'\n        //        })\n        //        .state('home.search', {\n        //            url: '/search/:queryString/:pageNumber',\n        //            templateUrl: 'views/search/search_results.html'\n        //        })\n        //        .state('users', {\n        //            url: '/users',\n        //            templateUrl: 'views/all/partials/views/users/users.html'\n        //        })\n        //        .state(\"otherwise\", {url: '/home'});\n\n        //$locationProvider\n        //    .html5Mode(false)\n        //    .hashPrefix('!');\n    }]);","angular.module('mainApp')\n    .directive('logoutScope', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .controller('PopularStoriesController', ['$q', '$log', '$scope', '$rootScope', 'PopularStoriesService', 'globals',\n        function ($q, $log, $scope, $rootScope, PopularStoriesService, globals) {\n\n            $scope.popularStories = PopularStoriesService.getPopularStories();\n\n            function getPopularStories() {\n                PopularStoriesService.getPopularStoriesFromServer()\n                    .success(function (resp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories(resp.popularStories);\n                    })\n                    .error(function (errResp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getPopularStories();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getPopularStories();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                isLoading: true,\n\n                startLoading: function () {\n                    this.isLoading = true;\n                },\n\n                finishedLoading: function () {\n                    $rootScope.isLoading = false;\n                },\n\n                redirectToPage: function (pathWithFirstSlash) {\n                    $window.location.href = globals.getLocationHost() + pathWithFirstSlash;\n                }\n\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n\n            $rootScope.back = function () {\n                window.history.back();\n            };\n\n            $rootScope.backAngular = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n        }\n    ]);","angular.module('mainApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService', 'globals',\n        function ($q, $scope, $rootScope, UserService, globals) {\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                if (globals.checkAccountStatus()) {\n                    UserService.getUsersCountFromServer()\n                        .success(function (resp) {\n                            $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('mainApp')\n    .filter(\"timeago\", [function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    }])\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostSummary\", ['$filter', function ($filter) {\n        //making embedded videos responsive in postContent\n        return function (postSummary) {\n\n            console.log(\"postSummary called\");\n\n            function prepare(postContent) {\n                return $filter('highlightText')($filter('getVideoResponsiveVersion')(postSummary), true);\n            }\n\n            if (postSummary) {\n                return prepare(postSummary);\n            } else {\n\n                return postSummary;\n            }\n        }\n    }])\n    .filter(\"preparePostContent\", ['$filter', function ($filter) {\n        //making embedded videos responsive in postContent\n        return function (postContent) {\n\n            function prepare(postContent) {\n                return $filter('highlightText')($filter('getVideoResponsiveVersion')(postContent), true);\n            }\n\n            if (postContent) {\n                return prepare(postContent);\n            } else {\n\n                return postContent;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('mainApp')\n    .factory('fN', [\n        function () {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('globals', ['$q', '$location', '$rootScope',\n        function ($q, $location, $rootScope) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if (document.location.hostname.search(\"negusmath\") !== -1) {\n                        return \"//www.negusmath.com\";\n                    } else {\n                        if ($location.port()) {\n                            return 'http://localhost' + \":\" + $location.port();\n                        } else {\n                            return 'http://localhost';\n                        }\n                    }\n                },\n\n                checkAccountStatus: function () {\n                    function getStatus(userData) {\n                        if (userData && Object.keys(userData) > 0) {\n                            if (userData.isRegistered) {\n                                if (!userData.emailIsConfirmed) {\n                                    return {\n                                        show: true,\n                                        bannerClass: \"alert alert-warning\",\n                                        msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                        showResendEmail: true,\n                                        accountStatus: false\n                                    };\n                                } else if (userData.isApproved === false) {\n                                    return {\n                                        show: true,\n                                        bannerClass: \"alert alert-warning\",\n                                        msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                        showResendEmail: false,\n                                        accountStatus: false\n                                    };\n                                } else if (userData.isBanned) {\n                                    if (userData.isBanned.status === true) {\n                                        //checking banned status\n                                        return {\n                                            show: true,\n                                            bannerClass: \"alert alert-warning\",\n                                            msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                            showResendEmail: false,\n                                            accountStatus: false\n                                        };\n                                    } else {\n                                        return {\n                                            show: false,\n                                            bannerClass: \"\",\n                                            msg: \"\",\n                                            showResendEmail: false,\n                                            accountStatus: true\n                                        };\n                                    }\n                                } else {\n                                    return {\n                                        show: false,\n                                        bannerClass: \"\",\n                                        msg: \"\",\n                                        showResendEmail: false,\n                                        accountStatus: true\n                                    };\n                                }\n                            } else {\n                                console.log(userData);\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"You are not registered. Please reload this page to create an account\",\n                                    showResendEmail: false,\n                                    accountStatus: false\n                                };\n                            }\n                        } else {\n                            //userData might not have loaded yet here, forgive this part\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false,\n                                accountStatus: true\n                            };\n                        }\n                    }\n\n                    var theStatus = getStatus(userData);\n                    $rootScope.$broadcast('universalBanner', theStatus);\n                    return theStatus.accountStatus;\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('PopularStoriesService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var popularStories = [];\n\n            return {\n\n                getPopularStories: function () {\n                    return popularStories;\n                },\n\n                getPopularStoriesFromServer: function () {\n                    return $http.post('/api/getPopularStories', {})\n                },\n\n                updatePopularStories: function (popularStoriesArray) {\n                    if (popularStoriesArray == []) {\n                        popularStories = [];\n                    } else {\n                        popularStories = $filter('preparePostsNoChange')(null, popularStoriesArray);\n                    }\n                    return popularStoriesArray;\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket', 'globals',\n        function ($filter, $http, $window, $rootScope, socket, globals) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (getModelObject) {\n                    var pageNumber = getModelObject.requestedPage;\n                    return $http.get('/partial/posts/' + pageNumber)\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                removePostWithUniqueCuid: function (postUniqueCuid) {\n                    var found = 0;\n                    for (var pageNumber in allPosts) {\n                        if (found == 0) {\n                            if (allPosts.hasOwnProperty(pageNumber)) {\n                                allPosts[pageNumber].forEach(function (post, index) {\n                                    if (found == 0) {\n                                        if (post.postUniqueCuid == postUniqueCuid) {\n                                            allPosts[pageNumber].splice(index, 1);\n                                            ++found;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                postSearch: function (searchObject) {\n                    var queryString = searchObject.queryString;\n                    var pageNumber = searchObject.requestedPage;\n                    return $http.get('/partial/search/posts/' + queryString + '/' + pageNumber);\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n\n            if (document.location.hostname.search(\"negusmath\") !== -1) {\n                url = \"//www.negusmath.com\";\n            } else {\n                if ($location.port()) {\n                    url = 'http://localhost' + \":\" + $location.port();\n                } else {\n                    url = 'http://localhost';\n                }\n            }\n\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }\n    ])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }\n    ]);","angular.module('mainApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }\n    ]);","angular.module('mainApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/all/partials/templates/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/all/partials/templates/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('mainApp')\n    .directive('editPostDirectiveScope', ['$q', '$filter', '$log', '$window', '$location', '$rootScope', 'globals', 'PostService',\n        function ($q, $filter, $log, $window, $location, $rootScope, globals, PostService) {\n            return {\n                restrict: 'AE',\n                link: function ($scope, $element, $attrs) {\n\n                    $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n                    function getFullEditPostModel() {\n                        PostService.getCurrentEditPostModelFromServer($scope.postIndex)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                if (Object.keys(resp.thePost).length > 0) {\n                                    $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                                } else {\n                                    //empty the post\n                                    $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                                }\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                //empty the post\n                                $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                            });\n                    }\n\n                    getFullEditPostModel();\n\n\n                    $scope.cancelPostUpdate = function () {\n                        $rootScope.showToast('success', 'Update cancelled');\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                        }\n                    };\n\n                    $scope.validateEditForm = function (notify) {\n                        var errors = 0;\n                        if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                            errors++;\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                                errors++;\n                            }\n                        }\n                        return errors == 0;\n                    };\n\n                    $scope.submitPostUpdate = function () {\n                        if ($scope.validateEditForm(true) && globals.checkAccountStatus()) {\n                            PostService.submitPostUpdate($scope.editPostModel)\n                                .success(function (resp) {\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    $rootScope.showToast('success', 'Saved');\n                                    $rootScope.main.redirectToPage('/post/' + resp.thePost.postIndex);\n                                })\n                                .error(function (errResponse) {\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                })\n                        }\n                    };\n                }\n            }\n        }\n    ]);","angular.module('mainApp')\n    .directive('fullPostScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        this.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }])\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/full_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //full_post.html depends on fullPostScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostDirectiveScope', ['$filter', '$rootScope', 'PostService', 'globals', function ($filter, $rootScope, PostService, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true) && globals.checkAccountStatus()) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags,\n                            postUploads: $scope.newPostModel.postUploads\n                        };\n\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                var thePost = resp.thePost;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                                $scope.newPostModel.postUploads = [];\n                                $rootScope.main.redirectToPage('/post/' + thePost.postIndex);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }])\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', 'globals', function ($filter, $rootScope, PostService, globals) {\n        return {\n            templateUrl: 'views/all/partials/views/home/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //new_post depends on newPostDirectiveScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postActionsScope', ['$rootScope', 'PostService', 'globals', function ($rootScope, PostService, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid && globals.checkAccountStatus()) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.theModel2 = JSON.parse($scope.model);\n                console.log($scope.theModel2);\n\n                function getPagePosts(pageNumber) {\n\n                    $scope.getModel = {\n                        requestedPage: pageNumber\n                    };\n\n                    if ($scope.getModel.requestedPage) {\n                        $scope.buttonLoading();\n                        PostService.getPostsFromServer($scope.getModel)\n                            .success(function (resp) {\n                                $scope.theModel2.pageNumber++;\n                                angular.element('#appendNextPosts').replaceWith(resp);\n                                $scope.finishedLoading();\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.finishedLoading();\n                            });\n                    }\n                }\n\n                $scope.showMore = function () {\n                    getPagePosts(parseInt($scope.theModel2.pageNumber) + 1);\n                };\n\n                //button loading state\n                $scope.buttonLoading = function () {\n                    $('#showMoreBtn2').button('loading');\n                };\n                $scope.finishedLoading = function () {\n                    $('#showMoreBtn2').button('reset');\n                };\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/post_stream.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //post_stream depends on postStreamScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postContent', ['$filter', function ($filter) {\n        return {\n            templateUrl: 'views/all/partials/templates/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postContent = $filter('preparePostContent')($scope.postContent);\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter',function ($filter) {\n        return {\n            templateUrl: 'views/all/partials/templates/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postSummary = $filter('preparePostContent')($scope.postSummary)\n            }\n        }\n    }])\n    .directive('postTags', ['$filter',function ($filter) {\n        return {\n            templateUrl: 'views/all/partials/templates/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postSearchScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.theModel = JSON.parse($scope.model);\n\n                function getPostSearch(pageNumber) {\n                    $scope.mainSearchModel = {\n                        queryString: $scope.theModel.queryString,\n                        requestedPage: pageNumber\n                    };\n\n\n                    if ($scope.mainSearchModel.queryString && $scope.mainSearchModel.requestedPage) {\n                        $scope.buttonLoading();\n                        PostService.postSearch($scope.mainSearchModel)\n                            .success(function (resp) {\n                                $scope.theModel.pageNumber++;\n                                angular.element('#appendNextPostSearch').replaceWith(resp);\n                                $scope.finishedLoading();\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.finishedLoading();\n                            });\n                    }\n                }\n\n\n                $scope.showMore = function () {\n                    getPostSearch(parseInt($scope.theModel.pageNumber) + 1);\n                };\n\n                //button loading state\n                $scope.buttonLoading = function () {\n                    $('#showMoreBtn').button('loading');\n                };\n                $scope.finishedLoading = function () {\n                    $('#showMoreBtn').button('reset');\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/all/partials/components/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/all/partials/components/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', 'globals', function ($rootScope, PostService, $timeout, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('trashPostDir', ['$rootScope', 'PostService', 'globals', function ($rootScope, PostService, globals) {\n        return {\n            template: ' <a class=\"btn-link btn btn-default btn-sm\" href ng-click=\"trashPost(post.postUniqueCuid)\">Delete</a>',\n            restrict: 'AE',\n            scope: {\n                post: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid && globals.checkAccountStatus()) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('universalBannerScope', ['$rootScope', 'globals', function ($rootScope, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('universalSearchBoxScope', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        $rootScope.main.redirectToPage('/search/posts/' + $scope.mainSearchModel.queryString + '/' + $scope.mainSearchModel.requestedPage);\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.newPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.newPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.newPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }])\n    .directive('editPostUploader', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/edit_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getAdminUsersFromServer()\n                            .success(function (resp) {\n                                $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getAllUsersFromServer()\n                            .success(function (resp) {\n                                $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getBannedUsersFromServer()\n                            .success(function (resp) {\n                                $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getUsersNotApprovedFromServer()\n                            .success(function (resp) {\n                                $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', 'globals', function ($rootScope, UserService, socketService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.addAdminPrivileges(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.removeAdminPrivileges(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.approveUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.banUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.unBanUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', 'globals', function ($q, $log, $rootScope, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}