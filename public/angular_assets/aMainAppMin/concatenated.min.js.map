{"version":3,"sources":["mainApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","adirectives/logout.js","filters/filters.js","filters/postFormFilters.js","services/functions.js","services/globals.js","services/mainFactory.js","services/popularStoriesService.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/fullPost.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStream.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/trashPostDir.js","adirectives/home/universalBanner.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$log","$scope","PopularStoriesService","globals","getPopularStories","getPopularStoriesFromServer","success","resp","popularStories","updatePopularStories","error","errResp","main","responseStatusHandler","$on","$filter","$interval","$window","$location","socket","socketService","$document","initialRequests","getUserData","userData","broadcastUserData","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","isLoading","startLoading","finishedLoading","moment","format","updateCurrentTime","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearToasts","isEditingPost","PostService","getFullEditPostModel","getCurrentEditPostModelFromServer","postIndex","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","postHeading","getCurrentEditPostModel","cancelPostUpdate","showToast","location","href","port","postPath","validateEditForm","notify","errors","postContent","postSummary","postTags","submitPostUpdate","checkAccountStatus","getMainSearchResults","pageNumber","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","banner","bannerClass","msg","responseMimic2","getAllMainSearchResults","showMore","current","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","directive","logoutService","restrict","link","$element","$attrs","logoutClient","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","post","posts","makeResp","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","status","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","authorName","removePostTagsHighlight","makeBanner","show","redirect","redirectPage","type","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","factory","calcObjectLength","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","getStatus","emailIsConfirmed","isApproved","showResendEmail","accountStatus","isBanned","theStatus","on","info","done","popularStoriesArray","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","removePostWithUniqueCuid","postUniqueCuid","found","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","trashPost","unTrashPost","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","finishLoading","newPostModel","postUploads","validateForm","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","template","scope","showSpan","getPagePosts","getFromServer","postsCount","defaultTitle","validateContactUs","email","message","formStatus","$timeout","err","universalBanner","fillSearchBox","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('mainApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/all/partials/views/home/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/all/partials/views/home/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/all/partials/views/home/full_post.html'\n            })\n            .state('home.newPost', {\n                url: '/newPost',\n                templateUrl: 'views/all/partials/views/home/new_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/all/partials/views/home/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/all/partials/views/users/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('mainApp')\n    .controller('PopularStoriesController', ['$q', '$log', '$scope', '$rootScope', 'PopularStoriesService', 'globals',\n        function ($q, $log, $scope, $rootScope, PopularStoriesService, globals) {\n\n            $scope.popularStories = PopularStoriesService.getPopularStories();\n\n            function getPopularStories() {\n                PopularStoriesService.getPopularStoriesFromServer()\n                    .success(function (resp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories(resp.popularStories);\n                    })\n                    .error(function (errResp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getPopularStories();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getPopularStories();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                isLoading: true,\n\n                startLoading: function () {\n                    this.isLoading = true;\n                },\n                finishedLoading: function () {\n                    $rootScope.isLoading = false;\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (Object.keys(resp.thePost).length > 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true) && globals.checkAccountStatus()) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults($rootScope.$stateParams.pageNumber);\n                }\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService', 'globals',\n        function ($q, $scope, $rootScope, UserService, globals) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                if (globals.checkAccountStatus()) {\n                    UserService.getUsersCountFromServer()\n                        .success(function (resp) {\n                            $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('mainApp')\n    .directive('logoutScope', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('mainApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('mainApp')\n\n    .factory('globals', ['$q', '$location', '$rootScope',\n        function ($q, $location, $rootScope) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                },\n\n                checkAccountStatus: function () {\n                    function getStatus(userData) {\n                        if (userData && Object.keys(userData)) {\n                            if (userData.isRegistered) {\n                                if (!userData.emailIsConfirmed) {\n                                    return {\n                                        show: true,\n                                        bannerClass: \"alert alert-warning\",\n                                        msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                        showResendEmail: true,\n                                        accountStatus: false\n                                    };\n                                } else if (userData.isApproved === false) {\n                                    return {\n                                        show: true,\n                                        bannerClass: \"alert alert-warning\",\n                                        msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                        showResendEmail: false,\n                                        accountStatus: false\n                                    };\n                                } else if (userData.isBanned) {\n                                    if (userData.isBanned.status === true) {\n                                        //checking banned status\n                                        return {\n                                            show: true,\n                                            bannerClass: \"alert alert-warning\",\n                                            msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                            showResendEmail: false,\n                                            accountStatus: false\n                                        };\n                                    } else {\n                                        return {\n                                            show: false,\n                                            bannerClass: \"\",\n                                            msg: \"\",\n                                            showResendEmail: false,\n                                            accountStatus: true\n                                        };\n                                    }\n                                } else {\n                                    return {\n                                        show: false,\n                                        bannerClass: \"\",\n                                        msg: \"\",\n                                        showResendEmail: false,\n                                        accountStatus: true\n                                    };\n                                }\n                            } else {\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"You are not registered. Please reload this page to create an account\",\n                                    showResendEmail: false,\n                                    accountStatus: false\n                                };\n                            }\n                        } else {\n                            //userData might not have loaded yet here, forgive this part\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false,\n                                accountStatus: true\n                            };\n                        }\n                    }\n\n                    var theStatus = getStatus(userData);\n                    $rootScope.$broadcast('universalBanner', theStatus);\n                    return theStatus.accountStatus;\n                }\n            };\n        }]);","angular.module('mainApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('mainApp')\n    .factory('PopularStoriesService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var popularStories = [];\n\n            return {\n\n                getPopularStories: function () {\n                    return popularStories;\n                },\n\n                getPopularStoriesFromServer: function () {\n                    return $http.post('/api/getPopularStories', {})\n                },\n\n                updatePopularStories: function (popularStoriesArray) {\n                    if (popularStoriesArray == []) {\n                        popularStories = [];\n                    } else {\n                        popularStories = $filter('preparePostsNoChange')(null, popularStoriesArray);\n                    }\n                    return popularStoriesArray;\n                }\n            };\n        }]);","angular.module('mainApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket', 'globals',\n        function ($filter, $http, $window, $rootScope, socket, globals) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                removePostWithUniqueCuid: function (postUniqueCuid) {\n                    var found = 0;\n                    for (var pageNumber in allPosts) {\n                        if (found == 0) {\n                            if (allPosts.hasOwnProperty(pageNumber)) {\n                                allPosts[pageNumber].forEach(function (post, index) {\n                                    if (found == 0) {\n                                        if (post.postUniqueCuid == postUniqueCuid) {\n                                            allPosts[pageNumber].splice(index, 1);\n                                            ++found;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }]);","angular.module('mainApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('mainApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }]);","angular.module('mainApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('mainApp')\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/all/partials/templates/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/all/partials/templates/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('mainApp')\n    .directive('fullPostScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        this.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.main.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }])\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/full_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //full_post.html depends on fullPostScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostDirectiveScope', ['$filter', '$rootScope', 'PostService', 'globals', function ($filter, $rootScope, PostService, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true) && globals.checkAccountStatus()) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                                $rootScope.back();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }])\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', 'globals', function ($filter, $rootScope, PostService, globals) {\n        return {\n            templateUrl: 'views/all/partials/views/home/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //new_post depends on newPostDirectiveScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/post_stream.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //post_stream depends on postStreamScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/all/partials/components/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/all/partials/components/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', 'globals', function ($rootScope, PostService, $timeout, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('trashPostDir', ['$rootScope', 'PostService', 'globals', function ($rootScope, PostService, globals) {\n        return {\n            template: ' <a class=\"btn-link btn btn-default btn-sm\" href ng-click=\"trashPost(post.postUniqueCuid)\">Delete</a>',\n            restrict: 'AE',\n            scope: {\n                post: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid && globals.checkAccountStatus()) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                }\n            }\n        }\n    }])","angular.module('mainApp')\n    .directive('universalBannerScope', 'globals', ['$rootScope', function ($rootScope, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('universalSearchBoxScope', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }])\n    .directive('editPostUploader', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/edit_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getAdminUsersFromServer()\n                            .success(function (resp) {\n                                $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getAllUsersFromServer()\n                            .success(function (resp) {\n                                $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getBannedUsersFromServer()\n                            .success(function (resp) {\n                                $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getUsersNotApprovedFromServer()\n                            .success(function (resp) {\n                                $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', 'globals', function ($rootScope, UserService, socketService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.addAdminPrivileges(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.removeAdminPrivileges(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.approveUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.banUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.unBanUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', 'globals', function ($q, $log, $rootScope, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}