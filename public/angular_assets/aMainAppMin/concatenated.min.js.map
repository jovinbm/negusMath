{"version":3,"sources":["mainApp.js","adirectives/logout.js","filters/filters.js","filters/postFormFilters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","services/functions.js","services/globals.js","services/mainFactory.js","services/popularStoriesService.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/editPost.js","adirectives/home/fullPost.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postActions.js","adirectives/home/postMessages.js","adirectives/home/postStream.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/trashPostDir.js","adirectives/home/universalBanner.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","hashPrefix","directive","logoutService","restrict","link","$scope","$element","$attrs","logoutClient","success","resp","main","responseStatusHandler","error","errResponse","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","$filter","createdAt","moment","format","postIndex","post","posts","makeResp","postSummary","theElement","$","imgElement","length","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","postContent","forEach","index","textString","theElementString","highlight","checkSearchState","current","name","status","queryString","stateHistory","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","postTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","postHeading","authorName","removePostTagsHighlight","$q","$log","$window","makeBanner","show","bannerClass","msg","redirect","location","href","redirectPage","notify","type","showToast","banner","$broadcast","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","errors","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","controller","PopularStoriesService","globals","getPopularStories","getPopularStoriesFromServer","popularStories","updatePopularStories","errResp","$on","$interval","$location","socket","socketService","$document","initialRequests","getUserData","userData","broadcastUserData","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","clearBanners","isLoading","startLoading","finishedLoading","redirectToPage","pathWithFirstSlash","updateCurrentTime","history","event","toState","toParams","fromState","fromParams","push","$$path","temp","back","window","backAngular","prevUrl","splice","path","clearToasts","isEditingPost","PostService","getMainSearchResults","pageNumber","mainSearchModel","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","responseMimic2","getAllMainSearchResults","showMore","UserService","getUsersCount","checkAccountStatus","getUsersCountFromServer","usersCount","updateUsersCount","factory","calcObjectLength","obj","len","prop","documentTitle","port","data","getDocumentTitle","defaultDocumentTitle","changeDocumentTitle","newDocumentTitle","hostname","getStatus","emailIsConfirmed","isApproved","showResendEmail","accountStatus","isBanned","console","log","theStatus","on","info","done","popularStoriesArray","editPostModel","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","removePostWithUniqueCuid","postUniqueCuid","found","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getCurrentEditPostModel","getCurrentEditPostModelFromServer","updateCurrentEditPostModel","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","trashPost","unTrashPost","url","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","templateUrl","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullEditPostModel","thePost","cancelPostUpdate","validateEditForm","getFullPost","postIsLoaded","finishLoading","newPostModel","postUploads","validateForm","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","err","template","scope","showSpan","getPagePosts","getFromServer","postsCount","defaultTitle","validateContactUs","email","message","formStatus","$timeout","universalBanner","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('mainApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(['$templateCache', '$http', '$rootScope', '$state', '$stateParams', function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    }])\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        //    $urlRouterProvider\n        //        .when(\"/home/stream/\", '/home/stream/1')\n        //        .when(\"/home/post/\", '/home')\n        //        .when(\"/home/editPost/\", '/home')\n        //        .when(\"/home/search/\", '/home/')\n        //        .otherwise(\"/home\");\n        //\n        //    $stateProvider\n        //        .state('home', {\n        //            url: '/home',\n        //        })\n        //        .state('home.post', {\n        //            url: '/post/:postIndex',\n        //            templateUrl: 'views/all/partials/views/home/full_post.html'\n        //        })\n        //        .state('home.newPost', {\n        //            url: '/newPost',\n        //            templateUrl: 'views/all/partials/views/home/new_post.html'\n        //        })\n        //        .state('home.editPost', {\n        //            url: '/editPost/:postIndex',\n        //            templateUrl: 'views/all/partials/views/home/edit_post.html'\n        //        })\n        //        .state('home.search', {\n        //            url: '/search/:queryString/:pageNumber',\n        //            templateUrl: 'views/search/search_results.html'\n        //        })\n        //        .state('users', {\n        //            url: '/users',\n        //            templateUrl: 'views/all/partials/views/users/users.html'\n        //        })\n        //        .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('mainApp')\n    .directive('logoutScope', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"timeago\", [function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    }])\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('mainApp')\n    .controller('PopularStoriesController', ['$q', '$log', '$scope', '$rootScope', 'PopularStoriesService', 'globals',\n        function ($q, $log, $scope, $rootScope, PopularStoriesService, globals) {\n\n            $scope.popularStories = PopularStoriesService.getPopularStories();\n\n            function getPopularStories() {\n                PopularStoriesService.getPopularStoriesFromServer()\n                    .success(function (resp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories(resp.popularStories);\n                    })\n                    .error(function (errResp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getPopularStories();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getPopularStories();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                isLoading: true,\n\n                startLoading: function () {\n                    this.isLoading = true;\n                },\n\n                finishedLoading: function () {\n                    $rootScope.isLoading = false;\n                },\n\n                redirectToPage: function (pathWithFirstSlash) {\n                    $window.location.href = globals.getLocationHost() + pathWithFirstSlash;\n                }\n\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n\n            $rootScope.back = function () {\n                window.history.back();\n            };\n\n            $rootScope.backAngular = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService', 'globals',\n        function ($q, $scope, $rootScope, UserService, globals) {\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                if (globals.checkAccountStatus()) {\n                    UserService.getUsersCountFromServer()\n                        .success(function (resp) {\n                            $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('mainApp')\n    .factory('fN', [\n        function () {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('globals', ['$q', '$location', '$rootScope',\n        function ($q, $location, $rootScope) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if (document.location.hostname.search(\"negusmath\") !== -1) {\n                        return \"//www.negusmath.com\";\n                    } else {\n                        if ($location.port()) {\n                            return 'http://localhost' + \":\" + $location.port();\n                        } else {\n                            return 'http://localhost';\n                        }\n                    }\n                },\n\n                checkAccountStatus: function () {\n                    function getStatus(userData) {\n                        if (userData && Object.keys(userData) > 0) {\n                            if (userData.isRegistered) {\n                                if (!userData.emailIsConfirmed) {\n                                    return {\n                                        show: true,\n                                        bannerClass: \"alert alert-warning\",\n                                        msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                        showResendEmail: true,\n                                        accountStatus: false\n                                    };\n                                } else if (userData.isApproved === false) {\n                                    return {\n                                        show: true,\n                                        bannerClass: \"alert alert-warning\",\n                                        msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                        showResendEmail: false,\n                                        accountStatus: false\n                                    };\n                                } else if (userData.isBanned) {\n                                    if (userData.isBanned.status === true) {\n                                        //checking banned status\n                                        return {\n                                            show: true,\n                                            bannerClass: \"alert alert-warning\",\n                                            msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                            showResendEmail: false,\n                                            accountStatus: false\n                                        };\n                                    } else {\n                                        return {\n                                            show: false,\n                                            bannerClass: \"\",\n                                            msg: \"\",\n                                            showResendEmail: false,\n                                            accountStatus: true\n                                        };\n                                    }\n                                } else {\n                                    return {\n                                        show: false,\n                                        bannerClass: \"\",\n                                        msg: \"\",\n                                        showResendEmail: false,\n                                        accountStatus: true\n                                    };\n                                }\n                            } else {\n                                console.log(userData);\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"You are not registered. Please reload this page to create an account\",\n                                    showResendEmail: false,\n                                    accountStatus: false\n                                };\n                            }\n                        } else {\n                            //userData might not have loaded yet here, forgive this part\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false,\n                                accountStatus: true\n                            };\n                        }\n                    }\n\n                    var theStatus = getStatus(userData);\n                    $rootScope.$broadcast('universalBanner', theStatus);\n                    return theStatus.accountStatus;\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('PopularStoriesService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var popularStories = [];\n\n            return {\n\n                getPopularStories: function () {\n                    return popularStories;\n                },\n\n                getPopularStoriesFromServer: function () {\n                    return $http.post('/api/getPopularStories', {})\n                },\n\n                updatePopularStories: function (popularStoriesArray) {\n                    if (popularStoriesArray == []) {\n                        popularStories = [];\n                    } else {\n                        popularStories = $filter('preparePostsNoChange')(null, popularStoriesArray);\n                    }\n                    return popularStoriesArray;\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket', 'globals',\n        function ($filter, $http, $window, $rootScope, socket, globals) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                removePostWithUniqueCuid: function (postUniqueCuid) {\n                    var found = 0;\n                    for (var pageNumber in allPosts) {\n                        if (found == 0) {\n                            if (allPosts.hasOwnProperty(pageNumber)) {\n                                allPosts[pageNumber].forEach(function (post, index) {\n                                    if (found == 0) {\n                                        if (post.postUniqueCuid == postUniqueCuid) {\n                                            allPosts[pageNumber].splice(index, 1);\n                                            ++found;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n\n            if (document.location.hostname.search(\"negusmath\") !== -1) {\n                url = \"//www.negusmath.com\";\n            } else {\n                if ($location.port()) {\n                    url = 'http://localhost' + \":\" + $location.port();\n                } else {\n                    url = 'http://localhost';\n                }\n            }\n\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }\n    ])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }\n    ]);","angular.module('mainApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }\n    ]);","angular.module('mainApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/all/partials/templates/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/all/partials/templates/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('mainApp')\n    .directive('editPostDirectiveScope', ['$q', '$filter', '$log', '$window', '$location', '$rootScope', 'globals', 'PostService',\n        function ($q, $filter, $log, $window, $location, $rootScope, globals, PostService) {\n            return {\n                restrict: 'AE',\n                link: function ($scope, $element, $attrs) {\n\n                    $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n                    function getFullEditPostModel() {\n                        PostService.getCurrentEditPostModelFromServer($scope.postIndex)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                if (Object.keys(resp.thePost).length > 0) {\n                                    $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                                    console.log($scope.editPostModel);\n                                } else {\n                                    //empty the post\n                                    $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                                }\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                //empty the post\n                                $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                            });\n                    }\n\n                    getFullEditPostModel();\n\n\n                    $scope.cancelPostUpdate = function () {\n                        $rootScope.showToast('success', 'Update cancelled');\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                        }\n                    };\n\n                    $scope.validateEditForm = function (notify) {\n                        var errors = 0;\n                        if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                            errors++;\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                                errors++;\n                            }\n                        }\n                        return errors == 0;\n                    };\n\n                    $scope.submitPostUpdate = function () {\n                        if ($scope.validateEditForm(true) && globals.checkAccountStatus()) {\n                            PostService.submitPostUpdate($scope.editPostModel)\n                                .success(function (resp) {\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    $rootScope.showToast('success', 'Saved');\n                                    $rootScope.main.redirectToPage('/post/' + thePost.postIndex);\n                                })\n                                .error(function (errResponse) {\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                })\n                        }\n                    };\n                }\n            }\n        }\n    ]);","angular.module('mainApp')\n    .directive('fullPostScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        this.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }])\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/full_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //full_post.html depends on fullPostScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostDirectiveScope', ['$filter', '$rootScope', 'PostService', 'globals', function ($filter, $rootScope, PostService, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true) && globals.checkAccountStatus()) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags,\n                            postUploads: $scope.newPostModel.postUploads\n                        };\n\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                var thePost = resp.thePost;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                                $scope.newPostModel.postUploads = [];\n                                $rootScope.main.redirectToPage('/post/' + thePost.postIndex);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }])\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', 'globals', function ($filter, $rootScope, PostService, globals) {\n        return {\n            templateUrl: 'views/all/partials/views/home/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //new_post depends on newPostDirectiveScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postActionsScope', ['$rootScope', 'PostService', 'globals', function ($rootScope, PostService, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid && globals.checkAccountStatus()) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                globals.defaultDocumentTitle();\n                $scope.allPosts = PostService.getAllPosts();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(2);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/post_stream.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //post_stream depends on postStreamScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postHeading', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/all/partials/components/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/all/partials/components/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', 'globals', function ($rootScope, PostService, $timeout, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('trashPostDir', ['$rootScope', 'PostService', 'globals', function ($rootScope, PostService, globals) {\n        return {\n            template: ' <a class=\"btn-link btn btn-default btn-sm\" href ng-click=\"trashPost(post.postUniqueCuid)\">Delete</a>',\n            restrict: 'AE',\n            scope: {\n                post: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid && globals.checkAccountStatus()) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('universalBannerScope', ['$rootScope', 'globals', function ($rootScope, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('universalSearchBoxScope', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        $rootScope.main.redirectToPage('/search/posts/' + $scope.mainSearchModel.queryString + '/' + $scope.mainSearchModel.requestedPage);\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.newPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.newPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.newPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }])\n    .directive('editPostUploader', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/edit_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.editPostModel.postUploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', 'globals', function ($rootScope, uploadService, globals) {\n        return {\n\n            templateUrl: 'views/all/partials/templates/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPostImage(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadPdf(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadPdf(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n\n                function uploadZip(fields, file) {\n                    if (globals.checkAccountStatus()) {\n                        uploadService.uploadZip(fields, file)\n                            .progress(function (evt) {\n                                $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                            })\n                            .success(function (data, status, headers, config) {\n                                $rootScope.main.responseStatusHandler(data);\n                                $scope.uploads.push(data.fileData);\n                                $scope.hideProgressBars();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $scope.hideProgressBars();\n                            });\n                    }\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getAdminUsersFromServer()\n                            .success(function (resp) {\n                                $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getAllUsersFromServer()\n                            .success(function (resp) {\n                                $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getBannedUsersFromServer()\n                            .success(function (resp) {\n                                $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    if (globals.checkAccountStatus()) {\n                        UserService.getUsersNotApprovedFromServer()\n                            .success(function (resp) {\n                                $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', 'globals', function ($rootScope, UserService, socketService, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.addAdminPrivileges(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.removeAdminPrivileges(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.approveUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.banUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    if (globals.checkAccountStatus()) {\n                        UserService.unBanUser(userUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.$broadcast('userChanges');\n                                $rootScope.main.responseStatusHandler(resp);\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', 'globals', function ($q, $log, $rootScope, globals) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}