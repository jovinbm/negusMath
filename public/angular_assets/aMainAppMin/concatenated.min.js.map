{"version":3,"sources":["mainApp.js","adirectives/logout.js","filters/filters.js","filters/postFormFilters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","services/functions.js","services/globals.js","services/mainFactory.js","services/popularStoriesService.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/fullPost.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStream.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/trashPostDir.js","adirectives/home/universalBanner.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","logoutService","restrict","link","$scope","$element","$attrs","logoutClient","success","resp","main","responseStatusHandler","error","errResponse","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","$filter","createdAt","moment","format","postIndex","post","posts","makeResp","postSummary","theElement","$","imgElement","length","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","postContent","forEach","index","textString","theElementString","highlight","checkSearchState","current","name","status","queryString","stateHistory","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","postTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","postHeading","authorName","removePostTagsHighlight","$q","$log","$window","makeBanner","show","bannerClass","msg","redirect","location","href","redirectPage","notify","type","showToast","banner","$broadcast","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","errors","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","controller","PopularStoriesService","getPopularStories","getPopularStoriesFromServer","popularStories","updatePopularStories","errResp","$on","$interval","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","clearBanners","isLoading","startLoading","finishedLoading","updateCurrentTime","history","event","toState","toParams","fromState","fromParams","push","$$path","temp","back","prevUrl","splice","path","clearToasts","isEditingPost","PostService","fN","getFullEditPostModel","getCurrentEditPostModelFromServer","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","getCurrentEditPostModel","cancelPostUpdate","port","validateEditForm","submitPostUpdate","getMainSearchResults","pageNumber","mainSearchModel","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","responseMimic2","getAllMainSearchResults","showMore","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","factory","calcObjectLength","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","info","done","popularStoriesArray","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","removePostWithUniqueCuid","postUniqueCuid","found","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","trashPost","unTrashPost","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","finishLoading","newPostModel","postUploads","validateForm","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","template","scope","showSpan","getPagePosts","getFromServer","postsCount","defaultTitle","validateContactUs","email","message","formStatus","$timeout","err","universalBanner","fillSearchBox","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('mainApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n\n        //views\n        $http.get('views/all/partials/views/home/home.html', {cache: $templateCache});\n        $http.get('views/all/partials/views/home/post_stream.html', {cache: $templateCache});\n        $http.get('views/all/partials/views/home/full_post.html', {cache: $templateCache});\n\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/all/partials/views/home/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/all/partials/views/home/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/all/partials/views/home/full_post.html'\n            })\n            .state('home.newPost', {\n                url: '/newPost',\n                templateUrl: 'views/all/partials/views/home/new_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/all/partials/views/home/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/all/partials/views/users/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('mainApp')\n    .directive('logoutScope', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('mainApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('mainApp')\n    .controller('PopularStoriesController', ['$q', '$log', '$scope', '$rootScope', 'PopularStoriesService',\n        function ($q, $log, $scope, $rootScope, PopularStoriesService) {\n\n            $scope.popularStories = PopularStoriesService.getPopularStories();\n\n            function getPopularStories() {\n                PopularStoriesService.getPopularStoriesFromServer()\n                    .success(function (resp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories(resp.popularStories);\n                    })\n                    .error(function (errResp) {\n                        $scope.popularStories = PopularStoriesService.updatePopularStories([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getPopularStories();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getPopularStories();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                isLoading: true,\n\n                startLoading: function () {\n                    this.isLoading = true;\n                },\n                finishedLoading: function () {\n                    $rootScope.isLoading = false;\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService', 'fN',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService, fN) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (Object.keys(resp.thePost).length > 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('mainApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults($rootScope.$stateParams.pageNumber);\n                }\n            });\n        }\n    ]);","angular.module('mainApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('mainApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('mainApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                }\n            };\n        }]);","angular.module('mainApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('mainApp')\n    .factory('PopularStoriesService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var popularStories = [];\n\n            return {\n\n                getPopularStories: function () {\n                    return popularStories;\n                },\n\n                getPopularStoriesFromServer: function () {\n                    return $http.post('/api/getPopularStories', {})\n                },\n\n                updatePopularStories: function (popularStoriesArray) {\n                    if (popularStoriesArray == []) {\n                        popularStories = [];\n                    } else {\n                        popularStories = $filter('preparePostsNoChange')(null, popularStoriesArray);\n                    }\n                    return popularStoriesArray;\n                }\n            };\n        }]);","angular.module('mainApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                removePostWithUniqueCuid: function (postUniqueCuid) {\n                    var found = 0;\n                    for (var pageNumber in allPosts) {\n                        if (found == 0) {\n                            if (allPosts.hasOwnProperty(pageNumber)) {\n                                allPosts[pageNumber].forEach(function (post, index) {\n                                    if (found == 0) {\n                                        if (post.postUniqueCuid == postUniqueCuid) {\n                                            allPosts[pageNumber].splice(index, 1);\n                                            ++found;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }]);","angular.module('mainApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('mainApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }]);","angular.module('mainApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('mainApp')\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/all/partials/templates/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/all/partials/templates/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('mainApp')\n    .directive('fullPostScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        this.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.main.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }])\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/full_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //full_post.html depends on fullPostScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostDirectiveScope', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                                $rootScope.back();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }])\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //new_post depends on newPostDirectiveScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/templates/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postStreamScope', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/all/partials/views/home/post_stream.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //post_stream depends on postStreamScope\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/all/partials/templates/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/all/partials/components/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/all/partials/components/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', function ($rootScope, PostService, $timeout) {\n        return {\n            templateUrl: 'views/general/templates/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('trashPostDir', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            template: ' <a class=\"btn-link btn btn-default btn-sm\" href ng-click=\"trashPost(post.postUniqueCuid)\">Delete</a>',\n            restrict: 'AE',\n            scope: {\n                post: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                }\n            }\n        }\n    }])","angular.module('mainApp')\n    .directive('universalBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('universalSearchBoxScope', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/templates/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('editPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/templates/edit_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/templates/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/all/partials/templates/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/all/partials/templates/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/all/partials/templates/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/all/partials/templates/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', function ($rootScope, UserService, socketService) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('mainApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', function ($q, $log, $rootScope) {\n        return {\n            templateUrl: 'views/all/partials/templates/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}