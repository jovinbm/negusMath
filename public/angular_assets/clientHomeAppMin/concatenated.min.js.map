{"version":3,"sources":["clientHomeApp.js","adirectives/bannerDir.js","adirectives/componentDir.js","adirectives/postViewDir.js","filters/filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","$window","$location","restrict","link","$scope","$element","$attrs","determineAccountStatus","userData","isRegistered","isApproved","show","bannerClass","msg","isBanned","status","accountStatusBanner","checkAccountStatus","$on","location","href","port","host","universalBanner","event","banner","newPostBanner","showToast","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","resp","isLoadingTrue","isLoadingFalse","globals","template","defaultTitle","getDocumentTitle","$watch","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","current","name","stateHistory","length","hasOwnProperty","performMainSearch","logoutService","logoutClient","responseStatusHandler","errResponse","$q","$filter","$log","$interval","socket","mainService","socketService","$modal","PostService","getPagePosts","showLoadingBanner","getPostsFromServer","pageNumber","postsArray","posts","updatePosts","responseMimic","mainSearchResultsPosts","showSuggestedPostsOnly","goToTop","showThePostsOnly","postsCount","changePagingTotalCount","showThePager","errResp","defaultDocumentTitle","getCurrentPosts","getCurrentPostsCount","suggestedPosts","getSuggestedPosts","hideLoadingBanner","hideSuggested","showSuggested","data","addNewToPosts","post","getSuggestedPostsFromServer","updateSuggestedPosts","showSuggestedPosts","hideThePager","showHideSuggestedPosts","showPaging","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","newTotalCount","currentPage","toState","toParams","fromState","fromParams","goToPage","console","log","go","scope","postContent","postSummary","postTags","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","moment","format","postIndex","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","postHeading","authorName","removePostTagsHighlight","makeBanner","redirect","redirectPage","notify","type","$broadcast","registrationBanner","reason","warn","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","$document","initialRequests","getUserData","broadcastUserData","clientIsRegistered","emit","room","uniqueCuid","indexPageUrl","allData","showDisqus","search","duration","someElement","element","document","getElementById","scrollToElement","currentTime","updateCurrentTime","history","push","$$path","temp","back","prevUrl","splice","path","clearBanners","isEditingPost","getFullPost","getPostFromServer","calcObjectLength","thePost","updatePost","changeDocumentTitle","showThePostOnly","postIsLoaded","showEditPost","getCurrentPost","getMainSearchResults","mainSearch","results","totalResults","theResult","updateMainSearchResults","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","getCurrentMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","obj","len","prop","documentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","mainSearchResultsPostsCount","updatePostsCount","newCount","newPost","makePost","theNewPost","tempPost","unshift","searchObject","resultsArray","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/client/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', '$window', '$location', function ($rootScope, $window, $location) {\n        return {\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $scope.checkAccountStatus = function (userData) {\n                    if (userData) {\n                        if (userData.isRegistered) {\n                            //checkApprovalStatus\n                            if (userData.isApproved === false) {\n                                return false\n                            } else if (userData.isBanned) {\n                                if (userData.isBanned.status === true) {\n                                    //checking banned status\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        //checkApprovalStatus\n                        if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\"\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\"\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\"\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\"\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\"\n                        };\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                    $scope.accountStatusBanner = determineAccountStatus($scope.userData);\n\n                    //if account status is not okay, redirect user to index\n                    if (!$scope.checkAccountStatus($scope.userData)) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/client/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showThePager();\n                globals.defaultDocumentTitle();\n\n                $scope.posts = PostService.getCurrentPosts();\n                $scope.postsCount = PostService.getCurrentPostsCount();\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                //variable that determines whether to show posts/suggested posts or not\n                $scope.mainSearchResultsPosts = false;\n\n                $scope.showThePostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = true;\n                    $scope.hideSuggested();\n                };\n\n                $scope.showSuggestedPostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = false;\n                    $scope.showSuggested();\n                };\n\n                function getPagePosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getPostsFromServer($rootScope.$stateParams.pageNumber || 1)\n                        .success(function (resp) {\n                            //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                            //used if the user is accessing a page that is beyond the number of posts\n                            if (resp.postsArray.length == 0) {\n\n                                //empty the postsArray\n                                $scope.posts = PostService.updatePosts([]);\n\n                                var responseMimic = {\n                                    banner: true,\n                                    bannerClass: 'alert alert-dismissible alert-success',\n                                    msg: \"No more posts to show\"\n                                };\n                                $rootScope.responseStatusHandler(responseMimic);\n                                $scope.mainSearchResultsPosts = false;\n                                $scope.showSuggestedPostsOnly();\n                                $scope.goToTop();\n                            } else {\n                                $scope.posts = PostService.updatePosts(resp.postsArray);\n                                $scope.showThePostsOnly();\n                                if (resp.postsCount) {\n                                    $scope.postsCount = resp.postsCount;\n                                    $scope.changePagingTotalCount($scope.postsCount);\n                                }\n                                $scope.showThePager();\n                            }\n                        })\n                        .error(function (errResp) {\n                            $rootScope.responseStatusHandler(errResp);\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n                            $scope.mainSearchResultsPosts = false;\n                            $scope.showSuggestedPostsOnly();\n                        });\n                }\n\n                getPagePosts();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    //newPost goes to page 1, so update only if the page is 1\n                    if ($rootScope.$stateParams.pageNumber == 1) {\n                        $scope.posts = PostService.addNewToPosts(data.post);\n                    }\n                    if (data.postsCount) {\n                        $scope.postsCount = data.postsCount;\n                        $scope.changePagingTotalCount($scope.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                $scope.showSuggestedPosts = false;\n                $rootScope.showHideSuggestedPosts = function (bool) {\n                    if (bool) {\n                        $scope.showSuggestedPosts = true;\n                        //get new suggested posts\n                        getSuggestedPosts();\n                    } else {\n                        $scope.showSuggestedPosts = false;\n                    }\n                };\n\n                function getSuggestedPosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $scope.hideLoadingBanner();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $scope.showSuggestedPosts = false;\n                                $scope.goToTop();\n                                $scope.hideLoadingBanner();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.goToTop();\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $scope.showSuggestedPosts = false;\n                            $rootScope.responseStatusHandler(errResp);\n                            $scope.hideLoadingBanner();\n                        });\n\n                    //whatever happens, hide the pager\n                    $scope.hideThePager();\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/client/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    console.log($scope.currentPage);\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                    $scope.goToTop();\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('mainFooter', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", ['$filter', function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", ['$filter', function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'logoutService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, logoutService, $document, fN) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //this important function broadcasts the availability of the users data to directives that require\n            //it e.g. the account status directive\n            $scope.broadcastUserData = function () {\n                $rootScope.$broadcast('userDataChanges');\n            };\n\n            $scope.clientIsRegistered = false;\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.broadcastUserData();\n                        $scope.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //loading banner\n            $scope.showLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(true);\n                }\n            };\n\n            $scope.hideLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(false);\n                }\n            };\n\n            //pager\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            //suggestedPosts\n            $scope.showSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(true);\n                }\n            };\n\n            $scope.hideSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(false);\n                }\n            };\n\n            //total posts count\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.post = PostService.getCurrentPost();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            $scope.postIsLoaded = false;\n\n            function getFullPost() {\n                $scope.showLoadingBanner();\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.post = PostService.updatePost(resp.thePost);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = PostService.updatePost({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = PostService.updatePost({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = PostService.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'home.post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = false;\n                $scope.showSuggested();\n            };\n\n            function getMainSearchResults() {\n                $scope.showLoadingBanner();\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                        $scope.showMainSearchResults = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePosts')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var post = {};\n            var posts = [];\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    if (postsArray == []) {\n                        posts = [];\n                    } else {\n                        posts = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts;\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    posts.unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post = $filter('preparePosts')(newPost, null);\n                    }\n                    return post;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePosts')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}