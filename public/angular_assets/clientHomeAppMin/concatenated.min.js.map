{"version":3,"sources":["clientHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","$document","logoutService","cfpLoadingBar","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","finishedLoading","$broadcast","indexPageUrl","port","host","showDisqus","search","refillHighLightText","current","name","queryString","highlightText","highlightThisText","textToHighlight","theElement","$","highlight","html","removeHighLightText","textString","removeHighlight","highLightPost","postObject","highLightReference","authorName","postHeading","postContent","postSummary","postTags","tag","text","removePostHighlights","stateChangeCounter","length","event","toState","toParams","fromState","fromParams","clearBanners","clearToasts","currentState","fillSearchBox","history","push","$$path","back","prevUrl","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastr","clear","toastType","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","on","console","log","goToLandingPage","mainSearchModel","postSearchUniqueCuid","requestedPage","performMainSearch","showPaging","showThePager","hideThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","pageNumber","goToPage","go","logoutClient","preparePostSummaryContent","posts","post","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","responseMimic","mainSearchResultsPosts","updatePosts","showThePostsOnly","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","hotThisWeekArray","done","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"AAAAA,QAAAC,OAAA,iBACA,eACA,sBACA,iBACA,cACA,+BACA,gBACA,YACA,WACA,OACA,YACA,cACA,aACA,oCACA,aAEAC,KAAA,iBAAA,QAAA,aAAA,SAAA,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAF,EAAAC,OAAAA,EACAD,EAAAE,aAAAA,EAEAH,EAAAI,IAAA,gDAAAC,MAAAN,IACAC,EAAAI,IAAA,8CAAAC,MAAAN,IACAC,EAAAI,IAAA,oCAAAC,MAAAN,OAGAO,QAAA,iBAAA,qBAAA,oBAAA,SAAAC,EAAAC,EAAAC,GACAD,EACAE,KAAA,QAAA,WACAA,KAAA,QAAA,WACAA,KAAA,UAAA,WACAC,UAAA,WAEAJ,EACAK,MAAA,QACAC,IAAA,oBACAC,YAAA,iDAEAF,MAAA,QACAC,IAAA,mBACAC,YAAA,+CAEAF,MAAA,UACAC,IAAA,mCACAC,YAAA,qCAEAF,MAAA,aAAAC,IAAA,YAEAJ,EACAM,WAAA,GACAC,WAAA,QCjDApB,QAAAC,OAAA,iBACAoB,OAAA,UAAA,WAIA,MAAA,UAAAC,EAAAC,EAAAC,GACA,IAAAF,EAAA,MAAA,OAkBA,IAhBAC,IACAA,EAAAE,KAAAC,OAGA1B,QAAA2B,OAAAL,GACAA,EAAAA,EAAAM,UACA,gBAAAN,KACAA,EAAA,GAAAG,MAAAH,GAAAM,WAGA5B,QAAA2B,OAAAJ,GACAA,EAAAA,EAAAK,UACA,gBAAAL,KACAA,EAAA,GAAAE,MAAAF,GAAAK,WAGA,gBAAAN,IAAA,gBAAAC,GAAA,CAIA,GACAM,GAAAC,KAAAC,KAAAR,EAAAD,GAAA,KACAU,KACAC,EAAA,GACAC,EAAA,KACAC,EAAA,MACAC,EAAA,OAEAC,EAAA,SACAC,EAAA,SAcA,OAZAN,GAAAC,GAAAJ,GAAA,GAAAL,EAAA,MAAA,sBACA,GAAAS,EAAAJ,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAI,IAAA,OACA,GAAAC,EAAAL,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAK,IAAA,MACA,EAAAC,EAAAN,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAM,IAAA,OACA,GAAAC,EAAAP,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAO,IAAA,QACA,GAAAC,EAAAR,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAQ,IAAA,QACA,IAAAC,EAAAT,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAS,IAAA,WACA,GAAA,eAEAN,EAAA,IAAA,IAAAA,EAAA,IAAAA,EAAA,GAAA,EAAA,IAAA,GACAA,EAAAA,EAAAQ,KAAA,KAEAhB,KAAA,EACAQ,EAEAT,GAAAD,EAAAU,EAAA,OAAA,MAAAA,MCtDAhC,QAAAC,OAAA,iBACAwC,WAAA,iBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,aACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3C,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,QAAAC,KACAD,EAAAE,2BACAC,QAAA,SAAAC,GACAX,EAAAY,YAAAL,EAAAM,kBAAAF,EAAAC,aACAE,MAEAC,MAAA,SAAAC,GACAhB,EAAAiB,sBAAAD,KAQA,QAAAF,KACAd,EAAAY,YAAAM,QAAA,SAAAC,GACAA,EAAAC,WAAAzB,EAAA,WAAAwB,EAAAE,WAGAF,EAAAG,SAAAC,OAAAJ,EAAAE,WAAAG,OAAA,sBAtBAxB,EAAAY,YAAAL,EAAAC,iBAaAA,IAaAX,EAAAiB,EAAA,KAAA,GAAA,GAIAA,IAIAzD,EAAAoE,IAAA,YAAA,WACAjB,MAGAZ,EAAA8B,KAAA,wCC1CA1E,QAAAC,OAAA,iBACAwC,WAAA,kBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,YAAA,gBAAA,gBACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3C,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAqB,EAAAC,EAAAC,GA8YA,QAAAC,KACA3B,EAAA4B,cACArB,QAAA,SAAAC,GACAX,EAAAgC,SAAA5B,EAAA4B,SAAArB,EAAAqB,UAEAhC,EAAAiC,mBADA,OAAAjC,EAAAgC,SAAAE,cACA,GAEA,EAGA,OAAAlC,EAAAgC,SAAAE,cAEAjC,EAAAkC,KAAA,YACAC,KAAAzB,EAAAqB,SAAAK,aAIArC,EAAAiB,sBAAAN,KAEAI,MAAA,SAAAuB,GACAtC,EAAAiB,sBAAAqB,KA/ZAtC,EAAAuC,qBAAA,WACAC,SAAAC,MAAA,sEAGAzC,EAAA0C,oBAAA,SAAAC,GACAA,IACAH,SAAAC,MAAAE,IAIA3C,EAAA4C,gBAAA,WACAvF,EAAAwF,WAAA,oBAKA7C,EAAA8C,aADA/C,EAAAgD,OACA,UAAAhD,EAAAiD,OAAA,IAAAjD,EAAAgD,OAAA,SAEA,UAAAhD,EAAAiD,OAAA,SAIAhD,EAAAiD,WAAA,KAAAlD,EAAAiD,OAAAE,OAAA,aAGAlD,EAAAmD,oBAAA,WACA,UAAA9F,EAAAC,OAAA8F,QAAAC,MAAAhG,EAAAE,aAAA+F,cACAtD,EAAAuD,cAAAlG,EAAAE,aAAA+F,YAAAjG,EAAAE,aAAA+F,YAAAtD,EAAAuD,gBAIAvD,EAAAmD,sBAEAnD,EAAAwD,kBAAA,SAAAC,GACA,GAAAC,GAAAC,EAAA,QAAAF,EAAA,SAEA,OADAE,GAAAD,GAAAE,UAAA5D,EAAAuD,eACAG,EAAAG,QAGA7D,EAAA8D,oBAAA,SAAAC,GACA/D,EAAAuD,cAAA,EACA,IAAAG,GAAAC,EAAA,QAAAI,EAAA,SAEA,OADAJ,GAAAD,GAAAM,kBACAN,EAAAG,QAGA7D,EAAAiE,cAAA,SAAAC,GACAlE,EAAAmE,uBACAD,EAAAE,aACAF,EAAAE,WAAApE,EAAAwD,kBAAAU,EAAAE,aAEAF,EAAAG,cACAH,EAAAG,YAAArE,EAAAwD,kBAAAU,EAAAG,cAEAH,EAAAI,cACAJ,EAAAI,YAAAtE,EAAAwD,kBAAAU,EAAAI,cAEAJ,EAAAK,cACAL,EAAAK,YAAAvE,EAAAwD,kBAAAU,EAAAK,cAEAL,EAAAM,UACAN,EAAAM,SAAAtD,QAAA,SAAAuD,GACAA,EAAAC,KAAA1E,EAAAwD,kBAAAiB,EAAAC,UAMA1E,EAAA2E,qBAAA,SAAAT,GACAA,EAAAE,aACAF,EAAAE,WAAApE,EAAA8D,oBAAAI,EAAAE,aAEAF,EAAAG,cACAH,EAAAG,YAAArE,EAAA8D,oBAAAI,EAAAG,cAEAH,EAAAI,cACAJ,EAAAI,YAAAtE,EAAA8D,oBAAAI,EAAAI,cAEAJ,EAAAK,cACAL,EAAAK,YAAAvE,EAAA8D,oBAAAI,EAAAK,cAEAL,EAAAM,UACAN,EAAAM,SAAAtD,QAAA,SAAAuD,GACAA,EAAAC,KAAA1E,EAAA8D,oBAAAW,EAAAC,SAQA1E,EAAA4E,mBAAA,EACA5E,EAAAmE,mBAAA,WACA,GAAAb,GAAAjG,EAAAE,aAAA+F,YAAAjG,EAAAE,aAAA+F,YAAAtD,EAAAuD,aACA,OAAAD,IAEAA,EAAAuB,OAAA,EACA,UAAAxH,EAAAC,OAAA8F,QAAAC,MACArD,EAAA4E,mBAAA,EACA5E,EAAAuD,cAAAlG,EAAAE,aAAA+F,aACA,GACAtD,EAAA4E,mBAAA,GACA5E,EAAA4E,sBACA,IAEA5E,EAAA4E,sBACA,IAMA,GAKAvH,EAAAoE,IAAA,oBAAA,SAAAqD,EAAAC,EAAAC,EAAAC,EAAAC,GAEAlF,EAAAmF,eAGAnF,EAAAoF,gBAIA/H,EAAAoE,IAAA,sBAAA,SAAAqD,EAAAC,EAAAC,EAAAC,EAAAC,GACAlF,EAAAqF,aAAAN,EAAA1B,OAIAhG,EAAAoE,IAAA,sBAAA,SAAAqD,EAAAC,EAAAC,EAAAC,EAAAC,GACAlF,EAAAqF,aAAAN,EAAA1B,KACArD,EAAAmD,sBACAnD,EAAAsF,iBAIA,IAAAC,KACAlI,GAAAoE,IAAA,sBAAA,WACA8D,EAAAC,KAAAzF,EAAA0F,UAEApI,EAAAqI,KAAA,WACA,GAAAC,GAAAJ,EAAAV,OAAA,EAAAU,EAAAK,OAAA,IAAA,GAAA,GACA7F,GAAA8F,KAAAF,IAKA3F,EAAA8F,iBAAA,SAAAC,GACA,GAAAC,GAAA,CACA,KAAA,GAAAC,KAAAF,GACAA,EAAAG,eAAAD,IACAD,GAGA,OAAAA,GAMA,IAAAG,GAAA,CAMAnG,GAAAoG,QAAA,WACA,GAAAC,GAAArJ,QAAAsJ,QAAA9D,SAAA+D,eAAA,OACA5E,GAAA6E,gBAAAH,EAAA,GAAAF,IAIAnG,EAAAyG,oBAAA,WACA,GAAAJ,GAAArJ,QAAAsJ,QAAA9D,SAAA+D,eAAA,mBACA5E,GAAA6E,gBAAAH,EAAA,GAAAF,IAIAnG,EAAA0G,2BAAA,SAAAC,GAEA,GAAAjD,GAAAC,EAAA,QAAAgD,EAAA,UAGAC,EAAAjD,EAAA,sBAAAD,EAGA,IAAAkD,EAAA/B,OAAA,EAAA,CAGA,GAAAgC,GAAAD,EACAE,SAAA,yBACAC,KAAA,8DAGArD,GAAAsD,KAAA,OAAAC,YAAAJ,GAGA,MAAAnD,GAAAG,QAQA7D,EAAAkH,kBAAA,EAGAlH,EAAAmH,YAAA,EACAnH,EAAAoH,YAAA,GACApH,EAAAqH,cAAA,GAGArH,EAAAsH,wBAAA,EACAtH,EAAAuH,wBAAA,GACAvH,EAAAwH,0BAAA,GAGAxH,EAAAyH,mBAAA,EACAzH,EAAA0H,mBAAA,GACA1H,EAAA2H,qBAAA,GAEA3H,EAAAmF,aAAA,WACAnF,EAAAmH,YAAA,EACAnH,EAAAsH,wBAAA,EACAtH,EAAAyH,mBAAA,GAGAzH,EAAA4H,qBAAA,WACA5H,EAAAkH,kBAAA,GAEAlH,EAAA6H,sBAAA,WACA7H,EAAAkH,kBAAA,GAGAlH,EAAAiB,sBAAA,SAAAN,GACAA,IACAA,EAAAmH,UACAnH,EAAAmH,WACAhI,EAAAiI,SAAAC,KAAArH,EAAAsH,cAGAtH,EAAAuH,SACAvH,EAAAuH,SACAlI,EAAA4H,uBAGAjH,EAAAwH,QACAxH,EAAAyH,MAAAzH,EAAA0H,KACArI,EAAAsI,UAAA3H,EAAAyH,KAAAzH,EAAA0H,KAGA1H,EAAA4H,QACA5H,EAAAyG,aAAAzG,EAAA0H,MACArI,EAAAmH,YAAA,EACAnH,EAAAoH,YAAAzG,EAAAyG,YACApH,EAAAqH,cAAA1G,EAAA0H,KAGA1H,EAAA6H,eACA7H,EAAAyG,aAAAzG,EAAA0H,MACArI,EAAAyH,mBAAA,EACAzH,EAAA0H,mBAAA/G,EAAAyG,YACApH,EAAA2H,qBAAAhH,EAAA0H,KAGA1H,EAAA8H,oBACA9H,EAAAyG,aAAAzG,EAAA0H,MACArI,EAAAsH,wBAAA,EACAtH,EAAAuH,wBAAA5G,EAAAyG,YACApH,EAAAwH,0BAAA7G,EAAA0H,KAGA1H,EAAA+H,QACA9I,EAAA+I,KAAAhI,EAAA+H,UAOArL,EAAAoE,IAAA,wBAAA,SAAAqD,EAAAnE,GACAX,EAAAiB,sBAAAN,KAQAX,EAAA4I,WAAA,EACA5I,EAAA6I,oBAAA,EACA7I,EAAA8I,0BAAA,SAAAC,GACA/I,EAAA6I,oBAAAE,GAIA/I,EAAAgJ,sBAAA,SAAAC,GACAjJ,EAAAgJ,sBAAA,SAAAC,GACAA,GACAtF,EAAA,wBAAAuF,YAAA,UACAvF,EAAA,sBAAAmD,SAAA,yBAEAnD,EAAA,wBAAAmD,SAAA,UACAnD,EAAA,sBAAAuF,YAAA,0BAKA7L,EAAAoE,IAAA,wBAAA,SAAAqD,EAAAnE,GACAX,EAAA6I,oBAAA,IAAAhH,EAAAsH,WAGA9L,EAAAoE,IAAA,uBAAA,SAAAqD,EAAAnE,GACAX,EAAA6I,oBAAA,IAAAhH,EAAAsH,WAGA9L,EAAAoE,IAAA,0BAAA,SAAAqD,EAAAnE,GACAX,EAAA6I,oBAAA,IAAAhH,EAAAsH,WAGAnJ,EAAAoJ,cAAA,WACApJ,EAAA4I,WAAA,GAEA5I,EAAAqJ,eAAA,WACArJ,EAAA4I,WAAA,GAGAvL,EAAAoE,IAAA,gBAAA,WACAzB,EAAA4I,WAAA,IAGAvL,EAAAoE,IAAA,iBAAA,WACAzB,EAAA4I,WAAA,IAOA5I,EAAAoF,YAAA,WACAkE,OAAAC,SAGAvJ,EAAAsI,UAAA,SAAAkB,EAAA9E,GACA,OAAA8E,GACA,IAAA,UACAF,OAAAC,QACAD,OAAA5I,QAAAgE,EACA,MACA,KAAA,UACA4E,OAAAC,QACAD,OAAAG,QAAA/E,EAAA,WACAgF,aAAA,EACAC,cAAA,GAEA,MACA,KAAA,QACAL,OAAAC,QACAD,OAAAvI,MAAA2D,EAAA,SACAgF,aAAA,EACAC,cAAA,EACAC,SAAA,GAEA,MACA,SAEAN,OAAAC,UAIAlM,EAAAoE,IAAA,YAAA,SAAAqD,EAAA+E,GACA,GAAAL,GAAAK,EAAAL,UACA9E,EAAAmF,EAAAnF,IAEA1E,GAAAsI,UAAAkB,EAAA9E,KAMA1E,EAAA8J,YAAA,GAGA9J,EAAA8J,YAAAvI,SAAAC,OAAA,mBACA,IAAAuI,GAAA,WACA/J,EAAA8J,YAAAvI,SAAAC,OAAA,oBAEA3B,GAAAkK,EAAA,IAAA,GAAA,GA6BA9J,EAAA+J,GAAA,SAAA,WACAC,QAAAC,IAAA,kBAGApI,IAIA9B,EAAAmK,gBAAA,WACArK,EAAAiI,SAAAC,KAAA,SAKAhI,EAAAoK,iBACA9G,YAAA,GACA+G,qBAAA,GACAC,cAAA,GAIAtK,EAAAsF,cAAA,WAEAtF,EAAAoK,gBAAA9G,YADA,UAAAjG,EAAAC,OAAA8F,QAAAC,MAAAhG,EAAAE,aAAA+F,YACAjG,EAAAE,aAAA+F,YAAAjG,EAAAE,aAAA+F,YAAAtD,EAAAuD,cAEA,IAIAvD,EAAAsF,gBAGAtF,EAAAuK,kBAAA,WACAvK,EAAAoK,gBAAA9G,YAAAuB,OAAA,IAEA/E,EAAAiI,SAAAC,KADAjI,EAAAgD,OACA,UAAAhD,EAAAiD,OAAA,IAAAjD,EAAAgD,OAAA,cAAA/C,EAAAoK,gBAAA9G,YAAA,KAEA,UAAAvD,EAAAiD,OAAA,cAAAhD,EAAAoK,gBAAA9G,YAAA,OAMAtD,EAAAwK,YAAA,EACAxK,EAAAyK,aAAA,WACAzK,EAAAwK,YAAA,GAEAxK,EAAA0K,aAAA,WACA1K,EAAAwK,YAAA,GAEAxK,EAAA2K,cAAA,EACA3K,EAAA4K,SAAA,EACA5K,EAAA6K,aAAA,GACA7K,EAAA8K,iBAAA,EACA9K,EAAA+K,uBAAA,SAAAC,GACAhL,EAAA8K,iBAAAE,GAGAhL,EAAAiL,YAAA5N,EAAAE,aAAA2N,WACA7N,EAAAoE,IAAA,sBAAA,SAAAqD,EAAAC,EAAAC,EAAAC,EAAAC,GAEAD,EAAA5B,MAAA0B,EAAA1B,OACArD,EAAAiL,YAAA5N,EAAAE,aAAA2N,WACAlL,EAAA8K,iBAAA,KAIA9K,EAAAmL,SAAA,WAEA9N,EAAAC,OAAA8N,GAAA/N,EAAAC,OAAA8F,QAAAC,MAAA6H,WAAAlL,EAAAiL,cACAjL,EAAAoG,WAKApG,EAAAqL,aAAA,WACAzJ,EAAAyJ,eACA3K,QAAA,SAAAC,GACAX,EAAAiB,sBAAAN,KAEAI,MAAA,SAAAuB,GACAtC,EAAAiB,sBAAAqB,MAQAjF,EAAAoE,IAAA,YAAA,cAGA7B,EAAA8B,KAAA,yCCpgBA1E,QAAAC,OAAA,iBACAwC,WAAA,mBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3C,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GA8BA,QAAAgL,KACAtL,EAAAuL,MAAArK,QAAA,SAAAsK,GACAA,EAAAjH,YAAAvE,EAAA0G,2BAAA8E,EAAAjH,eAKA,QAAAkH,KACAzL,EAAAgJ,uBAAA,GAEAhJ,EAAA0L,kBACApL,EAAAqL,8BACAjL,QAAA,SAAAC,GAOA,QAAAiL,KACA5L,EAAA0L,eAAAxK,QAAA,SAAAsK,GACAA,EAAAjH,YAAAvE,EAAA0G,2BAAA8E,EAAAjH,eARA5D,EAAAkL,WAAAhH,OAAA,GACA7E,EAAA8L,yBACA9L,EAAA0L,eAAA/K,EAAAkL,WACA/K,IASA8K,IACA5L,EAAA4C,oBAGA5C,EAAA0L,kBACA1L,EAAA+L,oBAAA,EACA/L,EAAAyG,sBACAzG,EAAAgJ,uBAAA,MAIAjI,MAAA,SAAAC,GACAhB,EAAAyG,sBACAzG,EAAAgJ,uBAAA,GAEAhJ,EAAA0L,kBACA1L,EAAA+L,oBAAA,EACA/L,EAAAiB,sBAAAD,KAIAhB,EAAA0K,eAGA,QAAAsB,KACAhM,EAAAgJ,uBAAA,GACA1I,EAAA2L,mBAAA5O,EAAAE,aAAA2N,YACAxK,QAAA,SAAAC,GAGA,GAAA,GAAAA,EAAAkL,WAAAhH,OAAA,CAGA7E,EAAAuL,QAEA,IAAAW,IACA3D,QAAA,EACAnB,YAAA,wCACAiB,IAAA,mCAEArI,GAAAiB,sBAAAiL,GACAlM,EAAAmM,wBAAA,EACAV,IACAzL,EAAAyG,0BAEAzG,GAAAuL,MAAAjL,EAAA8L,YAAAzL,EAAAkL,YACA7L,EAAAqM,mBACAvL,IACAH,EAAA2L,aACAtM,EAAAsM,WAAA3L,EAAA2L,WACAtM,EAAA+K,uBAAA/K,EAAAsM,aAGAhB,IACAtL,EAAAyK,eACAzK,EAAA4C,oBAGA7B,MAAA,SAAAC,GACAhB,EAAAiB,sBAAAD,GAEAhB,EAAAuL,SACAvL,EAAAmM,wBAAA,EACAV,MAcA,QAAA3K,KACAd,EAAAuL,MAAArK,QAAA,SAAAsK,GACAA,EAAApK,WAAAzB,EAAA,WAAA6L,EAAAnK,WAGAmK,EAAAlK,SAAAC,OAAAiK,EAAAnK,WAAAG,OAAA,sBAtIAxB,EAAAyK,eAGAzK,EAAAuC,uBAEAvC,EAAAuL,MAAAjL,EAAAiM,kBACAvM,EAAAsM,WAAAhM,EAAAkM,uBAEAxM,EAAA0L,kBAGA1L,EAAAmM,wBAAA,EACAnM,EAAA+L,oBAAA,EAEA/L,EAAAqM,iBAAA,WACArM,EAAAgJ,uBAAA,GACAhJ,EAAAmM,wBAAA,EACAnM,EAAA+L,oBAAA,GAGA/L,EAAA8L,uBAAA,WACA9L,EAAAgJ,uBAAA,GACAhJ,EAAAmM,wBAAA,EACAnM,EAAA+L,oBAAA,GAgGAC,IAIAhM,EAAAyM,oBAAA,WACA,MAAA,IAAAzM,EAAAuL,MAAA1G,QAcAhF,EAAAiB,EAAA,KAAA,GAAA,GAIAA,IAIAzD,EAAAoE,IAAA,UAAA,SAAAqD,EAAA+E,GAEA,GAAAxM,EAAAE,aAAA2N,aACAlL,EAAAuL,MAAAmB,QAAA7C,EAAA2B,MACA1K,IACAwK,KAEAzB,EAAAyC,aACAtM,EAAAsM,WAAAzC,EAAAyC,WACAtM,EAAA+K,uBAAA/K,EAAAsM,eAIAjP,EAAAoE,IAAA,YAAA,WACA,QAAAzB,EAAAqF,cACA2G,MAIApM,EAAA8B,KAAA,yCAKAjC,WAAA,sBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,eACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3C,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/C,GA4BA,QAAAkO,KACAzL,EAAAgJ,uBAAA,GAEAhJ,EAAA0L,kBACApL,EAAAqL,8BACAjL,QAAA,SAAAC,GAOA,QAAAiL,KACA5L,EAAA0L,eAAAxK,QAAA,SAAAsK,GACAA,EAAAjH,YAAAvE,EAAA0G,2BAAA8E,EAAAjH,eARA5D,EAAAkL,WAAAhH,OAAA,GACA7E,EAAA8L,yBACA9L,EAAA0L,eAAA/K,EAAAkL,WACA/K,IASA8K,IACA5L,EAAA4C,oBAGA5C,EAAA0L,kBACA1L,EAAA+L,oBAAA,EACA/L,EAAAyG,sBACAzG,EAAAgJ,uBAAA,MAIAjI,MAAA,SAAAC,GACAhB,EAAAyG,sBACAzG,EAAAgJ,uBAAA,GAEAhJ,EAAA0L,kBACA1L,EAAA+L,oBAAA,EACA/L,EAAAiB,sBAAAD,KAIAhB,EAAA0K,eAGA,QAAAiC,KACA3M,EAAAgJ,uBAAA,GACA1I,EAAAsM,kBAAA5M,EAAA6M,WACAnM,QAAA,SAAAC,GAcA,QAAAmM,KACA9M,EAAAwL,KAAAlH,YAAAtE,EAAA0G,2BAAA1G,EAAAwL,KAAAlH,aAdAtE,EAAAwL,KAAA7K,EAAAoM,QACA/M,EAAAiB,sBAAAN,GAEA,GAAAX,EAAA8F,iBAAA9F,EAAAwL,OAGAxL,EAAA0C,oBAAA1C,EAAAwL,KAAAnH,aAEArE,EAAAgN,kBACAlM,IACAmM,IAOAH,IAGA9M,EAAAiE,cAAAjE,EAAAwL,MAGAxL,EAAAiD,aACAjD,EAAAkN,cAAA,GAGAlN,EAAA0K,eACA1K,EAAA4C,oBAIA5C,EAAAwL,QACAxL,EAAAmN,UAAA,EACA1B,IACAzL,EAAAyG,yBAIA1F,MAAA,SAAAuB,GACAtC,EAAAiB,sBAAAqB,GAEAtC,EAAAwL,QACAxL,EAAAmN,UAAA,EACA1B,MAOA,QAAA3K,KACAd,EAAAwL,OACAxL,EAAAwL,KAAApK,WAAAzB,EAAA,WAAAK,EAAAwL,KAAAnK,WAGArB,EAAAwL,KAAAlK,SAAAC,OAAAvB,EAAAwL,KAAAnK,WAAAG,OAAA,qBAGAxB,EAAA0L,gBACA1L,EAAA0L,eAAAxK,QAAA,SAAAsK,GACAA,EAAApK,WAAAzB,EAAA,WAAA6L,EAAAnK,WAGAmK,EAAAlK,SAAAC,OAAAiK,EAAAnK,WAAAG,OAAA,sBAOA,QAAAyL,KAEAjN,EAAAwL,KAAA4B,QAAA,oCAAApN,EAAAwL,KAAAqB,UAhJA7M,EAAA0K,eAEA1K,EAAA6M,UAAAtP,EAAAsP,UACA7M,EAAAwL,QACAxL,EAAA0L,kBAGA1L,EAAAmN,UAAA,EACAnN,EAAA+L,oBAAA,EAEA/L,EAAAgN,gBAAA,WACAhN,EAAAgJ,uBAAA,GACAhJ,EAAAmN,UAAA,EACAnN,EAAA+L,oBAAA,GAGA/L,EAAA8L,uBAAA,WACA9L,EAAAgJ,uBAAA,GACAhJ,EAAAmN,UAAA,EACAnN,EAAA+L,oBAAA,GAGA/L,EAAAkN,cAAA,EAiGAP,IAqBA9M,EAAAiB,EAAA,KAAA,GAAA,GAWAzD,EAAAoE,IAAA,aAAA,SAAAqD,EAAA+E,GACA7J,EAAAwL,KAAA3B,EAAA2B,KACA1K,MAGAzD,EAAAoE,IAAA,YAAA,WAGAzB,EAAAqN,aAAA,QAAArN,EAAAqF,cACAsH,MAIA/M,EAAA8B,KAAA,6CCvVA1E,QAAAC,OAAA,iBACAwC,WAAA,oBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3C,EAAA4C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GA0CA,QAAAgL,KACAtL,EAAAmM,uBAAAjL,QAAA,SAAAsK,GACAA,EAAAjH,YAAAvE,EAAA0G,2BAAA8E,EAAAjH,eAKA,QAAAkH,KACAzL,EAAAgJ,uBAAA,GAEAhJ,EAAA0L,kBACApL,EAAAqL,8BACAjL,QAAA,SAAAC,GAOA,QAAAiL,KACA5L,EAAA0L,eAAAxK,QAAA,SAAAsK,GACAA,EAAAjH,YAAAvE,EAAA0G,2BAAA8E,EAAAjH,eARA5D,EAAAkL,WAAAhH,OAAA,GACA7E,EAAA8L,yBACA9L,EAAA0L,eAAA/K,EAAAkL,WACA/K,IASA8K,IACA5L,EAAA4C,oBAGA5C,EAAA0L,kBACA1L,EAAA+L,oBAAA,EACA/L,EAAAyG,sBACAzG,EAAAgJ,uBAAA,MAIAjI,MAAA,SAAAC,GACAhB,EAAAyG,sBACAzG,EAAAgJ,uBAAA,GAEAhJ,EAAA0L,kBACA1L,EAAA+L,oBAAA,EACA/L,EAAAiB,sBAAAD,KAIAhB,EAAA0K,eAGA,QAAA4C,KACAtN,EAAAgJ,uBAAA,GAEAhJ,EAAAoK,iBACA9G,YAAAjG,EAAAE,aAAA+F,aAAA,GACA+G,qBAAA,GACAC,cAAAjN,EAAAE,aAAA2N,YAAA,GAGA5K,EAAAiN,WAAAvN,EAAAoK,iBACA1J,QAAA,SAAAC,GACA,GAAA6M,GAAA7M,EAAA8M,OAWA,IATAnN,EAAAoN,wBAAAF,GACAxN,EAAA2N,uBAAAH,EAAAI,aAEA5N,EAAA+K,uBAAA/K,EAAA2N,wBAEA3N,EAAA6N,kBAAAL,EAAAM,MACA9N,EAAAoK,gBAAAC,qBAAAmD,EAAAO,iBAGAP,EAAAI,aAAA,EAAA,CACA5N,EAAAmM,uBAAAqB,EAAA3B,WACA7L,EAAAgO,4BACAlN,IAEAwK,IACAtL,EAAAmM,uBAAAjL,QAAA,SAAAsK,GACAxL,EAAAiE,cAAAuH,IAGA,IAAAyC,IACA1F,QAAA,EACAnB,YAAA,wCACAiB,IAAA,uBAAArI,EAAA2N,uBAAA,WAEA3N,GAAAiB,sBAAAgN,GACAjO,EAAAyK,eACAzK,EAAA4C,sBACA,CAEA5C,EAAAmM,yBACA,IAAA+B,IACA3F,QAAA,EACAnB,YAAA,wCACAiB,IAAA,gCAEArI,GAAAiB,sBAAAiN,GACAlO,EAAAmO,uBAAA,EACA1C,IACAzL,EAAAyG,sBACAzG,EAAA4C,qBAGA7B,MAAA,SAAAC,GACAhB,EAAAiB,sBAAAD,GAEAhB,EAAAmM,0BACAnM,EAAAmO,uBAAA,EACA1C,MAcA,QAAA3K,KACAd,EAAAmM,uBAAAjL,QAAA,SAAAsK,GACAA,EAAApK,WAAAzB,EAAA,WAAA6L,EAAAnK,WAGAmK,EAAAlK,SAAAC,OAAAiK,EAAAnK,WAAAG,OAAA,sBAvKAxB,EAAAyK,eAEAzK,EAAAoK,iBACA9G,YAAAjG,EAAAE,aAAA+F,aAAA,GACA+G,qBAAA,GACAC,cAAAjN,EAAAE,aAAA2N,YAAA,GAIAlL,EAAA0C,oBAAArF,EAAAE,aAAA+F,YAAA,uBAEAtD,EAAAmM,uBAAA7L,EAAAiM,kBACAvM,EAAA2N,uBAAA,EAEA3N,EAAA6N,kBAAA,SAAAC,GACAA,GAAAzQ,EAAAE,aAAA2N,YAKAlL,EAAA0L,kBAGA1L,EAAAmO,uBAAA,EACAnO,EAAA+L,oBAAA,EAEA/L,EAAAgO,0BAAA,WACAhO,EAAAgJ,uBAAA,GACAhJ,EAAAmO,uBAAA,EACAnO,EAAA+L,oBAAA,GAGA/L,EAAA8L,uBAAA,WACA9L,EAAAgJ,uBAAA,GACAhJ,EAAAmO,uBAAA,EACAnO,EAAA+L,oBAAA,GAqHAuB,IAIAtN,EAAAoO,iCAAA,WACA,MAAA,IAAApO,EAAAmM,uBAAAtH,QAcAhF,EAAAiB,EAAA,KAAA,GAAA,GAIAA,IAIAzD,EAAAoE,IAAA,YAAA,WACA,UAAAzB,EAAAqF,cACAiI,MAIA1N,EAAA8B,KAAA,2CC9LA1E,QAAAC,OAAA,iBAEAoR,QAAA,WAAA,KAAA,UAAA,aAAA,gBACA,SAAA3O,EAAAI,EAAAzC,EAAA8C,GACA,GAAA6B,KACA,QAEAA,SAAA,SAAA6H,GACA,MAAAA,GACA7H,EAAA6H,EAGA7H,OCZAhF,QAAAC,OAAA,iBACAoR,QAAA,cAAA,OAAA,QAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAAzO,EAAAxC,EAAA0C,EAAAzC,EAAA4C,EAAAE,EAAAC,GAEA,GAAAQ,KAOA,OALAX,GAAA+J,GAAA,mBAAA,SAAAH,GAEAxM,EAAAwF,WAAA,mBAAAgH,MAKArJ,eAAA,WACA,MAAAI,IAGAH,yBAAA,WACA,MAAArD,GAAAoO,KAAA,2BAGA3K,kBAAA,SAAAyN,GAEA,MADA1N,GAAA0N,EACAA,OCvBAtR,QAAAC,OAAA,iBACAoR,QAAA,eAAA,OAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAAzO,EAAAE,EAAAzC,EAAA4C,EAAAE,EAAAC,GAOA,MALAH,GAAA+J,GAAA,YAAA,WACApK,EAAA8B,KAAA,kCACArE,EAAAwF,WAAA,gBAIA0L,KAAA,WACA,MAAA,QCXAvR,QAAAC,OAAA,iBACAoR,QAAA,eAAA,OAAA,QAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAAzO,EAAAxC,EAAA0C,EAAAzC,EAAA4C,EAAAE,EAAAC,EAAA7C,GAEA,GAAAgO,MACAe,EAAA,EAEAH,IAYA,OAVAlM,GAAA+J,GAAA,UAAA,SAAAH,GAEAxM,EAAAwF,WAAA,UAAAgH,KAGA5J,EAAA+J,GAAA,aAAA,SAAAH,GAEAxM,EAAAwF,WAAA,aAAAgH,MAKA0C,gBAAA,WACA,MAAAhB,IAGAiB,qBAAA,WACA,MAAAF,IAGAL,mBAAA,SAAAf,GACA,MAAA9N,GAAAoO,KAAA,iBACAsC,KAAA5C,KAIAS,4BAAA,WACA,MAAAvO,GAAAoO,KAAA,8BAGAY,YAAA,SAAAP,GAEA,MADAN,GAAAM,EACAA,GAGAe,kBAAA,SAAAC,GACA,MAAAzP,GAAAoO,KAAA,gBACAqB,UAAAA,KAIA2B,4BAAA,WACA,MAAArC,IAGAuB,wBAAA,SAAAe,GAEA,MADAtC,GAAAsC,GAIAlB,WAAA,SAAAmB,GACA,MAAAtR,GAAAoO,KAAA,kBAAAkD,QC5DA1R,QAAAC,OAAA,iBAEAoR,QAAA,UAAA,OAAA,YAAA,aACA,SAAAzO,EAAAG,EAAA1C,GACA,GAAAY,EAEAA,GADA8B,EAAAgD,OACAhD,EAAAiD,OAAA,IAAAjD,EAAAgD,OAEAhD,EAAAiD,MAEA,IAAA/C,GAAA0O,GAAAC,QAAA3Q,EAEA,QACA+L,GAAA,SAAA6E,EAAAC,GACA7O,EAAA+J,GAAA6E,EAAA,WACA,GAAAE,GAAAC,SACA3R,GAAA4R,OAAA,WACAH,EAAAI,MAAAjP,EAAA8O,QAKA5M,KAAA,SAAA0M,EAAAhF,EAAAiF,GACA7O,EAAAkC,KAAA0M,EAAAhF,EAAA,WACA,GAAAkF,GAAAC,SACA3R,GAAA4R,OAAA,WACAH,GACAA,EAAAI,MAAAjP,EAAA8O,QAMAI,mBAAA,SAAAN,EAAAC,GACA7O,EAAAkP,mBAAAN,EAAA,WACA,GAAAE,GAAAC,SACA3R,GAAA4R,OAAA,WACAH,EAAAI,MAAAjP,EAAA8O,YAQAV,QAAA,iBAAA,OAAA,QAAA,aACA,SAAAzO,EAAAxC,EAAAC,GACA,OACA0E,YAAA,WACA,MAAA3E,GAAAI,IAAA,qBAGA4R,cAAA,SAAAC,GACA,MAAAjS,GAAAoO,KAAA,aAAA6D,QAMAhB,QAAA,iBAAA,QACA,SAAAjR,GACA,OAEAiO,aAAA,WACA,MAAAjO,GAAAoO,KAAA","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('HotController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$document', 'logoutService', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $document, logoutService, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            $scope.finishedLoading = function () {\n                $rootScope.$broadcast('finishedLoading');\n            };\n\n            //set index landing page url\n            if ($location.port()) {\n                $scope.indexPageUrl = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n            } else {\n                $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            }\n\n            //variable to show or hide disqus if window.host contains negusmath\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //this function returns the highlightText to the query string on the location url\n            $scope.refillHighLightText = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.highlightText = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                }\n            };\n\n            $scope.refillHighLightText();\n\n            $scope.highlightThisText = function (textToHighlight) {\n                var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                $(theElement).highlight($scope.highlightText);\n                return theElement.html();\n            };\n\n            $scope.removeHighLightText = function (textString) {\n                $scope.highlightText = '';\n                var theElement = $(\"<div>\" + textString + \"</div>\");\n                $(theElement).removeHighlight();\n                return theElement.html();\n            };\n\n            $scope.highLightPost = function (postObject) {\n                if ($scope.highLightReference()) {\n                    if (postObject.authorName) {\n                        postObject.authorName = $scope.highlightThisText(postObject.authorName);\n                    }\n                    if (postObject.postHeading) {\n                        postObject.postHeading = $scope.highlightThisText(postObject.postHeading);\n                    }\n                    if (postObject.postContent) {\n                        postObject.postContent = $scope.highlightThisText(postObject.postContent);\n                    }\n                    if (postObject.postSummary) {\n                        postObject.postSummary = $scope.highlightThisText(postObject.postSummary);\n                    }\n                    if (postObject.postTags) {\n                        postObject.postTags.forEach(function (tag) {\n                            tag.text = $scope.highlightThisText(tag.text);\n                        })\n                    }\n                }\n            };\n\n            $scope.removePostHighlights = function (postObject) {\n                if (postObject.authorName) {\n                    postObject.authorName = $scope.removeHighLightText(postObject.authorName);\n                }\n                if (postObject.postHeading) {\n                    postObject.postHeading = $scope.removeHighLightText(postObject.postHeading);\n                }\n                if (postObject.postContent) {\n                    postObject.postContent = $scope.removeHighLightText(postObject.postContent);\n                }\n                if (postObject.postSummary) {\n                    postObject.postSummary = $scope.removeHighLightText(postObject.postSummary);\n                }\n                if (postObject.postTags) {\n                    postObject.postTags.forEach(function (tag) {\n                        tag.text = $scope.removeHighLightText(tag.text);\n                    })\n                }\n            };\n\n            //stateChangeCounter counts the stateChanges from the previous search,\n            //when the user goes further, you will need to disable search highlight\n            //also, you can use a timer\n            $scope.stateChangeCounter = 0;\n            $scope.highLightReference = function () {\n                var queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                if (queryString) {\n                    //only highlight when the query string is more than 3 characters\n                    if (queryString.length > 3) {\n                        if ($rootScope.$state.current.name == 'search') {\n                            $scope.stateChangeCounter = 0;\n                            $scope.highlightText = $rootScope.$stateParams.queryString;\n                            return true;\n                        } else if ($scope.stateChangeCounter > 0) {\n                            $scope.stateChangeCounter++;\n                            return false;\n                        } else {\n                            $scope.stateChangeCounter++;\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            };\n\n            //listens for state changes, used to activate active states\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                //clear all banners\n                $scope.clearBanners();\n\n                //clear all toasts\n                $scope.clearToasts();\n            });\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //listens for a finished loading event changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n                $scope.refillHighLightText();\n                $scope.fillSearchBox();\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$stateChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                $scope.showHideLoadingBanner = function (bool) {\n                    if (bool) {\n                        $('#loading-splash-card').removeClass('hidden');\n                        $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                    } else {\n                        $('#loading-splash-card').addClass('hidden');\n                        $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                    }\n                };\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n\n            $scope.clearToasts = function () {\n                toastr.clear();\n            };\n\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        if ($scope.userData.isRegistered == 'yes') {\n                            $scope.clientIsRegistered = true;\n                        } else {\n                            $scope.clientIsRegistered = false;\n                        }\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n\n            //function to go to landing page\n            $scope.goToLandingPage = function () {\n                $window.location.href = 'index';\n            };\n\n\n            //search functionality\n            $scope.mainSearchModel = {\n                queryString: \"\",\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //put the query string in the search box\n            $scope.fillSearchBox = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                } else {\n                    $scope.mainSearchModel.queryString = '';\n                }\n            };\n\n            $scope.fillSearchBox();\n\n\n            $scope.performMainSearch = function () {\n                if ($scope.mainSearchModel.queryString.length > 0) {\n                    if ($location.port()) {\n                        $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    } else {\n                        $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    }\n                }\n            };\n\n            //==================================================paging controllers for posts\n            $scope.showPaging = false;\n            $scope.showThePager = function () {\n                $scope.showPaging = true;\n            };\n            $scope.hideThePager = function () {\n                $scope.showPaging = false;\n            };\n            $scope.pagingMaxSize = 5;\n            $scope.numPages = 5;\n            $scope.itemsPerPage = 10;\n            $scope.pagingTotalCount = 1;\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                $scope.pagingTotalCount = newTotalCount;\n            };\n\n            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                //refresh the currentPage if the user is going to a new state\n                if (fromState.name != toState.name) {\n                    $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                    $scope.pagingTotalCount = 1\n                }\n            });\n\n            $scope.goToPage = function () {\n                //go to the current state's new page\n                $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                $scope.goToTop();\n            };\n            //=======================================================end of post paging controllers\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //show paging\n            $scope.showThePager();\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No posts available for this page\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.showThePager();\n                            $scope.finishedLoading();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'home') {\n                    getPagePosts();\n                }\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            //hide paging\n            $scope.hideThePager();\n\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //highlight the post if needed\n                            $scope.highLightPost($scope.post);\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n                            $scope.finishedLoading();\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                //the $scope.currentState is defined in main controller\n                if (!$scope.editingMode && $scope.currentState == 'post') {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //show paging\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            $scope.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here******************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        //change paging total count\n                        $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.showMainSearchResultsOnly();\n                            updateTimeAgo();\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.mainSearchResultsPosts.forEach(function (post) {\n                                $scope.highLightPost(post);\n                            });\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                            $scope.finishedLoading();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'search') {\n                    getMainSearchResults();\n                }\n            });\n\n            $log.info('SearchController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}