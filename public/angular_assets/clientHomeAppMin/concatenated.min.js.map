{"version":3,"sources":["clientHomeApp.js","adirectives/bannerDir.js","adirectives/componentDir.js","adirectives/postViewDir.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","filters/filters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","restrict","link","$scope","$element","$attrs","universalBanner","show","bannerClass","msg","$on","event","banner","newPostBanner","showToast","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","resp","status","isLoadingTrue","isLoadingFalse","globals","template","defaultTitle","getDocumentTitle","$watch","$window","$location","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","current","name","stateHistory","length","hasOwnProperty","performMainSearch","location","href","port","host","logoutService","logoutClient","responseStatusHandler","errResponse","$q","$filter","$log","$interval","socket","mainService","socketService","$modal","PostService","getPagePosts","showLoadingBanner","getPostsFromServer","pageNumber","postsArray","posts","updatePosts","responseMimic","mainSearchResultsPosts","showSuggestedPostsOnly","goToTop","showThePostsOnly","postsCount","changePagingTotalCount","showThePager","errResp","defaultDocumentTitle","getCurrentPosts","getCurrentPostsCount","suggestedPosts","getSuggestedPosts","hideLoadingBanner","hideSuggested","showSuggested","data","addNewToPosts","post","getSuggestedPostsFromServer","updateSuggestedPosts","showSuggestedPosts","hideThePager","showHideSuggestedPosts","showPaging","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","newTotalCount","currentPage","toState","toParams","fromState","fromParams","goToPage","console","log","go","scope","postContent","postSummary","postTags","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","$document","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","showDisqus","search","duration","someElement","element","document","getElementById","scrollToElement","currentTime","moment","format","updateCurrentTime","on","history","push","$$path","temp","back","prevUrl","splice","path","clearBanners","isEditingPost","$broadcast","getFullPost","getPostFromServer","postIndex","calcObjectLength","thePost","updatePost","changeDocumentTitle","postHeading","showThePostOnly","postIsLoaded","showEditPost","getCurrentPost","getMainSearchResults","mainSearch","results","totalResults","theResult","updateMainSearchResults","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","getCurrentMainSearchResults","checkIfPostsSearchResultsIsEmpty","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","authorName","removePostTagsHighlight","makeBanner","redirect","redirectPage","notify","type","registrationBanner","reason","warn","factory","obj","len","prop","documentTitle","newDocumentTitle","hotThisWeekArray","info","done","mainSearchResultsPostsCount","updatePostsCount","newCount","newPost","makePost","theNewPost","tempPost","unshift","searchObject","resultsArray","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/client/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/client/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showThePager();\n                globals.defaultDocumentTitle();\n\n                $scope.posts = PostService.getCurrentPosts();\n                $scope.postsCount = PostService.getCurrentPostsCount();\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                //variable that determines whether to show posts/suggested posts or not\n                $scope.mainSearchResultsPosts = false;\n\n                $scope.showThePostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = true;\n                    $scope.hideSuggested();\n                };\n\n                $scope.showSuggestedPostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = false;\n                    $scope.showSuggested();\n                };\n\n                function getPagePosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getPostsFromServer($rootScope.$stateParams.pageNumber || 1)\n                        .success(function (resp) {\n                            //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                            //used if the user is accessing a page that is beyond the number of posts\n                            if (resp.postsArray.length == 0) {\n\n                                //empty the postsArray\n                                $scope.posts = PostService.updatePosts([]);\n\n                                var responseMimic = {\n                                    banner: true,\n                                    bannerClass: 'alert alert-dismissible alert-success',\n                                    msg: \"No more posts to show\"\n                                };\n                                $rootScope.responseStatusHandler(responseMimic);\n                                $scope.mainSearchResultsPosts = false;\n                                $scope.showSuggestedPostsOnly();\n                                $scope.goToTop();\n                            } else {\n                                $scope.posts = PostService.updatePosts(resp.postsArray);\n                                $scope.showThePostsOnly();\n                                if (resp.postsCount) {\n                                    $scope.postsCount = resp.postsCount;\n                                    $scope.changePagingTotalCount($scope.postsCount);\n                                }\n                                $scope.showThePager();\n                            }\n                        })\n                        .error(function (errResp) {\n                            $rootScope.responseStatusHandler(errResp);\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n                            $scope.mainSearchResultsPosts = false;\n                            $scope.showSuggestedPostsOnly();\n                        });\n                }\n\n                getPagePosts();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    //newPost goes to page 1, so update only if the page is 1\n                    if ($rootScope.$stateParams.pageNumber == 1) {\n                        $scope.posts = PostService.addNewToPosts(data.post);\n                    }\n                    if (data.postsCount) {\n                        $scope.postsCount = data.postsCount;\n                        $scope.changePagingTotalCount($scope.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                $scope.showSuggestedPosts = false;\n                $rootScope.showHideSuggestedPosts = function (bool) {\n                    if (bool) {\n                        $scope.showSuggestedPosts = true;\n                        //get new suggested posts\n                        getSuggestedPosts();\n                    } else {\n                        $scope.showSuggestedPosts = false;\n                    }\n                };\n\n                function getSuggestedPosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $scope.hideLoadingBanner();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $scope.showSuggestedPosts = false;\n                                $scope.goToTop();\n                                $scope.hideLoadingBanner();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.goToTop();\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $scope.showSuggestedPosts = false;\n                            $rootScope.responseStatusHandler(errResp);\n                            $scope.hideLoadingBanner();\n                        });\n\n                    //whatever happens, hide the pager\n                    $scope.hideThePager();\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/client/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    console.log($scope.currentPage);\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                    $scope.goToTop();\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('mainFooter', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'logoutService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, logoutService, $document, fN) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //loading banner\n            $scope.showLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(true);\n                }\n            };\n\n            $scope.hideLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(false);\n                }\n            };\n\n            //pager\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            //suggestedPosts\n            $scope.showSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(true);\n                }\n            };\n\n            $scope.hideSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(false);\n                }\n            };\n\n            //total posts count\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.post = PostService.getCurrentPost();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            $scope.postIsLoaded = false;\n\n            function getFullPost() {\n                $scope.showLoadingBanner();\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.post = PostService.updatePost(resp.thePost);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = PostService.updatePost({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = PostService.updatePost({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = PostService.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'home.post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = false;\n                $scope.showSuggested();\n            };\n\n            function getMainSearchResults() {\n                $scope.showLoadingBanner();\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                        $scope.showMainSearchResults = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", ['$filter', function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", ['$filter', function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('clientHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePosts')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var post = {};\n            var posts = [];\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    if (postsArray == []) {\n                        posts = [];\n                    } else {\n                        posts = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts;\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    posts.unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post = $filter('preparePosts')(newPost, null);\n                    }\n                    return post;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePosts')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}