{"version":3,"sources":["clientHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","$rootScope","socket","mainService","socketService","globals","$modal","PostService","$stateParams","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","$document","$state","logoutService","cfpLoadingBar","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","showDisqus","host","search","event","toState","toParams","fromState","fromParams","currentState","name","history","push","$$path","back","prevUrl","length","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","clearBanners","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","on","console","log","goToLandingPage","logoutClient","preparePostSummaryContent","posts","post","postSummary","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","pageNumber","responseMimic","showPosts","updatePosts","showThePostsOnly","postCount","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","postContent","thePost","postHeading","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","factory","$broadcast","hotThisWeekArray","done","page","port","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus'\n])\n    .run(function ($templateCache, $http) {\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider.otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$document', '$state', '$stateParams', 'logoutService', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $document, $state, $stateParams, logoutService, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            //variable to show or hide disqus if window.host contains negusmath\n            if ($location.host().search(\"negusmath\") !== -1) {\n                $scope.showDisqus = true;\n            } else {\n                $scope.showDisqus = false;\n            }\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$routeChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            //clear banners when the state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.clearBanners();\n            });\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                $scope.showHideLoadingBanner = function (bool) {\n                    if (bool) {\n                        $('#loading-splash-card').removeClass('hidden');\n                        $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                    } else {\n                        $('#loading-splash-card').addClass('hidden');\n                        $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                    }\n                };\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        if ($scope.userData.isRegistered == 'yes') {\n                            $scope.clientIsRegistered = true;\n                        } else {\n                            $scope.clientIsRegistered = false;\n                        }\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n\n            //function to go to landing page\n            $scope.goToLandingPage = function () {\n                $window.location.href = 'index';\n            };\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.showPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postCount) {\n                                $scope.postsCount = resp.postsCount;\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.showPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postCount) {\n                    $scope.postCount = data.postCount;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                getPagePosts();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n                            \n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}