{"version":3,"sources":["clientHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","$document","logoutService","cfpLoadingBar","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","showDisqus","host","search","refillHighLightText","current","name","queryString","highlightText","highlightThisText","textToHighlight","theElement","$","highlight","html","removeHighLightText","textString","removeHighlight","highLightPost","postObject","highLightReference","authorName","postHeading","postContent","postSummary","postTags","tag","text","removePostHighlights","stateChangeCounter","length","event","toState","toParams","fromState","fromParams","clearBanners","clearToasts","currentState","fillSearchBox","history","push","$$path","back","prevUrl","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastr","clear","toastType","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","on","console","log","goToLandingPage","mainSearchModel","postSearchUniqueCuid","requestedPage","performMainSearch","port","logoutClient","preparePostSummaryContent","posts","post","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","pageNumber","responseMimic","mainSearchResultsPosts","updatePosts","showThePostsOnly","postCount","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","$broadcast","hotThisWeekArray","done","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('HotController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$document', 'logoutService', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $document, logoutService, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            //variable to show or hide disqus if window.host contains negusmath\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //this function returns the highlightText to the query string on the location url\n            $scope.refillHighLightText = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.highlightText = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                }\n            };\n\n            $scope.refillHighLightText();\n\n            $scope.highlightThisText = function (textToHighlight) {\n                var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                $(theElement).highlight($scope.highlightText);\n                return theElement.html();\n            };\n\n            $scope.removeHighLightText = function (textString) {\n                $scope.highlightText = '';\n                var theElement = $(\"<div>\" + textString + \"</div>\");\n                $(theElement).removeHighlight();\n                return theElement.html();\n            };\n\n            $scope.highLightPost = function (postObject) {\n                if ($scope.highLightReference()) {\n                    if (postObject.authorName) {\n                        postObject.authorName = $scope.highlightThisText(postObject.authorName);\n                    }\n                    if (postObject.postHeading) {\n                        postObject.postHeading = $scope.highlightThisText(postObject.postHeading);\n                    }\n                    if (postObject.postContent) {\n                        postObject.postContent = $scope.highlightThisText(postObject.postContent);\n                    }\n                    if (postObject.postSummary) {\n                        postObject.postSummary = $scope.highlightThisText(postObject.postSummary);\n                    }\n                    if (postObject.postTags) {\n                        postObject.postTags.forEach(function (tag) {\n                            tag.text = $scope.highlightThisText(tag.text);\n                        })\n                    }\n                }\n            };\n\n            $scope.removePostHighlights = function (postObject) {\n                if (postObject.authorName) {\n                    postObject.authorName = $scope.removeHighLightText(postObject.authorName);\n                }\n                if (postObject.postHeading) {\n                    postObject.postHeading = $scope.removeHighLightText(postObject.postHeading);\n                }\n                if (postObject.postContent) {\n                    postObject.postContent = $scope.removeHighLightText(postObject.postContent);\n                }\n                if (postObject.postSummary) {\n                    postObject.postSummary = $scope.removeHighLightText(postObject.postSummary);\n                }\n                if (postObject.postTags) {\n                    postObject.postTags.forEach(function (tag) {\n                        tag.text = $scope.removeHighLightText(tag.text);\n                    })\n                }\n            };\n\n            //stateChangeCounter counts the stateChanges from the previous search,\n            //when the user goes further, you will need to disable search highlight\n            //also, you can use a timer\n            $scope.stateChangeCounter = 0;\n            $scope.highLightReference = function () {\n                var queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                if (queryString) {\n                    //only highlight when the query string is more than 3 characters\n                    if (queryString.length > 3) {\n                        if ($rootScope.$state.current.name == 'search') {\n                            $scope.stateChangeCounter = 0;\n                            $scope.highlightText = $rootScope.$stateParams.queryString;\n                            return true;\n                        } else if ($scope.stateChangeCounter > 0) {\n                            $scope.stateChangeCounter++;\n                            return false;\n                        } else {\n                            $scope.stateChangeCounter++;\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            };\n\n            //listens for state changes, used to activate active states\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                //clear all banners\n                $scope.clearBanners();\n\n                //clear all toasts\n                $scope.clearToasts();\n            });\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //listens for a finished loading event changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n                $scope.refillHighLightText();\n                $scope.fillSearchBox();\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$routeChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                $scope.showHideLoadingBanner = function (bool) {\n                    if (bool) {\n                        $('#loading-splash-card').removeClass('hidden');\n                        $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                    } else {\n                        $('#loading-splash-card').addClass('hidden');\n                        $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                    }\n                };\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n\n            $scope.clearToasts = function () {\n                toastr.clear();\n            };\n\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        if ($scope.userData.isRegistered == 'yes') {\n                            $scope.clientIsRegistered = true;\n                        } else {\n                            $scope.clientIsRegistered = false;\n                        }\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n\n            //function to go to landing page\n            $scope.goToLandingPage = function () {\n                $window.location.href = 'index';\n            };\n\n\n            //search functionality\n            $scope.mainSearchModel = {\n                queryString: \"\",\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //put the query string in the search box\n            $scope.fillSearchBox = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                } else {\n                    $scope.mainSearchModel.queryString = '';\n                }\n            };\n\n            $scope.fillSearchBox();\n\n\n            $scope.performMainSearch = function () {\n                if ($scope.mainSearchModel.queryString.length > 0) {\n                    if ($location.port()) {\n                        $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    } else {\n                        $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    }\n                }\n            };\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No posts available for this page\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postCount) {\n                                $scope.postsCount = resp.postsCount;\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postCount) {\n                    $scope.postCount = data.postCount;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'home') {\n                    getPagePosts();\n                }\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //highlight the post if needed\n                            $scope.highLightPost($scope.post);\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                //the $scope.currentState is defined in main controller\n                if (!$scope.editingMode && $scope.currentState == 'post') {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            $scope.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here******************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.showMainSearchResultsOnly();\n                            updateTimeAgo();\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.mainSearchResultsPosts.forEach(function (post) {\n                                $scope.highLightPost(post);\n                            });\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'search') {\n                    getMainSearchResults();\n                }\n            });\n\n            $log.info('SearchController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}