{"version":3,"sources":["clientHomeApp.js","filters.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","factory","$q","$window","socketService","userData","data","$log","socket","globals","hotThisWeek","on","$broadcast","getHotThisWeek","getHotThisWeekFromServer","post","updateHotThisWeek","hotThisWeekArray","info","done","posts","postsCount","mainSearchResultsPosts","getCurrentPosts","getCurrentPostsCount","getPostsFromServer","pageNumber","page","getSuggestedPostsFromServer","updatePosts","postsArray","getPostFromServer","postIndex","getCurrentMainSearchResults","updateMainSearchResults","resultValue","mainSearch","searchObject","$location","port","host","io","connect","eventName","callback","args","arguments","$apply","apply","emit","removeAllListeners","getUserData","sendContactUs","contactUsModel","logoutClient","controller","$filter","$interval","$scope","mainService","$modal","PostService","HotService","success","resp","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","$document","logoutService","cfpLoadingBar","initialRequests","clientIsRegistered","isRegistered","room","uniqueCuid","errResponse","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","finishedLoading","indexPageUrl","showDisqus","search","refillHighLightText","current","name","queryString","highlightText","highlightThisText","textToHighlight","theElement","$","highlight","html","removeHighLightText","textString","removeHighlight","highLightPost","postObject","highLightReference","authorName","postHeading","postContent","postSummary","postTags","tag","text","removePostHighlights","stateChangeCounter","length","event","toState","toParams","fromState","fromParams","clearBanners","clearToasts","currentState","fillSearchBox","history","push","$$path","back","prevUrl","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastr","clear","toastType","warning","closeButton","tapToDismiss","timeOut","currentTime","updateCurrentTime","console","log","goToLandingPage","mainSearchModel","postSearchUniqueCuid","requestedPage","performMainSearch","showPaging","showThePager","hideThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","goToPage","go","preparePostSummaryContent","getSuggestedPosts","suggestedPosts","prepareSuggestedPostsSummaryContent","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","responseMimic","showThePostsOnly","checkIfPostsIsEmpty","unshift","getFullPost","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","getMainSearchResults","theResult","results","mainSearchResultsCount","totalResults","changeCurrentPage","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('HotController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$document', 'logoutService', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $document, logoutService, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            $scope.finishedLoading = function () {\n                $rootScope.$broadcast('finishedLoading');\n            };\n\n            //set index landing page url\n            if ($location.port()) {\n                $scope.indexPageUrl = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n            } else {\n                $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            }\n\n            //variable to show or hide disqus if window.host contains negusmath\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //this function returns the highlightText to the query string on the location url\n            $scope.refillHighLightText = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.highlightText = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                }\n            };\n\n            $scope.refillHighLightText();\n\n            $scope.highlightThisText = function (textToHighlight) {\n                var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                $(theElement).highlight($scope.highlightText);\n                return theElement.html();\n            };\n\n            $scope.removeHighLightText = function (textString) {\n                $scope.highlightText = '';\n                var theElement = $(\"<div>\" + textString + \"</div>\");\n                $(theElement).removeHighlight();\n                return theElement.html();\n            };\n\n            $scope.highLightPost = function (postObject) {\n                if ($scope.highLightReference()) {\n                    if (postObject.authorName) {\n                        postObject.authorName = $scope.highlightThisText(postObject.authorName);\n                    }\n                    if (postObject.postHeading) {\n                        postObject.postHeading = $scope.highlightThisText(postObject.postHeading);\n                    }\n                    if (postObject.postContent) {\n                        postObject.postContent = $scope.highlightThisText(postObject.postContent);\n                    }\n                    if (postObject.postSummary) {\n                        postObject.postSummary = $scope.highlightThisText(postObject.postSummary);\n                    }\n                    if (postObject.postTags) {\n                        postObject.postTags.forEach(function (tag) {\n                            tag.text = $scope.highlightThisText(tag.text);\n                        })\n                    }\n                }\n            };\n\n            $scope.removePostHighlights = function (postObject) {\n                if (postObject.authorName) {\n                    postObject.authorName = $scope.removeHighLightText(postObject.authorName);\n                }\n                if (postObject.postHeading) {\n                    postObject.postHeading = $scope.removeHighLightText(postObject.postHeading);\n                }\n                if (postObject.postContent) {\n                    postObject.postContent = $scope.removeHighLightText(postObject.postContent);\n                }\n                if (postObject.postSummary) {\n                    postObject.postSummary = $scope.removeHighLightText(postObject.postSummary);\n                }\n                if (postObject.postTags) {\n                    postObject.postTags.forEach(function (tag) {\n                        tag.text = $scope.removeHighLightText(tag.text);\n                    })\n                }\n            };\n\n            //stateChangeCounter counts the stateChanges from the previous search,\n            //when the user goes further, you will need to disable search highlight\n            //also, you can use a timer\n            $scope.stateChangeCounter = 0;\n            $scope.highLightReference = function () {\n                var queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                if (queryString) {\n                    //only highlight when the query string is more than 3 characters\n                    if (queryString.length > 3) {\n                        if ($rootScope.$state.current.name == 'search') {\n                            $scope.stateChangeCounter = 0;\n                            $scope.highlightText = $rootScope.$stateParams.queryString;\n                            return true;\n                        } else if ($scope.stateChangeCounter > 0) {\n                            $scope.stateChangeCounter++;\n                            return false;\n                        } else {\n                            $scope.stateChangeCounter++;\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            };\n\n            //listens for state changes, used to activate active states\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                //clear all banners\n                $scope.clearBanners();\n\n                //clear all toasts\n                $scope.clearToasts();\n            });\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //listens for a finished loading event changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n                $scope.refillHighLightText();\n                $scope.fillSearchBox();\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$stateChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                $scope.showHideLoadingBanner = function (bool) {\n                    if (bool) {\n                        $('#loading-splash-card').removeClass('hidden');\n                        $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                    } else {\n                        $('#loading-splash-card').addClass('hidden');\n                        $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                    }\n                };\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n\n            $scope.clearToasts = function () {\n                toastr.clear();\n            };\n\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        if ($scope.userData.isRegistered == 'yes') {\n                            $scope.clientIsRegistered = true;\n                        } else {\n                            $scope.clientIsRegistered = false;\n                        }\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n\n            //function to go to landing page\n            $scope.goToLandingPage = function () {\n                $window.location.href = 'index';\n            };\n\n\n            //search functionality\n            $scope.mainSearchModel = {\n                queryString: \"\",\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //put the query string in the search box\n            $scope.fillSearchBox = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                } else {\n                    $scope.mainSearchModel.queryString = '';\n                }\n            };\n\n            $scope.fillSearchBox();\n\n\n            $scope.performMainSearch = function () {\n                if ($scope.mainSearchModel.queryString.length > 0) {\n                    if ($location.port()) {\n                        $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    } else {\n                        $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    }\n                }\n            };\n\n            //==================================================paging controllers for posts\n            $scope.showPaging = false;\n            $scope.showThePager = function () {\n                $scope.showPaging = true;\n            };\n            $scope.hideThePager = function () {\n                $scope.showPaging = false;\n            };\n            $scope.pagingMaxSize = 5;\n            $scope.numPages = 5;\n            $scope.itemsPerPage = 10;\n            $scope.pagingTotalCount = 1;\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                $scope.pagingTotalCount = newTotalCount;\n            };\n\n            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                //refresh the currentPage if the user is going to a new state\n                if (fromState.name != toState.name) {\n                    $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                    $scope.pagingTotalCount = 1\n                }\n            });\n\n            $scope.goToPage = function () {\n                //go to the current state's new page\n                $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                $scope.goToTop();\n            };\n            //=======================================================end of post paging controllers\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //show paging\n            $scope.showThePager();\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No posts available for this page\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.finishedLoading();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'home') {\n                    getPagePosts();\n                }\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            //hide paging\n            $scope.hideThePager();\n\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //highlight the post if needed\n                            $scope.highLightPost($scope.post);\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.finishedLoading();\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                //the $scope.currentState is defined in main controller\n                if (!$scope.editingMode && $scope.currentState == 'post') {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //show paging\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            $scope.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here******************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        //change paging total count\n                        $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.showMainSearchResultsOnly();\n                            updateTimeAgo();\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.mainSearchResultsPosts.forEach(function (post) {\n                                $scope.highLightPost(post);\n                            });\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic1);\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                            $scope.finishedLoading();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'search') {\n                    getMainSearchResults();\n                }\n            });\n\n            $log.info('SearchController booted successfully');\n\n        }\n    ]);"],"sourceRoot":"/source/"}