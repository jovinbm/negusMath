{"version":3,"sources":["clientHomeApp.js","adirectives/bannerDir.js","adirectives/dir.js","adirectives/postDir.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","filters/filters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","restrict","link","$scope","$element","$attrs","universalBanner","show","bannerClass","msg","$on","event","banner","showToast","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","resp","status","isLoadingTrue","isLoadingFalse","globals","template","defaultTitle","getDocumentTitle","$watch","$window","$location","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","current","name","stateHistory","length","hasOwnProperty","performMainSearch","location","href","port","host","logoutService","goToLandingPage","logoutClient","responseStatusHandler","errResponse","showPaging","showThePager","hideThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","pageNumber","toState","toParams","fromState","fromParams","goToPage","go","goToTop","$filter","PostService","scope","postContent","post","postSummary","postTags","forEach","tag","$q","$log","$interval","socket","mainService","socketService","$modal","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","errResp","$document","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","history","push","$$path","temp","back","prevUrl","splice","path","console","log","showDisqus","search","clearBanners","$broadcast","duration","someElement","element","document","getElementById","scrollToElement","currentTime","moment","format","updateCurrentTime","on","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","posts","responseMimic","mainSearchResultsPosts","updatePosts","showThePostsOnly","postsCount","defaultDocumentTitle","getCurrentPosts","getCurrentPostsCount","data","unshift","getFullPost","getPostFromServer","postIndex","thePost","calcObjectLength","changeDocumentTitle","postHeading","showThePostOnly","postIsLoaded","showPost","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","addUrl","postUrl","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","theElementString","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","highlight","theElement2","removeHighlight","makeBanner","redirect","redirectPage","notify","type","newPostBanner","registrationBanner","reason","warn","factory","obj","len","prop","documentTitle","newDocumentTitle","hotThisWeekArray","info","done","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = false;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$window', '$location', '$rootScope', 'logoutService', function ($window, $location, $rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/client/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.goToLandingPage = function () {\n                    $window.location.href = 'index';\n                };\n\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/client/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function () {\n                    $scope.showPaging = true;\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        $scope.pagingTotalCount = 1\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                    $scope.goToTop();\n                };\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_content.html',\n            scope: true,\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postContent = $filter('highlightText')($scope.post.postContent);\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_summary.html',\n            scope: true,\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postSummary = $filter('highlightText')($scope.post.postSummary);\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_tags.html',\n            scope: true,\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postTags = $scope.post.postTags;\n                $scope.postTags.forEach(function (tag) {\n                    tag.text = $filter('highlightText')(tag.text);\n                })\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'logoutService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, logoutService, $document, fN) {\n\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $scope.showHideLoadingBanner = function (bool) {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(bool);\n                }\n            };\n\n            $scope.showThePager = function (bool) {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager(bool);\n                }\n            };\n\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    console.log(newTotalCount);\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.clientIsRegistered = $scope.userData.isRegistered == 'yes';\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n            globals.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            $scope.suggestedPosts = $filter('makeVideoIframesResponsive')(null, $scope.suggestedPosts);\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToTop();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToTop();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToTop();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.posts = $filter('makeVideoIframesResponsive')(null, $scope.posts);\n\n                            $scope.showThePostsOnly();\n\n\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            $scope.showThePager();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    data.post = $filter('makeVideoIframesResponsive')(data.post, null);\n                    $scope.posts.unshift(data.post);\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home') {\n                    getPagePosts();\n                }\n            });\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            $scope.suggestedPosts = $filter('makeVideoIframesResponsive')(null, $scope.suggestedPosts);\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToTop();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToTop();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength($scope.post) != 0) {\n                            $scope.post = $filter('makeVideoIframesResponsive')($scope.post, null);\n                            $scope.post = $filter('AddPostUrl')($scope.post, null);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    data.post = $filter('makeVideoIframesResponsive')(data.post, null);\n                    $scope.post = data.post;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'post') {\n                    getFullPost();\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            $scope.suggestedPosts = $scope.suggestedPosts = $filter('makeVideoIframesResponsive')(null, $scope.suggestedPosts);\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToTop();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToTop();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.mainSearchResultsPosts = $filter('makeVideoIframesResponsive')(null, $scope.mainSearchResultsPosts);\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"AddTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"AddPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"AddPostUrl\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (post, posts) {\n            function addUrl(post) {\n                if (post.postIndex) {\n                    post.postUrl = 'http://www.negusmath.com/#!/post/' + post.postIndex;\n                }\n                return post;\n            }\n\n            if (post) {\n                return addUrl(post);\n            } else if (posts) {\n                posts.forEach(function (post) {\n                    post = addUrl(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post) {\n                    post = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        return function (theElementString) {\n\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                var finalString = textToHighlight;\n                var highlightDetails = checkSearchState();\n                if (highlightDetails.status === true) {\n                    //highlight\n                    var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement).highlight(highlightDetails.queryString);\n                    finalString = theElement.html();\n                } else {\n                    //remove highlight\n                    var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement2).removeHighlight();\n                    finalString = theElement2.html();\n                }\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);\n\n\n","angular.module('clientHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            var universalBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var registrationBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}