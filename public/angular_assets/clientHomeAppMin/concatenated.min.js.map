{"version":3,"sources":["clientHomeApp.js","adirectives/bannerDir.js","adirectives/fullPostDir.js","adirectives/pagingDir.js","adirectives/postStreamDir.js","adirectives/postViewDir.js","adirectives/simpleComponentsDir.js","adirectives/suggestedPostsDir.js","adirectives/universalSearchBoxDir.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/searchCtrl.js","filters/filters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","socketService","globals","$location","$window","scope","restrict","link","$scope","$element","$attrs","getAccountDetails","getUserData","success","resp","theUser","userData","isRegistered","accountStatusBanner","determineAccountStatus","checkAccountStatus","error","show","bannerClass","msg","emailIsConfirmed","isApproved","showResendEmail","isBanned","status","checkAccount","location","href","port","host","resendConfirmationEmail","userUniqueCuid","main","responseStatusHandler","err","$on","universalBanner","event","banner","newPostBanner","showToast","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","isLoadingTrue","isLoadingFalse","$q","$log","PostService","fN","getFullPost","getPostFromServer","postIndex","calcObjectLength","thePost","post","updatePost","changeDocumentTitle","postHeading","goToTop","showDisqus","postIsLoaded","errResponse","getCurrentPost","data","isEditingPost","current","name","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","getCurrentPostsCount","newValue","oldValue","currentPage","pageNumber","toState","toParams","fromState","fromParams","goToPage","go","getCurrentMainSearchResultsCount","getPagePosts","getFromServer","getPostsFromServer","postsArray","length","allPosts","updatePosts","postsCount","allPostsCount","updateAllPostsCount","errResp","hasOwnProperty","defaultDocumentTitle","getAllPosts","getAllPostsCount","showMore","addNewToPosts","updatePostsCount","postContent","postSummary","postTags","template","defaultTitle","getDocumentTitle","logoutService","logoutClient","validateContactUs","email","message","errors","contactUsModel","sendContactUs","formStatus","getSuggestedPosts","getSuggestedPostsFromServer","suggestedPosts","updateSuggestedPosts","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","stateHistory","performMainSearch","HotService","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","$filter","$interval","socket","$document","initialRequests","broadcastUserData","clientIsRegistered","emit","room","uniqueCuid","indexPageUrl","allData","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","moment","format","updateCurrentTime","history","push","$$path","temp","back","prevUrl","splice","path","getMainSearchResults","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","responseMimic2","getAllMainSearchResults","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","posts","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","authorName","removePostTagsHighlight","makeBanner","redirect","redirectPage","notify","type","registrationBanner","reason","warn","factory","obj","len","prop","documentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","editPostModel","mainSearchResultsPostsCount","getPosts","page","newCount","newPost","makePost","theNewPost","tempPost","unshift","getCurrentEditPostModel","getCurrentEditPostModelFromServer","updateCurrentEditPostModel","getMainSearchResultsCount","searchObject","resultsArray","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/client/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', 'globals', '$location', '$window', function ($rootScope, socketService, globals, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', 'fN', function ($q, $log, $rootScope, globals, PostService, fN) {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.post = PostService.getCurrentPost();\n\n                $scope.postIsLoaded = false;\n\n                function getFullPost() {\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (fN.calcObjectLength(resp.thePost) != 0) {\n                                $scope.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.post.postHeading);\n                                $rootScope.main.goToTop();\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.post = PostService.updatePost({});\n                                $rootScope.main.goToTop();\n                            }\n\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.post = PostService.updatePost({});\n                        });\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        $scope.post = PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    //only update the post variable if the user is not editing the current post\n                    if (!$rootScope.isEditingPost) {\n                        if ($rootScope.$state.current.name == 'home.post') {\n                            getFullPost();\n                        }\n                    }\n                });\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/general/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([]);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([]);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updatePostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/client/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $rootScope.main.goToTop();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $rootScope.main.goToTop();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $rootScope.main.responseStatusHandler(errResp);\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $rootScope.main.goToTop();\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                }\n            };\n\n            //=====================time functions=======================\n\n            //set current Date\n            $rootScope.main.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $rootScope.main.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n\n            //this important function broadcasts the availability of the users data to directives that require\n            //it e.g. the account status directive\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('clientHomeApp')\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$filter', '$log', '$rootScope', 'socket','$http',\n        function ($filter, $log, $rootScope, socket, $http) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$rootScope', 'socket',\n        function ($log, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}