{"version":3,"sources":["clientHomeApp.js","adirectives/bannerDir.js","adirectives/componentDir.js","adirectives/postViewDir.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","filters/filters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","restrict","link","$scope","$element","$attrs","universalBanner","show","bannerClass","msg","$on","event","banner","showToast","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","resp","status","isLoadingTrue","isLoadingFalse","globals","template","defaultTitle","getDocumentTitle","$watch","$window","$location","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","current","name","stateHistory","length","hasOwnProperty","performMainSearch","location","href","port","host","logoutService","logoutClient","responseStatusHandler","errResponse","PostService","getSuggestedPosts","showLoadingBanner","getSuggestedPostsFromServer","postsArray","suggestedPosts","updateSuggestedPosts","hideLoadingBanner","showSuggestedPosts","goToTop","errResp","hideThePager","showHideSuggestedPosts","showPaging","showThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","pageNumber","toState","toParams","fromState","fromParams","goToPage","go","$filter","scope","postContent","postSummary","postTags","$q","$log","$interval","socket","mainService","socketService","$modal","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","$document","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","showDisqus","search","duration","someElement","element","document","getElementById","scrollToElement","currentTime","moment","format","updateCurrentTime","on","console","log","history","push","$$path","temp","back","prevUrl","splice","path","clearBanners","isEditingPost","$broadcast","showSuggested","hideSuggested","getPagePosts","getPostsFromServer","posts","updatePosts","responseMimic","mainSearchResultsPosts","showSuggestedPostsOnly","showThePostsOnly","postsCount","defaultDocumentTitle","getCurrentPosts","getCurrentPostsCount","data","addNewToPosts","post","getFullPost","getPostFromServer","postIndex","calcObjectLength","thePost","updatePost","changeDocumentTitle","postHeading","showThePostOnly","postIsLoaded","showEditPost","getCurrentPost","getMainSearchResults","mainSearch","results","totalResults","theResult","updateMainSearchResults","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","getCurrentMainSearchResults","checkIfPostsSearchResultsIsEmpty","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","addUrl","postUrl","forEach","index","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","textString","theElementString","highlight","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","prepare","timeAgo","postDate","authorName","removePostTagsHighlight","makeBanner","redirect","redirectPage","notify","type","newPostBanner","registrationBanner","reason","warn","factory","obj","len","prop","documentTitle","newDocumentTitle","hotThisWeekArray","info","done","mainSearchResultsPostsCount","updatePostsCount","newCount","newPost","makePost","theNewPost","tempPost","unshift","searchObject","resultsArray","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home/\", '/home/1')\n            .when(\"/post\", '/home/1')\n            .when(\"/post/\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .when(\"/search/\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = false;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/client/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/client/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                $scope.showSuggestedPosts = false;\n                $rootScope.showHideSuggestedPosts = function (bool) {\n                    if (bool) {\n                        $scope.showSuggestedPosts = true;\n                        //get new suggested posts\n                        getSuggestedPosts();\n                    } else {\n                        $scope.showSuggestedPosts = false;\n                    }\n                };\n\n                function getSuggestedPosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $scope.hideLoadingBanner();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $scope.showSuggestedPosts = false;\n                                $scope.goToTop();\n                                $scope.hideLoadingBanner();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.goToTop();\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $scope.showSuggestedPosts = false;\n                            $rootScope.responseStatusHandler(errResp);\n                            $scope.hideLoadingBanner();\n                        });\n\n                    //whatever happens, hide the pager\n                    $scope.hideThePager();\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/client/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        $scope.pagingTotalCount = 1\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                    $scope.goToTop();\n                };\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'logoutService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, logoutService, $document, fN) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //loading banner\n            $scope.showLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(true);\n                }\n            };\n\n            $scope.hideLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(false);\n                }\n            };\n\n            //pager\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            //suggestedPosts\n            $scope.showSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(true);\n                }\n            };\n\n            $scope.hideSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(false);\n                }\n            };\n\n            //total posts count\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            $scope.showThePager();\n            globals.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n            $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.mainSearchResultsPosts = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggested();\n            };\n\n            function getPagePosts() {\n                $scope.showLoadingBanner();\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            $scope.showThePager();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = PostService.updatePosts([]);\n                        $scope.mainSearchResultsPosts = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getPagePosts();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts = PostService.addNewToPosts(data.post);\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home') {\n                    getPagePosts();\n                }\n            });\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.post = PostService.getCurrentPost();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            $scope.postIsLoaded = false;\n\n            function getFullPost() {\n                $scope.showLoadingBanner();\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.post = PostService.updatePost(resp.thePost);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = PostService.updatePost({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = PostService.updatePost({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = PostService.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = false;\n                $scope.showSuggested();\n            };\n\n            function getMainSearchResults() {\n                $scope.showLoadingBanner();\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                        $scope.showMainSearchResults = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"AddPostUrl\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (post, posts) {\n            function addUrl(post) {\n                if (post.postIndex) {\n                    post.postUrl = 'http://www.negusmath.com/#!/post/' + post.postIndex;\n                }\n                return post;\n            }\n\n            if (post) {\n                return addUrl(post);\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = addUrl(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getPostUrl\", ['$filter', function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postUrl = $filter('getPostUrl')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postUrl = $filter('getPostUrl')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);\n\n\n","angular.module('clientHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            var universalBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var registrationBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePosts')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var post = {};\n            var posts = [];\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    if (postsArray == []) {\n                        posts = [];\n                    } else {\n                        posts = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts;\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    posts.unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post = $filter('preparePosts')(newPost, null);\n                    }\n                    return post;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePosts')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}