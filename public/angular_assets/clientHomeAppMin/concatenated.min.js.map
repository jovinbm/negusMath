{"version":3,"sources":["clientHomeApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/searchCtrl.js","adirectives/bannerDir.js","adirectives/fullPostDir.js","adirectives/pagingDir.js","adirectives/postStreamDir.js","adirectives/postViewDir.js","adirectives/simpleComponentsDir.js","adirectives/suggestedPostsDir.js","adirectives/universalSearchBoxDir.js","filters/filters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$log","$scope","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","error","errResp","main","responseStatusHandler","$on","$filter","$interval","$window","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","moment","format","updateCurrentTime","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearToasts","isEditingPost","PostService","getMainSearchResults","pageNumber","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","banner","bannerClass","msg","responseMimic2","changeDocumentTitle","getAllMainSearchResults","showMore","current","directive","scope","restrict","link","$element","$attrs","getAccountDetails","theUser","accountStatusBanner","determineAccountStatus","checkAccountStatus","show","emailIsConfirmed","isApproved","showResendEmail","isBanned","status","checkAccount","location","href","port","resendConfirmationEmail","userUniqueCuid","err","universalBanner","newPostBanner","showToast","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","isLoadingTrue","isLoadingFalse","getFullPost","startLoading","getPostFromServer","postIndex","thePost","post","updatePost","postHeading","postIsLoaded","finishLoading","getCurrentPost","data","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","getAllPostsCount","newValue","oldValue","currentPage","goToPage","go","getMainSearchResultsCount","getPagePosts","getFromServer","getPostsFromServer","allPosts","updatePosts","postsCount","allPostsCount","updateAllPostsCount","hasOwnProperty","defaultDocumentTitle","getAllPosts","addNewToPosts","postContent","postSummary","postTags","template","defaultTitle","getDocumentTitle","logoutService","logoutClient","validateContactUs","email","message","errors","contactUsModel","sendContactUs","formStatus","$timeout","getSuggestedPosts","getSuggestedPostsFromServer","suggestedPosts","updateSuggestedPosts","fillSearchBox","performMainSearch","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","posts","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","authorName","removePostTagsHighlight","makeBanner","redirect","redirectPage","notify","type","registrationBanner","reason","warn","factory","calcObjectLength","obj","len","prop","documentTitle","newDocumentTitle","getLocationHost","on","hotThisWeekArray","info","done","editPostModel","mainSearchResultsPostsCount","getPosts","page","newCount","newPost","makePost","theNewPost","tempPost","unshift","getCurrentEditPostModel","getCurrentEditPostModelFromServer","updateCurrentEditPostModel","searchObject","resultsArray","suggestedPostsArray","submitNewPost","submitPostUpdate","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/client/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                }\n            };\n\n            //=====================time functions=======================\n\n            //set current Date\n            $rootScope.main.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $rootScope.main.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n\n            //this important function broadcasts the availability of the users data to directives that require\n            //it e.g. the account status directive\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults($rootScope.$stateParams.pageNumber);\n                }\n            });\n        }\n    ]);","angular.module('clientHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', 'globals', '$location', '$window', function ($rootScope, socketService, globals, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData && Object.keys(userData).length > 0) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        $rootScope.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/general/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/client/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/client/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', function ($rootScope, PostService, $timeout) {\n        return {\n            templateUrl: 'views/general/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                $timeout(getSuggestedPosts, 5000);\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/client/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('clientHomeApp')\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$filter', '$log', '$rootScope', 'socket','$http',\n        function ($filter, $log, $rootScope, socket, $http) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$rootScope', 'socket',\n        function ($log, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n            return {\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}