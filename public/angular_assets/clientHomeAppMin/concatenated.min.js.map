{"version":3,"sources":["clientHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","$rootScope","socket","mainService","socketService","globals","$modal","PostService","$stateParams","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","$document","$state","event","toState","toParams","fromState","fromParams","currentState","name","history","push","$$path","back","prevUrl","length","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","document","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","clearBanners","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingTrue","isLoadingFalse","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","goToLandingPage","preparePostSummaryContent","posts","post","postSummary","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","pageNumber","responseMimic","showPosts","updatePosts","showThePostsOnly","postCount","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","postContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","errResponse","postUrl","host","editingMode","factory","userData","on","$broadcast","hotThisWeekArray","done","page","port","io","connect","eventName","callback","args","arguments","$apply","apply","emit","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"AAAAA,QAAAC,OAAA,iBACA,eACA,sBACA,cACA,+BACA,gBACA,YACA,WACA,OACA,YACA,cACA,aACA,sCAEAC,KAAA,iBAAA,QAAA,SAAAC,EAAAC,GAEAA,EAAAC,IAAA,gDAAAC,MAAAH,IACAC,EAAAC,IAAA,8CAAAC,MAAAH,OAGAI,QAAA,iBAAA,qBAAA,oBAAA,SAAAC,EAAAC,EAAAC,GACAD,EAAAE,UAAA,WAEAH,EACAI,MAAA,QACAC,IAAA,oBACAC,YAAA,iDAEAF,MAAA,QACAC,IAAA,mBACAC,YAAA,+CAEAF,MAAA,aAAAC,IAAA,YAEAH,EACAK,WAAA,GACAC,WAAA,QCpCAhB,QAAAC,OAAA,iBACAgB,OAAA,UAAA,WAIA,MAAA,UAAAC,EAAAC,EAAAC,GACA,IAAAF,EAAA,MAAA,OAkBA,IAhBAC,IACAA,EAAAE,KAAAC,OAGAtB,QAAAuB,OAAAL,GACAA,EAAAA,EAAAM,UACA,gBAAAN,KACAA,EAAA,GAAAG,MAAAH,GAAAM,WAGAxB,QAAAuB,OAAAJ,GACAA,EAAAA,EAAAK,UACA,gBAAAL,KACAA,EAAA,GAAAE,MAAAF,GAAAK,WAGA,gBAAAN,IAAA,gBAAAC,GAAA,CAIA,GACAM,GAAAC,KAAAC,KAAAR,EAAAD,GAAA,KACAU,KACAC,EAAA,GACAC,EAAA,KACAC,EAAA,MACAC,EAAA,OAEAC,EAAA,SACAC,EAAA,SAcA,OAZAN,GAAAC,GAAAJ,GAAA,GAAAL,EAAA,MAAA,sBACA,GAAAS,EAAAJ,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAI,IAAA,OACA,GAAAC,EAAAL,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAK,IAAA,MACA,EAAAC,EAAAN,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAM,IAAA,OACA,GAAAC,EAAAP,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAO,IAAA,QACA,GAAAC,EAAAR,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAQ,IAAA,QACA,IAAAC,EAAAT,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAS,IAAA,WACA,GAAA,eAEAN,EAAA,IAAA,IAAAA,EAAA,IAAAA,EAAA,GAAA,EAAA,IAAA,GACAA,EAAAA,EAAAQ,KAAA,KAEAhB,KAAA,EACAQ,EAEAT,GAAAD,EAAAU,EAAA,OAAA,MAAAA,MCtDA5B,QAAAC,OAAA,iBACAoC,WAAA,iBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,eAAA,aACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,QAAAC,KACAD,EAAAE,2BACAC,QAAA,SAAAC,GACAb,EAAAc,YAAAL,EAAAM,kBAAAF,EAAAC,aACAE,MAEAC,MAAA,SAAAC,GACAlB,EAAAmB,sBAAAD,KAQA,QAAAF,KACAhB,EAAAc,YAAAM,QAAA,SAAAC,GACAA,EAAAC,WAAA3B,EAAA,WAAA0B,EAAAE,WAGAF,EAAAG,SAAAC,OAAAJ,EAAAE,WAAAG,OAAA,sBAtBA1B,EAAAc,YAAAL,EAAAC,iBAaAA,IAaAb,EAAAmB,EAAA,KAAA,GAAA,GAIAA,IAIAf,EAAA0B,IAAA,YAAA,WACAjB,MAGAd,EAAAgC,KAAA,yCC1CAxE,QAAAC,OAAA,iBACAoC,WAAA,kBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,YAAA,SAAA,eACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAsB,EAAAC,EAAAtB,GAGAP,EAAA0B,IAAA,sBAAA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GACAnC,EAAAoC,aAAAJ,EAAAK,MAIA,IAAAC,KACArC,GAAA0B,IAAA,sBAAA,WACAW,EAAAC,KAAAxC,EAAAyC,UAEAvC,EAAAwC,KAAA,WACA,GAAAC,GAAAJ,EAAAK,OAAA,EAAAL,EAAAM,OAAA,IAAA,GAAA,GACA7C,GAAA8C,KAAAH,IAKA1C,EAAA8C,iBAAA,SAAAC,GACA,GAAAC,GAAA,CACA,KAAA,GAAAC,KAAAF,GACAA,EAAAG,eAAAD,IACAD,GAGA,OAAAA,GAMA,IAAAG,GAAA,CAMAnD,GAAAoD,QAAA,WACA,GAAAC,GAAAjG,QAAAkG,QAAAC,SAAAC,eAAA,OACA3B,GAAA4B,gBAAAJ,EAAA,GAAAF,IAIAnD,EAAA0D,oBAAA,WACA,GAAAL,GAAAjG,QAAAkG,QAAAC,SAAAC,eAAA,mBACA3B,GAAA4B,gBAAAJ,EAAA,GAAAF,IAIAnD,EAAA2D,2BAAA,SAAAC,GAEA,GAAAC,GAAAC,EAAA,QAAAF,EAAA,UAGAG,EAAAD,EAAA,sBAAAD,EAGA,IAAAE,EAAApB,OAAA,EAAA,CAGA,GAAAqB,GAAAD,EACAE,SAAA,yBACAC,KAAA,8DAGAL,GAAAM,KAAA,OAAAC,YAAAJ,GAGA,MAAAH,GAAAQ,QAQArE,EAAAsE,kBAAA,EAGAtE,EAAAuE,YAAA,EACAvE,EAAAwE,YAAA,GACAxE,EAAAyE,cAAA,GAGAzE,EAAA0E,wBAAA,EACA1E,EAAA2E,wBAAA,GACA3E,EAAA4E,0BAAA,GAGA5E,EAAA6E,mBAAA,EACA7E,EAAA8E,mBAAA,GACA9E,EAAA+E,qBAAA,GAEA/E,EAAAgF,aAAA,WACAhF,EAAAuE,YAAA,EACAvE,EAAA0E,wBAAA,EACA1E,EAAA6E,mBAAA,GAIA5E,EAAA0B,IAAA,sBAAA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GACAnC,EAAAgF,iBAGAhF,EAAAiF,qBAAA,WACAjF,EAAAsE,kBAAA,GAEAtE,EAAAkF,sBAAA,WACAlF,EAAAsE,kBAAA,GAGAtE,EAAAmB,sBAAA,SAAAN,GACAA,IACAA,EAAAsE,UACAtE,EAAAsE,WACArF,EAAAsF,SAAAC,KAAAxE,EAAAyE,cAGAzE,EAAA0E,SACA1E,EAAA0E,SACAvF,EAAAiF,uBAGApE,EAAA2E,QACA3E,EAAA4E,MAAA5E,EAAA6E,KACA1F,EAAA2F,UAAA9E,EAAA4E,KAAA5E,EAAA6E,KAGA7E,EAAA+E,QACA/E,EAAA2D,aAAA3D,EAAA6E,MACA1F,EAAAuE,YAAA,EACAvE,EAAAwE,YAAA3D,EAAA2D,YACAxE,EAAAyE,cAAA5D,EAAA6E,KAGA7E,EAAAgF,eACAhF,EAAA2D,aAAA3D,EAAA6E,MACA1F,EAAA6E,mBAAA,EACA7E,EAAA8E,mBAAAjE,EAAA2D,YACAxE,EAAA+E,qBAAAlE,EAAA6E,KAGA7E,EAAAiF,oBACAjF,EAAA2D,aAAA3D,EAAA6E,MACA1F,EAAA0E,wBAAA,EACA1E,EAAA2E,wBAAA9D,EAAA2D,YACAxE,EAAA4E,0BAAA/D,EAAA6E,KAGA7E,EAAAkF,QACAnG,EAAAoG,KAAAnF,EAAAkF,UAOA9F,EAAA0B,IAAA,wBAAA,SAAAI,EAAAlB,GACAb,EAAAmB,sBAAAN,KAQAb,EAAAiG,WAAA,EAEAjG,EAAAkG,cAAA,WACAlG,EAAAiG,WAAA,GAEAjG,EAAAmG,eAAA,WACAnG,EAAAiG,WAAA,GAGAhG,EAAA0B,IAAA,gBAAA,WACA3B,EAAAiG,WAAA,IAGAhG,EAAA0B,IAAA,iBAAA,WACA3B,EAAAiG,WAAA,IAMAjG,EAAA2F,UAAA,SAAAS,EAAAC,GACA,OAAAD,GACA,IAAA,UACAE,OAAAC,QACAD,OAAA1F,QAAAyF,EACA,MACA,KAAA,UACAC,OAAAC,QACAD,OAAAE,QAAAH,EAAA,WACAI,aAAA,EACAC,cAAA,GAEA,MACA,KAAA,QACAJ,OAAAC,QACAD,OAAArF,MAAAoF,EAAA,SACAI,aAAA,EACAC,cAAA,EACAC,SAAA,GAEA,MACA,SAEAL,OAAAC,UAIAtG,EAAA0B,IAAA,YAAA,SAAAI,EAAA6E,GACA,GAAAR,GAAAQ,EAAAR,UACAC,EAAAO,EAAAP,IAEArG,GAAA2F,UAAAS,EAAAC,KAMArG,EAAA6G,YAAA,GAGA7G,EAAA6G,YAAApF,SAAAC,OAAA,mBACA,IAAAoF,GAAA,WACA9G,EAAA6G,YAAApF,SAAAC,OAAA,oBAEA7B,GAAAiH,EAAA,IAAA,GAAA,GAMA9G,EAAA+G,gBAAA,WACAjH,EAAAsF,SAAAC,KAAA,SAKApF,EAAA0B,IAAA,YAAA,cAGA/B,EAAAgC,KAAA,yCCxPAxE,QAAAC,OAAA,iBACAoC,WAAA,mBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,eACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAsBA,QAAAwG,KACAhH,EAAAiH,MAAA7F,QAAA,SAAA8F,GACAA,EAAAC,YAAAnH,EAAA2D,2BAAAuD,EAAAC,eAKA,QAAAC,KAEApH,EAAAqH,kBACA9G,EAAA+G,8BACA1G,QAAA,SAAAC,GAOA,QAAA0G,KACAvH,EAAAqH,eAAAjG,QAAA,SAAA8F,GACAA,EAAAC,YAAAnH,EAAA2D,2BAAAuD,EAAAC,eARAtG,EAAA2G,WAAA7E,OAAA,GACA3C,EAAAyH,yBACAzH,EAAAqH,eAAAxG,EAAA2G,WACAxG,IASAuG,MAGAvH,EAAAqH,kBACArH,EAAA0H,oBAAA,EACA1H,EAAA0D,yBAIAzC,MAAA,SAAAC,GACAlB,EAAA0D,sBAEA1D,EAAAqH,kBACArH,EAAA0H,oBAAA,EACA1H,EAAAmB,sBAAAD,KAIA,QAAAyG,KACApH,EAAAqH,mBAAApH,EAAAqH,YACAjH,QAAA,SAAAC,GAGA,GAAA,GAAAA,EAAA2G,WAAA7E,OAAA,CAGA3C,EAAAiH,QAEA,IAAAa,IACAlC,QAAA,EACApB,YAAA,wCACAkB,IAAA,wBAEA1F,GAAAmB,sBAAA2G,GACA9H,EAAA+H,WAAA,EACAX,IACApH,EAAA0D,0BAEA1D,GAAAiH,MAAA1G,EAAAyH,YAAAnH,EAAA2G,YACAxH,EAAAiI,mBACAjH,IACAH,EAAAqH,YACAlI,EAAAmI,WAAAtH,EAAAsH,YAGAnB,MAGA/F,MAAA,SAAAC,GACAlB,EAAAmB,sBAAAD,GAEAlB,EAAAiH,SACAjH,EAAA+H,WAAA,EACAX,MAcA,QAAApG,KACAhB,EAAAiH,MAAA7F,QAAA,SAAA8F,GACAA,EAAA5F,WAAA3B,EAAA,WAAAuH,EAAA3F,WAGA2F,EAAA1F,SAAAC,OAAAyF,EAAA3F,WAAAG,OAAA,sBApHA1B,EAAAiH,MAAA1G,EAAA6H,kBACApI,EAAAmI,WAAA5H,EAAA8H,uBAEArI,EAAAqH,kBAGArH,EAAA+H,WAAA,EACA/H,EAAA0H,oBAAA,EAEA1H,EAAAiI,iBAAA,WACAjI,EAAA+H,WAAA,EACA/H,EAAA0H,oBAAA,GAGA1H,EAAAyH,uBAAA,WACAzH,EAAA+H,WAAA,EACA/H,EAAA0H,oBAAA,GAqFAC,IAIA3H,EAAAsI,oBAAA,WACA,MAAA,IAAAtI,EAAAiH,MAAAtE,QAcA9C,EAAAmB,EAAA,KAAA,GAAA,GAIAA,IAIAf,EAAA0B,IAAA,UAAA,SAAAI,EAAA6E,GAEA,GAAApG,EAAAqH,aACA7H,EAAAiH,MAAAsB,QAAA3B,EAAAM,MACAlG,IACAgG,KAEAJ,EAAAsB,YACAlI,EAAAkI,UAAAtB,EAAAsB,aAIAjI,EAAA0B,IAAA,YAAA,WACAgG,MAGA/H,EAAAgC,KAAA,yCAKAnC,WAAA,sBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,eACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAsBA,QAAA4G,KAEApH,EAAAqH,kBACA9G,EAAA+G,8BACA1G,QAAA,SAAAC,GAOA,QAAA0G,KACAvH,EAAAqH,eAAAjG,QAAA,SAAA8F,GACAA,EAAAC,YAAAnH,EAAA2D,2BAAAuD,EAAAC,eARAtG,EAAA2G,WAAA7E,OAAA,GACA3C,EAAAyH,yBACAzH,EAAAqH,eAAAxG,EAAA2G,WACAxG,IASAuG,MAGAvH,EAAAqH,kBACArH,EAAA0H,oBAAA,EACA1H,EAAA0D,yBAIAzC,MAAA,SAAAC,GACAlB,EAAA0D,sBAEA1D,EAAAqH,kBACArH,EAAA0H,oBAAA,EACA1H,EAAAmB,sBAAAD,KAIA,QAAAsH,KACAjI,EAAAkI,kBAAAzI,EAAA0I,WACA9H,QAAA,SAAAC,GAWA,QAAA8H,KACA3I,EAAAkH,KAAA0B,YAAA5I,EAAA2D,2BAAA3D,EAAAkH,KAAA0B,aAXA5I,EAAAkH,KAAArG,EAAAgI,QACA7I,EAAAmB,sBAAAN,GAEA,GAAAb,EAAA8C,iBAAA9C,EAAAkH,OACAlH,EAAA8I,kBACA9H,IACA+H,IACA/I,EAAAgJ,cAAA,EAOAL,MAIA3I,EAAAkH,QACAlH,EAAAiJ,UAAA,EACA7B,IACApH,EAAA0D,yBAIAzC,MAAA,SAAAiI,GACAlJ,EAAAmB,sBAAA+H,GAEAlJ,EAAAkH,QACAlH,EAAAiJ,UAAA,EACA7B,MAOA,QAAApG,KACAhB,EAAAkH,OACAlH,EAAAkH,KAAA5F,WAAA3B,EAAA,WAAAK,EAAAkH,KAAA3F,WAGAvB,EAAAkH,KAAA1F,SAAAC,OAAAzB,EAAAkH,KAAA3F,WAAAG,OAAA,qBAGA1B,EAAAqH,gBACArH,EAAAqH,eAAAjG,QAAA,SAAA8F,GACAA,EAAA5F,WAAA3B,EAAA,WAAAuH,EAAA3F,WAGA2F,EAAA1F,SAAAC,OAAAyF,EAAA3F,WAAAG,OAAA,sBAOA,QAAAqH,KACA/I,EAAAkH,KAAAiC,QAAA,UAAApJ,EAAAqJ,OAAA,mBAAApJ,EAAAkH,KAAAwB,UArHA1I,EAAA0I,UAAAlI,EAAAkI,UACA1I,EAAAkH,QACAlH,EAAAqH,kBAGArH,EAAAiJ,UAAA,EACAjJ,EAAA0H,oBAAA,EAEA1H,EAAA8I,gBAAA,WACA9I,EAAAiJ,UAAA,EACAjJ,EAAA0H,oBAAA,GAGA1H,EAAAyH,uBAAA,WACAzH,EAAAiJ,UAAA,EACAjJ,EAAA0H,oBAAA,GAGA1H,EAAAgJ,cAAA,EA2EAR,IAqBA3I,EAAAmB,EAAA,KAAA,GAAA,GAUAf,EAAA0B,IAAA,aAAA,SAAAI,EAAA6E,GACA5G,EAAAkH,KAAAN,EAAAM,KACAlG,MAGAf,EAAA0B,IAAA,YAAA,WAEA3B,EAAAqJ,aACAb,MAIA5I,EAAAgC,KAAA,6CCnSAxE,QAAAC,OAAA,iBAEAiM,QAAA,WAAA,KAAA,UAAA,aAAA,gBACA,SAAA5J,EAAAI,EAAAG,EAAAG,GACA,GAAAmJ,KACA,QAEAA,SAAA,SAAA3C,GACA,MAAAA,GACA2C,EAAA3C,EAGA2C,OCZAnM,QAAAC,OAAA,iBACAiM,QAAA,cAAA,OAAA,QAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAA1J,EAAApC,EAAAsC,EAAAG,EAAAC,EAAAE,EAAAC,GAEA,GAAAS,KAOA,OALAZ,GAAAsJ,GAAA,mBAAA,SAAA5C,GAEA3G,EAAAwJ,WAAA,mBAAA7C,MAKAlG,eAAA,WACA,MAAAI,IAGAH,yBAAA,WACA,MAAAnD,GAAA0J,KAAA,2BAGAnG,kBAAA,SAAA2I,GAEA,MADA5I,GAAA4I,EACAA,OCvBAtM,QAAAC,OAAA,iBACAiM,QAAA,eAAA,OAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAA1J,EAAAE,EAAAG,EAAAC,EAAAE,EAAAC,GAOA,MALAH,GAAAsJ,GAAA,YAAA,WACA5J,EAAAgC,KAAA,kCACA3B,EAAAwJ,WAAA,gBAIAE,KAAA,WACA,MAAA,QCXAvM,QAAAC,OAAA,iBACAiM,QAAA,eAAA,OAAA,QAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAA1J,EAAApC,EAAAsC,EAAAG,EAAAC,EAAAE,EAAAC,EAAAG,GAEA,GAAAyG,MACAkB,EAAA,CAYA,OAVAjI,GAAAsJ,GAAA,UAAA,SAAA5C,GAEA3G,EAAAwJ,WAAA,UAAA7C,KAGA1G,EAAAsJ,GAAA,aAAA,SAAA5C,GAEA3G,EAAAwJ,WAAA,aAAA7C,MAKAwB,gBAAA,WACA,MAAAnB,IAGAoB,qBAAA,WACA,MAAAF,IAGAP,mBAAA,SAAAC,GACA,MAAArK,GAAA0J,KAAA,iBACA0C,KAAA/B,KAIAP,4BAAA,WACA,MAAA9J,GAAA0J,KAAA,8BAGAc,YAAA,SAAAR,GAEA,MADAP,GAAAO,EACAA,GAGAiB,kBAAA,SAAAC,GACA,MAAAlL,GAAA0J,KAAA,gBACAwB,UAAAA,SC5CAtL,QAAAC,OAAA,iBAEAiM,QAAA,UAAA,OAAA,YAAA,aACA,SAAA1J,EAAAG,EAAAE,GACA,GAAAhC,EAEAA,GADA8B,EAAA8J,OACA9J,EAAAqJ,OAAA,IAAArJ,EAAA8J,OAEA9J,EAAAqJ,MAEA,IAAAlJ,GAAA4J,GAAAC,QAAA9L,EAEA,QACAuL,GAAA,SAAAQ,EAAAC,GACA/J,EAAAsJ,GAAAQ,EAAA,WACA,GAAAE,GAAAC,SACAlK,GAAAmK,OAAA,WACAH,EAAAI,MAAAnK,EAAAgK,QAKAI,KAAA,SAAAN,EAAApD,EAAAqD,GACA/J,EAAAoK,KAAAN,EAAApD,EAAA,WACA,GAAAsD,GAAAC,SACAlK,GAAAmK,OAAA,WACAH,GACAA,EAAAI,MAAAnK,EAAAgK,QAMAK,mBAAA,SAAAP,EAAAC,GACA/J,EAAAqK,mBAAAP,EAAA,WACA,GAAAE,GAAAC,SACAlK,GAAAmK,OAAA,WACAH,EAAAI,MAAAnK,EAAAgK,YAQAZ,QAAA,iBAAA,OAAA,QAAA,aACA,SAAA1J,EAAApC,EAAAyC,GACA,OACAuK,cAAA,SAAAC,GACA,MAAAjN,GAAA0J,KAAA,aAAAuD","file":"concatenated.min.js","sourcesContent":["angular.module('clientHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus'\n])\n    .run(function ($templateCache, $http) {\n        //views\n        $http.get('views/client/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/client/partials/views/full_post.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider.otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/client/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/client/partials/views/full_post.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('clientHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('clientHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$document', '$state', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $document, $state, $stateParams) {\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$routeChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            //clear banners when the state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.clearBanners();\n            });\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n\n            //function to go to landing page\n            $scope.goToLandingPage = function () {\n                $window.location.href = 'index';\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                PostService.getPostsFromServer($stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.showPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postCount) {\n                                $scope.postsCount = resp.postsCount;\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.showPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postCount) {\n                    $scope.postCount = data.postCount;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                getPagePosts();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n                            $scope.postIsLoaded = true;\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                $scope.post.postUrl = 'http://' + $location.host() + '/forums/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('clientHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                }\n            };\n        }]);","angular.module('clientHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n            return {\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ]);"],"sourceRoot":"/source/"}