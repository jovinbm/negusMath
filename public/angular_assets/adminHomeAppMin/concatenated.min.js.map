{"version":3,"sources":["adminHomeApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","filters/filters.js","filters/postFormFilters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/fullPostDir.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStreamDir.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/trashPostDir.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$log","$scope","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","error","errResp","main","responseStatusHandler","$on","$filter","$interval","$window","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","isLoading","startLoading","finishedLoading","moment","format","updateCurrentTime","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearToasts","isEditingPost","PostService","fN","getFullEditPostModel","getCurrentEditPostModelFromServer","postIndex","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","postHeading","getCurrentEditPostModel","cancelPostUpdate","showToast","location","href","port","postPath","validateEditForm","notify","errors","postContent","postSummary","postTags","submitPostUpdate","getMainSearchResults","pageNumber","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","banner","bannerClass","msg","responseMimic2","getAllMainSearchResults","showMore","current","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","post","posts","makeResp","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","status","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","authorName","removePostTagsHighlight","makeBanner","show","redirect","redirectPage","type","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","factory","calcObjectLength","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","removePostWithUniqueCuid","postUniqueCuid","found","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","trashPost","unTrashPost","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","logoutClient","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","directive","scope","restrict","link","$element","$attrs","getAccountDetails","theUser","accountStatusBanner","determineAccountStatus","checkAccountStatus","emailIsConfirmed","isApproved","showResendEmail","isBanned","checkAccount","err","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","finishLoading","newPostModel","postUploads","validateForm","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","template","showSpan","getPagePosts","getFromServer","postsCount","defaultTitle","logoutService","validateContactUs","email","message","formStatus","$timeout","fillSearchBox","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.newPost', {\n                url: '/newPost',\n                templateUrl: 'views/admin/partials/views/new_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                isLoading: true,\n\n                startLoading: function () {\n                    this.isLoading = true;\n                },\n                finishedLoading: function () {\n                    $rootScope.isLoading = false;\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService', 'fN',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService, fN) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (Object.keys(resp.thePost).length > 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults($rootScope.$stateParams.pageNumber);\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                removePostWithUniqueCuid: function (postUniqueCuid) {\n                    var found = 0;\n                    for (var pageNumber in allPosts) {\n                        if (found == 0) {\n                            if (allPosts.hasOwnProperty(pageNumber)) {\n                                allPosts[pageNumber].forEach(function (post, index) {\n                                    if (found == 0) {\n                                        if (post.postUniqueCuid == postUniqueCuid) {\n                                            allPosts[pageNumber].splice(index, 1);\n                                            ++found;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', '$location', '$window', function ($rootScope, socketService, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData && Object.keys(userData).length > 0) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: true,\n                            bannerClass: \"alert alert-warning\",\n                            msg: \"You are not registered. Please reload this page\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        this.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.main.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                                $rootScope.back();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/general/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', function ($rootScope, PostService, $timeout) {\n        return {\n            templateUrl: 'views/general/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                $timeout(getSuggestedPosts, 5000);\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('trashPostDir', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            template: ' <a class=\"btn-link btn btn-default btn-sm\" href ng-click=\"trashPost(post.postUniqueCuid)\">Delete</a>',\n            restrict: 'AE',\n            scope: {\n                post: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                }\n            }\n        }\n    }])","angular.module('adminHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('editPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/edit_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', function ($rootScope, UserService, socketService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', function ($q, $log, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}