{"version":3,"sources":["adminHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","logoutService","$document","cfpLoadingBar","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","showDisqus","host","search","refillHighLightText","current","name","queryString","highlightText","highlightThisText","textToHighlight","theElement","$","highlight","html","removeHighLightText","textString","removeHighlight","highLightPost","postObject","highLightReference","authorName","postHeading","postContent","postSummary","postTags","tag","text","removePostHighlights","stateChangeCounter","length","event","toState","toParams","fromState","fromParams","clearBanners","clearToasts","currentState","history","push","$$path","back","prevUrl","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","clientIsRegistered","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastr","clear","toastType","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","getUserData","userData","isRegistered","emit","room","uniqueCuid","errResponse","on","console","log","mainSearchModel","postSearchUniqueCuid","requestedPage","fillSearchBox","performMainSearch","port","newPost","showNewPost","hideNewPost","newPostModel","postHeadingIsLessMin","postContentIsEmpty","postSummaryIsEmpty","postSummaryHasExceededMaximum","checkIfPostHeadingLessMin","postHeadingText","checkIfPostContentIsEmpty","postContentText","checkIfPostSummaryIsEmpty","postSummaryText","checkPostSummaryMaxLength","maxLength","checkEditPostTags","errorPostTags","numberOfTags","submitNewPost","errors","logoutClient","preparePostSummaryContent","posts","post","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","pageNumber","responseMimic","mainSearchResultsPosts","updatePosts","showThePostsOnly","postCount","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","postBackup","goIntoPostEditingMode","goIntoFullPostViewMode","editPostHeadingLessMin","editPostContentIsEmpty","editPostSummaryIsEmpty","editPostSummaryHasExceededMaximum","checkIfEditPostHeadingLessMin","checkIfEditPostContentIsEmpty","checkIfEditPostSummaryIsEmpty","editPostSummaryText","checkEditPostSummaryMaxLength","submitPostUpdate","cancelPostUpdate","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","$broadcast","hotThisWeekArray","done","postUpdate","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('HotController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            //variable to show or hide disqus if window.host contains negusmath\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //this function returns the highlightText to the query string on the location url\n            $scope.refillHighLightText = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.highlightText = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                }\n            };\n\n            $scope.refillHighLightText();\n\n            $scope.highlightThisText = function (textToHighlight) {\n                var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                $(theElement).highlight($scope.highlightText);\n                return theElement.html();\n            };\n\n            $scope.removeHighLightText = function (textString) {\n                $scope.highlightText = '';\n                var theElement = $(\"<div>\" + textString + \"</div>\");\n                $(theElement).removeHighlight();\n                return theElement.html();\n            };\n\n            $scope.highLightPost = function (postObject) {\n                if ($scope.highLightReference()) {\n                    if (postObject.authorName) {\n                        postObject.authorName = $scope.highlightThisText(postObject.authorName);\n                    }\n                    if (postObject.postHeading) {\n                        postObject.postHeading = $scope.highlightThisText(postObject.postHeading);\n                    }\n                    if (postObject.postContent) {\n                        postObject.postContent = $scope.highlightThisText(postObject.postContent);\n                    }\n                    if (postObject.postSummary) {\n                        postObject.postSummary = $scope.highlightThisText(postObject.postSummary);\n                    }\n                    if (postObject.postTags) {\n                        postObject.postTags.forEach(function (tag) {\n                            tag.text = $scope.highlightThisText(tag.text);\n                        })\n                    }\n                }\n            };\n\n            $scope.removePostHighlights = function (postObject) {\n                if (postObject.authorName) {\n                    postObject.authorName = $scope.removeHighLightText(postObject.authorName);\n                }\n                if (postObject.postHeading) {\n                    postObject.postHeading = $scope.removeHighLightText(postObject.postHeading);\n                }\n                if (postObject.postContent) {\n                    postObject.postContent = $scope.removeHighLightText(postObject.postContent);\n                }\n                if (postObject.postSummary) {\n                    postObject.postSummary = $scope.removeHighLightText(postObject.postSummary);\n                }\n                if (postObject.postTags) {\n                    postObject.postTags.forEach(function (tag) {\n                        tag.text = $scope.removeHighLightText(tag.text);\n                    })\n                }\n            };\n\n            //stateChangeCounter counts the stateChanges from the previous search,\n            //when the user goes further, you will need to disable search highlight\n            //also, you can use a timer\n            $scope.stateChangeCounter = 0;\n            $scope.highLightReference = function () {\n                var queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                if (queryString) {\n                    //only highlight when the query string is more than 3 characters\n                    if (queryString.length > 3) {\n                        if ($rootScope.$state.current.name == 'search') {\n                            $scope.stateChangeCounter = 0;\n                            $scope.highlightText = $rootScope.$stateParams.queryString;\n                            return true;\n                        } else if ($scope.stateChangeCounter > 0) {\n                            $scope.stateChangeCounter++;\n                            return false;\n                        } else {\n                            $scope.stateChangeCounter++;\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            };\n\n            //listens for state changes, used to activate active states\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                //clear all banners\n                $scope.clearBanners();\n\n                //clear all toasts\n                $scope.clearToasts();\n            });\n\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$stateChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n\n            //variable to hold the registered state of the client\n            $scope.clientIsRegistered = false;\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n\n            $scope.clearToasts = function () {\n                toastr.clear();\n            };\n\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n\n            //initial requests\n            socketService.getUserData()\n                .success(function (resp) {\n                    $scope.userData = globals.userData(resp.userData);\n                    if ($scope.userData.isRegistered == 'yes') {\n                        $scope.clientIsRegistered = true;\n                    }\n\n                    //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                    socket.emit('joinRoom', {\n                        room: resp.userData.uniqueCuid\n                    });\n\n                    $scope.responseStatusHandler(resp);\n                })\n                .error(function (errResponse) {\n                    $scope.responseStatusHandler(errResponse);\n                });\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            //search functionality\n            $scope.mainSearchModel = {\n                queryString: \"\",\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //put the query string in the search box\n            $scope.fillSearchBox = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                } else {\n                    $scope.mainSearchModel.queryString = '';\n                }\n            };\n\n            $scope.fillSearchBox();\n\n            $scope.performMainSearch = function () {\n                if ($scope.mainSearchModel.queryString.length > 0) {\n                    if ($location.port()) {\n                        $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    } else {\n                        $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    }\n                }\n            };\n            //end of search functionality\n\n            //===============new post controllers===========\n\n            //new post\n            $scope.newPost = false;\n            $scope.showNewPost = function () {\n                $scope.newPost = true;\n            };\n            $scope.hideNewPost = function () {\n                $scope.newPost = false;\n            };\n\n            $scope.newPostModel = {\n                postHeading: \"\",\n                postContent: \"\",\n                postSummary: \"\",\n                postTags: []\n            };\n\n            //these variables hold the state of the forms\n            $scope.postHeadingIsLessMin = true;\n            $scope.postContentIsEmpty = true;\n            $scope.postSummaryIsEmpty = true;\n            $scope.postSummaryHasExceededMaximum = false;\n\n            $scope.checkIfPostHeadingLessMin = function () {\n                var postHeadingText = $scope.newPostModel.postHeading;\n                if (postHeadingText.length < 10) {\n                    $scope.postHeadingIsLessMin = true;\n                }\n                else {\n                    $scope.postHeadingIsLessMin = false;\n                }\n                return $scope.postHeadingIsLessMin\n            };\n\n            $scope.checkIfPostContentIsEmpty = function () {\n                var postContentText = $(\"<div>\" + $scope.newPostModel.postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    $scope.postContentIsEmpty = true;\n                }\n                else {\n                    $scope.postContentIsEmpty = false;\n                }\n                return $scope.postContentIsEmpty\n            };\n\n            $scope.checkIfPostSummaryIsEmpty = function () {\n                var postSummaryText = $(\"<div>\" + $scope.newPostModel.postSummary + \"</div>\").text();\n                if (postSummaryText.length == 0) {\n                    $scope.postSummaryIsEmpty = true;\n                }\n                else {\n                    $scope.postSummaryIsEmpty = false;\n                }\n                return $scope.postSummaryIsEmpty\n            };\n\n            $scope.checkPostSummaryMaxLength = function (maxLength) {\n                var postSummaryText = $(\"<div>\" + $scope.newPostModel.postSummary + \"</div>\").text();\n                if (postSummaryText.length > maxLength) {\n                    $scope.postSummaryHasExceededMaximum = true;\n                } else {\n                    $scope.postSummaryHasExceededMaximum = false;\n                }\n                return $scope.postSummaryHasExceededMaximum\n            };\n\n            //returns true if tags pass validation\n            $scope.checkEditPostTags = function () {\n                var errorPostTags = 0;\n                var numberOfTags = 0;\n\n                $scope.newPostModel.postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (errorPostTags == 0) {\n                        if (tag.text.length < 3 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5 && errorPostTags == 0) {\n                    errorPostTags++;\n                    $scope.showToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n\n                if (errorPostTags == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.submitNewPost = function () {\n                var errors = 0;\n                var numberOfTags = 0;\n\n                //validate post heading\n                if ($scope.checkIfPostHeadingLessMin() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The minimum required length of the heading is 10 characters');\n                }\n\n                //validate post content\n                if ($scope.checkIfPostContentIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'Please add some text to the post first');\n                }\n\n                //validate post summary\n                if ($scope.checkIfPostSummaryIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot be empty');\n                }\n\n                if ($scope.checkPostSummaryMaxLength() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n\n                //validate tags\n                //note that the edit post tags returns true if validation succeeded\n                //it also shows toasts depending on whats missing\n                if (!$scope.checkEditPostTags() && errors == 0) {\n                    errors++;\n                }\n\n                if (errors == 0) {\n                    var newPost = {\n                        postHeading: $scope.newPostModel.postHeading,\n                        postContent: $scope.newPostModel.postContent,\n                        postSummary: $scope.newPostModel.postSummary,\n                        postTags: $scope.newPostModel.postTags\n                    };\n                    PostService.submitNewPost(newPost).\n                        success(function (resp) {\n                            $scope.hideNewPost();\n                            $scope.responseStatusHandler(resp);\n                            $scope.newPostModel.postHeading = \"\";\n                            $scope.newPostModel.postContent = \"\";\n                            $scope.newPostModel.postSummary = \"\";\n                            $scope.newPostModel.postTags = [];\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            //=====================end of submitting post\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postCount) {\n                                $scope.postsCount = resp.postsCount;\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postCount) {\n                    $scope.postCount = data.postCount;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'home') {\n                    getPagePosts();\n                }\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //highlight the post if needed\n                            $scope.highLightPost($scope.post);\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //=============editing post====================\n\n            //variable that holds the editing or show state in the full-post view.\n            $scope.editingMode = false;\n\n            //make copy of post, useful when the user clicks cancel\n            $scope.postBackup = $scope.post;\n\n            $scope.goIntoPostEditingMode = function () {\n                //remove all the text highlights if available\n                $scope.removePostHighlights($scope.post);\n\n                //make copy of post, useful when the user clicks cancel\n                $scope.postBackup = $scope.post;\n                $scope.editingMode = true;\n            };\n\n            $scope.goIntoFullPostViewMode = function () {\n                $scope.editingMode = false;\n            };\n\n            $scope.editPostHeadingLessMin = false;\n            $scope.editPostContentIsEmpty = true;\n            $scope.editPostSummaryIsEmpty = true;\n            $scope.editPostSummaryHasExceededMaximum = false;\n\n            $scope.checkIfEditPostHeadingLessMin = function () {\n                if ($scope.post.postHeading) {\n                    var postHeadingText = $scope.post.postHeading;\n                    if (postHeadingText.length < 10) {\n                        $scope.editPostHeadingLessMin = true;\n                    }\n                    else {\n                        $scope.editPostHeadingLessMin = false;\n                    }\n                    return $scope.editPostHeadingLessMin\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkIfEditPostContentIsEmpty = function () {\n                if ($scope.post.postContent) {\n                    var postContentText = $(\"<div>\" + $scope.post.postContent + \"</div>\").text();\n                    if (postContentText.length == 0) {\n                        $scope.editPostContentIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostContentIsEmpty = false;\n                    }\n                    return $scope.editPostContentIsEmpty\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkIfEditPostSummaryIsEmpty = function () {\n                if ($scope.post.postSummary) {\n                    var editPostSummaryText = $(\"<div>\" + $scope.post.postSummary + \"</div>\").text();\n                    if (editPostSummaryText.length == 0) {\n                        $scope.editPostSummaryIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostSummaryIsEmpty = false;\n                    }\n                    return $scope.editPostSummaryIsEmpty\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkEditPostSummaryMaxLength = function (maxLength) {\n                if ($scope.post.postSummary) {\n                    var editPostSummaryText = $(\"<div>\" + $scope.post.postSummary + \"</div>\").text();\n                    if (editPostSummaryText.length > maxLength) {\n                        $scope.editPostSummaryHasExceededMaximum = true;\n                    } else {\n                        $scope.editPostSummaryHasExceededMaximum = false;\n                    }\n                    return $scope.editPostSummaryHasExceededMaximum\n                } else {\n                    return true;\n                }\n            };\n\n            //returns true if tags pass validation\n            $scope.checkEditPostTags = function () {\n                var errorPostTags = 0;\n                var numberOfTags = 0;\n\n                $scope.post.postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (errorPostTags == 0) {\n                        if (tag.text.length < 3 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Minimum allowed length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5 && errorPostTags == 0) {\n                    errorPostTags++;\n                    $scope.showToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n\n                if (errorPostTags == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.submitPostUpdate = function () {\n                var errors = 0;\n\n                //validate post heading\n                if ($scope.checkIfEditPostHeadingLessMin() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The minimum required length of the heading is 10 characters');\n                }\n\n                //validatePostContent\n                if ($scope.checkIfEditPostContentIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'Please add some text to the post first');\n                }\n\n                //validate postSummary\n                if ($scope.checkIfEditPostSummaryIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot be empty');\n                }\n\n                if ($scope.checkEditPostSummaryMaxLength() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n\n                //validate tags\n                //note that the edit post tags returns true if validation succeeded\n                //it also shows toasts depending on whats missing\n                if (!$scope.checkEditPostTags() && errors == 0) {\n                    errors++;\n                }\n\n                if (errors == 0) {\n                    PostService.submitPostUpdate($scope.post)\n                        .success(function (resp) {\n                            $scope.goIntoFullPostViewMode();\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            $scope.cancelPostUpdate = function () {\n                $scope.post = $scope.postBackup;\n                $scope.goIntoFullPostViewMode();\n                $scope.showToast('success', 'Update cancelled');\n            };\n\n            //end of editing post functions================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    if ($scope.currentState == 'post') {\n                        getFullPost();\n                    }\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            $scope.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.showMainSearchResultsOnly();\n                            updateTimeAgo();\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.mainSearchResultsPosts.forEach(function (post) {\n                                $scope.highLightPost(post);\n                            });\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'search') {\n                    getMainSearchResults();\n                }\n            });\n\n            $log.info('SearchController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}