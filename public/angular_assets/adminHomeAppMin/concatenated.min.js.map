{"version":3,"sources":["adminHomeApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/userService.js","filters/filters.js","filters/postFormFilters.js","adirectives/home/bannerDir.js","adirectives/home/componentDir.js","adirectives/home/newPostDir.js","adirectives/home/postMessages.js","adirectives/home/postViewDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","error","errResp","responseStatusHandler","$on","logoutService","$document","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","showDisqus","host","search","duration","goToTop","someElement","element","document","getElementById","scrollToElement","currentTime","moment","format","updateCurrentTime","on","console","log","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearBanners","clearToasts","isEditingPost","$broadcast","showLoadingBanner","showHideLoadingBanner","hideLoadingBanner","showThePager","hideThePager","showSuggested","showHideSuggestedPosts","hideSuggested","changePagingTotalCount","newTotalCount","getFullPost","getPostFromServer","postIndex","calcObjectLength","thePost","post","updatePost","changeDocumentTitle","postHeading","showThePostOnly","postIsLoaded","showEditPost","showSuggestedPostsOnly","getCurrentPost","data","current","getFullEditPostModel","getCurrentEditPostModelFromServer","editPostModel","updateCurrentEditPostModel","showTheEditPostOnly","getCurrentEditPostModel","cancelPostUpdate","showToast","location","href","port","postPath","validateEditForm","notify","errors","postContent","postSummary","postTags","submitPostUpdate","getMainSearchResults","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","pageNumber","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","banner","bannerClass","msg","responseMimic2","showMainSearchResults","getCurrentMainSearchResults","suggestedPosts","showSuggestedPosts","checkIfPostsSearchResultsIsEmpty","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","addAdminPrivileges","userUniqueCuid","removeAdminPrivileges","approveUser","banUser","unBanUser","factory","obj","len","prop","hasOwnProperty","documentTitle","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","hotThisWeekArray","info","done","posts","postsCount","mainSearchResultsPostsCount","getCurrentPosts","getCurrentPostsCount","getPostsFromServer","updatePosts","updatePostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","sendContactUs","contactUsModel","logoutClient","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","makeResp","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","status","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","authorName","removePostTagsHighlight","makeBanner","show","redirect","redirectPage","type","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","directive","restrict","link","$element","$attrs","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","bool","removeClass","isLoadingTrue","isLoadingFalse","template","defaultTitle","$watch","fillSearchBox","performMainSearch","getPagePosts","responseMimic","showThePostsOnly","showPaging","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","currentPage","goToPage","go","showNewPost","hideNewPost","newPostModel","validateForm","scope","showSpan","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //loading banner\n            $scope.showLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(true);\n                }\n            };\n\n            $scope.hideLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(false);\n                }\n            };\n\n            //pager\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            //suggestedPosts\n            $scope.showSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(true);\n                }\n            };\n\n            $scope.hideSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(false);\n                }\n            };\n\n            //total posts count\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.post = PostService.getCurrentPost();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            $scope.postIsLoaded = false;\n\n            function getFullPost() {\n                $scope.showLoadingBanner();\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.post = PostService.updatePost(resp.thePost);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = PostService.updatePost({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = PostService.updatePost({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = PostService.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'home.post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ])\n    .controller('EditPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showTheEditPostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            function getFullEditPostModel() {\n                $scope.showLoadingBanner();\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showTheEditPostOnly();\n                            $scope.hideThePager();\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = false;\n                $scope.showSuggested();\n            };\n\n            function getMainSearchResults() {\n                $scope.showLoadingBanner();\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                        $scope.showMainSearchResults = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'UserService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, UserService, $document) {\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //user manipulation functions\n            $scope.addAdminPrivileges = function (userUniqueCuid) {\n                UserService.addAdminPrivileges(userUniqueCuid)\n                    .success(function (resp) {\n                        $rootScope.$broadcast('userChanges');\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            };\n\n            $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                UserService.removeAdminPrivileges(userUniqueCuid)\n                    .success(function (resp) {\n                        $rootScope.$broadcast('userChanges');\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            };\n\n            $scope.approveUser = function (userUniqueCuid) {\n                UserService.approveUser(userUniqueCuid)\n                    .success(function (resp) {\n                        $rootScope.$broadcast('userChanges');\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            };\n\n            $scope.banUser = function (userUniqueCuid) {\n                UserService.banUser(userUniqueCuid)\n                    .success(function (resp) {\n                        $rootScope.$broadcast('userChanges');\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            };\n\n            $scope.unBanUser = function (userUniqueCuid) {\n                UserService.unBanUser(userUniqueCuid)\n                    .success(function (resp) {\n                        $rootScope.$broadcast('userChanges');\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePosts')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var posts = [];\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    if (postsArray == []) {\n                        posts = [];\n                    } else {\n                        posts = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts;\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    posts.unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post = $filter('preparePosts')(newPost, null);\n                    }\n                    return post;\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePosts')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", ['$filter', function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", ['$filter', function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading, broadcast) {\n            console.log(\"validatePostHeading\");\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading) {\n            console.log(\"postHeadingMessages\");\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent, broadcast) {\n            console.log(\"validatePostContent\");\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent) {\n            console.log(\"postContentMessages\");\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary, broadcast) {\n            console.log(\"validatePostSummary\");\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary) {\n            console.log(\"postSummaryMessages\");\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags, broadcast) {\n            console.log(\"validatePostTags\");\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags) {\n            console.log(\"postTagsMessages\");\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showThePager();\n                globals.defaultDocumentTitle();\n\n                $scope.posts = PostService.getCurrentPosts();\n                $scope.postsCount = PostService.getCurrentPostsCount();\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                //variable that determines whether to show posts/suggested posts or not\n                $scope.mainSearchResultsPosts = false;\n\n                $scope.showThePostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = true;\n                    $scope.hideSuggested();\n                };\n\n                $scope.showSuggestedPostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = false;\n                    $scope.showSuggested();\n                };\n\n                function getPagePosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getPostsFromServer($rootScope.$stateParams.pageNumber || 1)\n                        .success(function (resp) {\n                            //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                            //used if the user is accessing a page that is beyond the number of posts\n                            if (resp.postsArray.length == 0) {\n\n                                //empty the postsArray\n                                $scope.posts = PostService.updatePosts([]);\n\n                                var responseMimic = {\n                                    banner: true,\n                                    bannerClass: 'alert alert-dismissible alert-success',\n                                    msg: \"No more posts to show\"\n                                };\n                                $rootScope.responseStatusHandler(responseMimic);\n                                $scope.mainSearchResultsPosts = false;\n                                $scope.showSuggestedPostsOnly();\n                                $scope.goToTop();\n                            } else {\n                                $scope.posts = PostService.updatePosts(resp.postsArray);\n                                $scope.showThePostsOnly();\n                                if (resp.postsCount) {\n                                    $scope.postsCount = resp.postsCount;\n                                    $scope.changePagingTotalCount($scope.postsCount);\n                                }\n                                $scope.showThePager();\n                            }\n                        })\n                        .error(function (errResp) {\n                            $rootScope.responseStatusHandler(errResp);\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n                            $scope.mainSearchResultsPosts = false;\n                            $scope.showSuggestedPostsOnly();\n                        });\n                }\n\n                getPagePosts();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    //newPost goes to page 1, so update only if the page is 1\n                    if ($rootScope.$stateParams.pageNumber == 1) {\n                        $scope.posts = PostService.addNewToPosts(data.post);\n                    }\n                    if (data.postsCount) {\n                        $scope.postsCount = data.postsCount;\n                        $scope.changePagingTotalCount($scope.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                $scope.showSuggestedPosts = false;\n                $rootScope.showHideSuggestedPosts = function (bool) {\n                    if (bool) {\n                        $scope.showSuggestedPosts = true;\n                        //get new suggested posts\n                        getSuggestedPosts();\n                    } else {\n                        $scope.showSuggestedPosts = false;\n                    }\n                };\n\n                function getSuggestedPosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $scope.hideLoadingBanner();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $scope.showSuggestedPosts = false;\n                                $scope.goToTop();\n                                $scope.hideLoadingBanner();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.goToTop();\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $scope.showSuggestedPosts = false;\n                            $rootScope.responseStatusHandler(errResp);\n                            $scope.hideLoadingBanner();\n                        });\n\n                    //whatever happens, hide the pager\n                    $scope.hideThePager();\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/admin/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    console.log($scope.currentPage);\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                    $scope.goToTop();\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('mainFooter', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPost = false;\n                $scope.showNewPost = function () {\n                    $scope.newPost = true;\n                };\n                $rootScope.showNewPost = function () {\n                    $scope.showNewPost();\n                };\n                $scope.hideNewPost = function () {\n                    $scope.newPost = false;\n                };\n                $rootScope.hideNewPost = function () {\n                    $scope.hideNewPost();\n                };\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $scope.hideNewPost();\n                                $rootScope.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}