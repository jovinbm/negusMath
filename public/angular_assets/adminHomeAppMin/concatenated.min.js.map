{"version":3,"sources":["adminHomeApp.js","filters/filters.js","filters/postFormFilters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/fullPostDir.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStreamDir.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","$filter","createdAt","moment","format","postIndex","post","posts","makeResp","postSummary","theElement","$","imgElement","length","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","postContent","forEach","index","textString","theElementString","highlight","checkSearchState","current","name","status","queryString","stateHistory","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","postTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","postHeading","authorName","removePostTagsHighlight","$q","$log","$window","resp","makeBanner","show","bannerClass","msg","redirect","location","href","redirectPage","notify","type","showToast","banner","$broadcast","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","errors","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","controller","$scope","HotService","getHotThisWeek","getHotThisWeekFromServer","success","hotThisWeek","updateHotThisWeek","error","errResp","main","responseStatusHandler","$on","$interval","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","clearBanners","updateCurrentTime","history","event","toState","toParams","fromState","fromParams","push","$$path","temp","back","prevUrl","splice","path","clearToasts","isEditingPost","PostService","fN","getFullEditPostModel","getCurrentEditPostModelFromServer","calcObjectLength","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","getCurrentEditPostModel","cancelPostUpdate","port","validateEditForm","submitPostUpdate","getMainSearchResults","pageNumber","mainSearchModel","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","responseMimic2","getAllMainSearchResults","showMore","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","factory","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","logoutClient","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","directive","scope","restrict","link","$element","$attrs","getAccountDetails","theUser","accountStatusBanner","determineAccountStatus","checkAccountStatus","emailIsConfirmed","isApproved","showResendEmail","isBanned","checkAccount","err","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","newPostModel","postUploads","validateForm","console","log","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","getCurrentPostsCount","newValue","oldValue","currentPage","goToPage","go","getCurrentMainSearchResultsCount","template","showSpan","getPagePosts","getFromServer","postsCount","defaultTitle","logoutService","validateContactUs","email","message","formStatus","fillSearchBox","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.newPost', {\n                url: '/newPost',\n                templateUrl: 'views/admin/partials/views/new_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService', 'fN',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService, fN) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', '$location', '$window', function ($rootScope, socketService, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', 'fN', function ($q, $log, $rootScope, globals, PostService, fN) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.post = PostService.getCurrentPost($rootScope.$stateParams.postIndex);\n                $rootScope.main.goToTop();\n\n                $scope.postIsLoaded = false;\n\n                function getFullPost() {\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (fN.calcObjectLength(resp.thePost) != 0) {\n                                $scope.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.post = PostService.updatePost({});\n                            }\n\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.post = PostService.updatePost({});\n                        });\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    //only update the post variable if the user is not editing the current post\n                    if (!$rootScope.isEditingPost) {\n                        if ($rootScope.$state.current.name == 'home.post') {\n                            getFullPost();\n                        }\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/general/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([]);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([]);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.newPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.newPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.newPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', function ($rootScope, UserService, socketService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', function ($q, $log, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}