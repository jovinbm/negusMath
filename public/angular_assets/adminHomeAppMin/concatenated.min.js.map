{"version":3,"sources":["adminHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","$rootScope","socket","mainService","socketService","globals","$modal","PostService","$stateParams","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","logoutService","$document","$state","cfpLoadingBar","event","toState","toParams","fromState","fromParams","currentState","name","history","push","$$path","back","prevUrl","length","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","document","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","clientIsRegistered","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","clearBanners","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","status","isLoadingTrue","isLoadingFalse","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","newPost","showNewPost","hideNewPost","getUserData","userData","isRegistered","emit","room","uniqueCuid","errResponse","on","console","log","newPostModel","postHeading","postContent","postSummary","postSummaryIsEmpty","postSummaryHasExceededMaximum","checkIfPostSummaryIsEmpty","checkPostSummaryMaxLength","maxLength","submitNewPost","logoutClient","preparePostSummaryContent","posts","post","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","pageNumber","responseMimic","showPosts","updatePosts","showThePostsOnly","postCount","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","host","editingMode","postBackup","goIntoPostEditingMode","goIntoFullPostViewMode","editPostSummaryIsEmpty","editPostSummaryHasExceededMaximum","checkIfEditPostSummaryIsEmpty","checkEditPostSummaryMaxLength","submitPostUpdate","cancelPostUpdate","factory","$broadcast","hotThisWeekArray","done","page","postUpdate","port","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus'\n])\n    .run(function ($templateCache, $http) {\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider.otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', '$state', '$stateParams', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document, $state, $stateParams, cfpLoadingBar) {\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$routeChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n\n            //variable to hold the registered state of the client\n            $scope.clientIsRegistered = false;\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            //clear banners when the state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.clearBanners();\n            });\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n\n            //====================element controllers==========holding states for hidden and visible elements\n            //new post\n            $scope.newPost = false;\n            $scope.showNewPost = function () {\n                $scope.newPost = true;\n            };\n            $scope.hideNewPost = function () {\n                $scope.newPost = false;\n            };\n            //end of new post\n            //====================end of element controllers\n\n            //initial requests\n            socketService.getUserData()\n                .success(function (resp) {\n                    $scope.userData = globals.userData(resp.userData);\n                    if ($scope.userData.isRegistered == 'yes') {\n                        $scope.clientIsRegistered = true;\n                    }\n\n                    //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                    socket.emit('joinRoom', {\n                        room: resp.userData.uniqueCuid\n                    });\n\n                    $scope.responseStatusHandler(resp);\n                })\n                .error(function (errResponse) {\n                    $scope.responseStatusHandler(errResponse);\n                });\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            //===============new post controllers===========\n            $scope.newPostModel = {\n                postHeading: \"\",\n                postContent: \"\",\n                postSummary: \"\"\n            };\n\n            $scope.postSummaryIsEmpty = true;\n            $scope.postSummaryHasExceededMaximum = false;\n\n            $scope.checkIfPostSummaryIsEmpty = function () {\n                if ($scope.newPostModel.postSummary.length == 0) {\n                    $scope.postSummaryIsEmpty = true;\n                }\n                else {\n                    $scope.postSummaryIsEmpty = false;\n                }\n                return $scope.postSummaryIsEmpty\n            };\n\n            $scope.checkPostSummaryMaxLength = function (maxLength) {\n                if ($scope.newPostModel.postSummary.length > maxLength) {\n                    $scope.postSummaryHasExceededMaximum = true;\n                } else {\n                    $scope.postSummaryHasExceededMaximum = false;\n                }\n                return $scope.postSummaryHasExceededMaximum\n            };\n\n            $scope.submitNewPost = function () {\n                if ($scope.newPostModel.postContent.length == 0) {\n                    $scope.showToast('warning', 'Please add some content to the post first');\n                } else if ($scope.newPostModel.postSummary.length > 1600) {\n                    $scope.showToast('warning', 'The post summary cannot exceed 1600 characters');\n                } else {\n                    var newPost = {\n                        postHeading: $scope.newPostModel.postHeading,\n                        postContent: $scope.newPostModel.postContent,\n                        postSummary: $scope.newPostModel.postSummary\n                    };\n                    PostService.submitNewPost(newPost).\n                        success(function (resp) {\n                            $scope.hideNewPost();\n                            $scope.responseStatusHandler(resp);\n                            $scope.newPostModel.postHeading = \"\";\n                            $scope.newPostModel.postContent = \"\";\n                            $scope.newPostModel.postSummary = \"\";\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            //=====================end of submitting post\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                PostService.getPostsFromServer($stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.showPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postCount) {\n                                $scope.postsCount = resp.postsCount;\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.showPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postCount) {\n                    $scope.postCount = data.postCount;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                getPagePosts();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n                            $scope.postIsLoaded = true;\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                $scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //=============editing post====================\n\n            //variable that holds the editing or show state in the full-post view.\n            $scope.editingMode = false;\n\n            //make copy of post, useful when the user clicks cancel\n            $scope.postBackup = $scope.post;\n\n            $scope.goIntoPostEditingMode = function () {\n                //make copy of post, useful when the user clicks cancel\n                $scope.postBackup = $scope.post;\n                $scope.editingMode = true;\n            };\n\n            $scope.goIntoFullPostViewMode = function () {\n                $scope.editingMode = false;\n            };\n\n            $scope.editPostSummaryIsEmpty = true;\n            $scope.editPostSummaryHasExceededMaximum = false;\n\n            $scope.checkIfEditPostSummaryIsEmpty = function () {\n                if ($scope.post.postSummary) {\n                    if ($scope.post.postSummary.length == 0) {\n                        $scope.editPostSummaryIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostSummaryIsEmpty = false;\n                    }\n                    return $scope.editPostSummaryIsEmpty\n                } else {\n                    return true;\n                }\n\n            };\n\n            $scope.checkEditPostSummaryMaxLength = function (maxLength) {\n                if ($scope.post.postSummary) {\n                    if ($scope.post.postSummary.length > maxLength) {\n                        $scope.editPostSummaryHasExceededMaximum = true;\n                    } else {\n                        $scope.editPostSummaryHasExceededMaximum = false;\n                    }\n                    return $scope.editPostSummaryHasExceededMaximum\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.post.postContent.length == 0) {\n                    $scope.showToast('warning', 'Please add some content to the post first');\n                } else if ($scope.post.postSummary.length > 1600) {\n                    $scope.showToast('warning', 'The post summary cannot exceed 1600 characters');\n                } else {\n                    PostService.submitPostUpdate($scope.post)\n                        .success(function (resp) {\n                            $scope.goIntoFullPostViewMode();\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            $scope.cancelPostUpdate = function () {\n                $scope.post = $scope.postBackup;\n                $scope.goIntoFullPostViewMode();\n                $scope.showToast('success', 'Update cancelled');\n            };\n\n            //end of editing post functions================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}