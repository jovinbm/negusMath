{"version":3,"sources":["adminHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","$rootScope","socket","mainService","socketService","globals","$modal","PostService","$stateParams","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","logoutService","$document","$state","event","toState","toParams","fromState","fromParams","currentState","name","history","push","$$path","back","prevUrl","length","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","document","getElementById","scrollToElement","goToUniversalBanner","clientIsRegistered","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","clearBanners","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingTrue","isLoadingFalse","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","newPost","showNewPost","hideNewPost","getUserData","userData","isRegistered","emit","room","uniqueCuid","errResponse","on","console","log","newPostModel","postHeading","postContent","postSummary","submitNewPost","logoutClient","getPagePosts","getPostsFromServer","pageNumber","posts","updatePosts","postsArray","postsCount","responseMimic","post","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","postCount","getFullPost","getPostFromServer","postIndex","thePost","addPostUrl","postIsLoaded","postUrl","host","checkIfPostIsEmpty","editingMode","postBackup","goIntoPostEditingMode","goIntoFullPostViewMode","submitPostUpdate","cancelPostUpdate","factory","$broadcast","hotThisWeekArray","done","page","postUpdate","port","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus'\n])\n    .run(function ($templateCache, $http) {\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider.otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', '$state', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document, $state, $stateParams) {\n\n            //listens for state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$routeChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //variable to hold the registered state of the client\n            $scope.clientIsRegistered = false;\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            //clear banners when the state changes\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.clearBanners();\n            });\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n\n            //====================element controllers==========holding states for hidden and visible elements\n            //new post\n            $scope.newPost = false;\n            $scope.showNewPost = function () {\n                $scope.newPost = true;\n            };\n            $scope.hideNewPost = function () {\n                $scope.newPost = false;\n            };\n            //end of new post\n            //====================end of element controllers\n\n            //initial requests\n            socketService.getUserData()\n                .success(function (resp) {\n                    $scope.userData = globals.userData(resp.userData);\n                    if ($scope.userData.isRegistered == 'yes') {\n                        $scope.clientIsRegistered = true;\n                    }\n\n                    //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                    socket.emit('joinRoom', {\n                        room: resp.userData.uniqueCuid\n                    });\n\n                    $scope.responseStatusHandler(resp);\n                })\n                .error(function (errResponse) {\n                    $scope.responseStatusHandler(errResponse);\n                });\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            //===============new post controllers===========\n            $scope.newPostModel = {\n                postHeading: \"\",\n                postContent: \"\",\n                postSummary: \"\"\n            };\n\n            $scope.submitNewPost = function () {\n                if ($scope.newPostModel.postContent.length == 0) {\n                    $scope.showToast('warning', 'Please add some content to the post first');\n                } else {\n                    var newPost = {\n                        postHeading: $scope.newPostModel.postHeading,\n                        postContent: $scope.newPostModel.postContent,\n                        postSummary: $scope.newPostModel.postSummary\n                    };\n                    PostService.submitNewPost(newPost).\n                        success(function (resp) {\n                            $scope.hideNewPost();\n                            $scope.responseStatusHandler(resp);\n                            $scope.newPostModel.postHeading = \"\";\n                            $scope.newPostModel.postContent = \"\";\n                            $scope.newPostModel.postSummary = \"\";\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            function getPagePosts() {\n                PostService.getPostsFromServer($stateParams.pageNumber)\n                    .success(function (resp) {\n                        $scope.posts = PostService.updatePosts(resp.postsArray);\n                        updateTimeAgo();\n                        $scope.postsCount = resp.postsCount;\n\n                        //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if ($scope.posts.length == 0) {\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.goToUniversalBanner();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                }\n                $scope.postCount = data.postCount;\n            });\n\n            $rootScope.$on('reconnect', function () {\n                getPagePosts();\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.postIsLoaded = false;\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            $scope.checkIfPostIsEmpty = function () {\n                return $scope.calcObjectLength($scope.post) == 0\n            };\n\n            function getFullPost() {\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n                            updateTimeAgo();\n                            addPostUrl();\n                            $scope.postIsLoaded = true;\n                        } else {\n                            $scope.goToUniversalBanner();\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                //post date/time it was ordered e.g. Sun, Mar 17..\n                $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                $scope.post.postUrl = 'http://' + $location.host() + '/adminHome.html#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //=============editing post====================\n\n            //variable that holds the editing or show state in the full-post view.\n            $scope.editingMode = false;\n\n            //make copy of post, useful when the user clicks cancel\n            $scope.postBackup = $scope.post;\n\n            $scope.goIntoPostEditingMode = function () {\n                //make copy of post, useful when the user clicks cancel\n                $scope.postBackup = $scope.post;\n                $scope.editingMode = true;\n            };\n\n            $scope.goIntoFullPostViewMode = function () {\n                $scope.editingMode = false;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.post.postContent.length == 0) {\n                    $scope.showToast('warning', 'Please add some content to the post first');\n                } else {\n                    PostService.submitPostUpdate($scope.post)\n                        .success(function (resp) {\n                            $scope.goIntoFullPostViewMode();\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            $scope.cancelPostUpdate = function () {\n                $scope.post = $scope.postBackup;\n                $scope.goIntoFullPostViewMode();\n                $scope.showToast('success', 'Update cancelled');\n            };\n\n            //end of editing post functions================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    getFullPost();\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}