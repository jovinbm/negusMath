{"version":3,"sources":["adminHomeApp.js","adirectives/bannerDir.js","adirectives/componentDir.js","adirectives/newPostDir.js","adirectives/postMessages.js","adirectives/postViewDir.js","filters/filters.js","filters/postFormFilters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","restrict","link","$scope","$element","$attrs","universalBanner","show","bannerClass","msg","$on","event","banner","newPostBanner","showToast","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","resp","status","isLoadingTrue","isLoadingFalse","globals","template","defaultTitle","getDocumentTitle","$watch","$window","$location","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","current","name","stateHistory","length","hasOwnProperty","performMainSearch","location","href","port","host","logoutService","logoutClient","responseStatusHandler","errResponse","PostService","getSuggestedPosts","showLoadingBanner","getSuggestedPostsFromServer","postsArray","suggestedPosts","updateSuggestedPosts","hideLoadingBanner","showSuggestedPosts","goToTop","errResp","hideThePager","showHideSuggestedPosts","showPaging","showThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","pageNumber","toState","toParams","fromState","fromParams","goToPage","go","$filter","newPost","showNewPost","hideNewPost","newPostModel","postHeading","postContent","postSummary","postTags","validateForm","notify","console","log","errors","submitNewPost","scope","showSpan","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","moment","format","post","posts","addUrl","postIndex","postUrl","forEach","index","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","textString","theElementString","highlight","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","prepare","timeAgo","postDate","authorName","removePostTagsHighlight","$q","$log","$interval","makeBanner","redirect","redirectPage","type","$broadcast","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","socket","mainService","socketService","$modal","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","$document","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","showDisqus","search","duration","someElement","element","document","getElementById","scrollToElement","currentTime","updateCurrentTime","on","history","push","$$path","temp","back","prevUrl","splice","path","clearBanners","isEditingPost","showSuggested","hideSuggested","getPagePosts","getPostsFromServer","updatePosts","responseMimic","mainSearchResultsPosts","showSuggestedPostsOnly","showThePostsOnly","postsCount","defaultDocumentTitle","getCurrentPosts","getCurrentPostsCount","data","addNewToPosts","getFullPost","getPostFromServer","calcObjectLength","thePost","updatePost","changeDocumentTitle","showThePostOnly","postIsLoaded","showEditPost","getCurrentPost","getFullEditPostModel","getCurrentEditPostModelFromServer","editPostModel","updateCurrentEditPostModel","showTheEditPostOnly","getCurrentEditPostModel","cancelPostUpdate","validateEditForm","submitPostUpdate","getMainSearchResults","mainSearch","results","totalResults","theResult","updateMainSearchResults","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","getCurrentMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","obj","len","prop","documentTitle","newDocumentTitle","hotThisWeekArray","info","done","mainSearchResultsPostsCount","updatePostsCount","newCount","makePost","theNewPost","tempPost","unshift","searchObject","resultsArray","suggestedPostsArray","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home/\", '/home/1')\n            .when(\"/post\", '/home/1')\n            .when(\"/post/\", '/home/1')\n            .when(\"/editPost\", '/home/1')\n            .when(\"/editPost/\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .when(\"/search/\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = false;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                $scope.showSuggestedPosts = false;\n                $rootScope.showHideSuggestedPosts = function (bool) {\n                    if (bool) {\n                        $scope.showSuggestedPosts = true;\n                        //get new suggested posts\n                        getSuggestedPosts();\n                    } else {\n                        $scope.showSuggestedPosts = false;\n                    }\n                };\n\n                function getSuggestedPosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $scope.hideLoadingBanner();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $scope.showSuggestedPosts = false;\n                                $scope.goToTop();\n                                $scope.hideLoadingBanner();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.goToTop();\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $scope.showSuggestedPosts = false;\n                            $rootScope.responseStatusHandler(errResp);\n                            $scope.hideLoadingBanner();\n                        });\n\n                    //whatever happens, hide the pager\n                    $scope.hideThePager();\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/admin/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        $scope.pagingTotalCount = 1\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                    $scope.goToTop();\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPost = false;\n                $scope.showNewPost = function () {\n                    $scope.newPost = true;\n                };\n                $rootScope.showNewPost = function () {\n                    $scope.showNewPost();\n                };\n                $scope.hideNewPost = function () {\n                    $scope.newPost = false;\n                };\n                $rootScope.hideNewPost = function () {\n                    $scope.hideNewPost();\n                };\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $scope.hideNewPost();\n                                $rootScope.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"AddPostUrl\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (post, posts) {\n            function addUrl(post) {\n                if (post.postIndex) {\n                    post.postUrl = 'http://www.negusmath.com/#!/post/' + post.postIndex;\n                }\n                return post;\n            }\n\n            if (post) {\n                return addUrl(post);\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = addUrl(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getPostUrl\", ['$filter', function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postUrl = $filter('getPostUrl')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postUrl = $filter('getPostUrl')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);\n\n\n","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading, broadcast) {\n            console.log(\"validatePostHeading\");\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading) {\n            console.log(\"postHeadingMessages\");\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent, broadcast) {\n            console.log(\"validatePostContent\");\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent) {\n            console.log(\"postContentMessages\");\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary, broadcast) {\n            console.log(\"validatePostSummary\");\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary) {\n            console.log(\"postSummaryMessages\");\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags, broadcast) {\n            console.log(\"validatePostTags\");\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags) {\n            console.log(\"postTagsMessages\");\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.clientIsRegistered = $scope.userData.isRegistered == 'yes';\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //loading banner\n            $scope.showLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(true);\n                }\n            };\n\n            $scope.hideLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(false);\n                }\n            };\n\n            //pager\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            //suggestedPosts\n            $scope.showSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(true);\n                }\n            };\n\n            $scope.hideSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(false);\n                }\n            };\n\n            //total posts count\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            $scope.showThePager();\n            globals.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n            $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.mainSearchResultsPosts = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggested();\n            };\n\n            function getPagePosts() {\n                $scope.showLoadingBanner();\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            $scope.showThePager();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = PostService.updatePosts([]);\n                        $scope.mainSearchResultsPosts = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getPagePosts();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts = PostService.addNewToPosts(data.post);\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home') {\n                    getPagePosts();\n                }\n            });\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.post = PostService.getCurrentPost();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            $scope.postIsLoaded = false;\n\n            function getFullPost() {\n                $scope.showLoadingBanner();\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.post = PostService.updatePost(resp.thePost);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = PostService.updatePost({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = PostService.updatePost({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = PostService.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ])\n    .controller('EditPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showTheEditPostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            function getFullEditPostModel() {\n                $scope.showLoadingBanner();\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showTheEditPostOnly();\n                            $scope.hideThePager();\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/post/\" + $scope.editPostModel.postIndex;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + \"/#!/post/\" + $scope.editPostModel.postIndex;\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/post/\" + $scope.editPostModel.postIndex;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + \"/#!/post/\" + $scope.editPostModel.postIndex;\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = false;\n                $scope.showSuggested();\n            };\n\n            function getMainSearchResults() {\n                $scope.showLoadingBanner();\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                        $scope.showMainSearchResults = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            var universalBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var registrationBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var newPostBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePosts')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var posts = [];\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    if (postsArray == []) {\n                        posts = [];\n                    } else {\n                        posts = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts;\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    posts.unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post = $filter('preparePosts')(newPost, null);\n                    }\n                    return post;\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = newPost;\n                    }\n                    return editPostModel;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePosts')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}