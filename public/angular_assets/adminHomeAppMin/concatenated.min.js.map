{"version":3,"sources":["adminHomeApp.js","filters/filters.js","filters/postFormFilters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/fullPostDir.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStreamDir.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/trashPostDir.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","Utils","keys","Object","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","$filter","createdAt","moment","format","postIndex","post","posts","makeResp","postSummary","theElement","$","imgElement","length","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","postContent","forEach","index","textString","theElementString","highlight","checkSearchState","current","name","status","queryString","stateHistory","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","postTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","postPath","postHeading","authorName","removePostTagsHighlight","$q","$log","$window","resp","makeBanner","show","bannerClass","msg","redirect","location","href","redirectPage","notify","type","showToast","banner","$broadcast","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","errors","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","controller","$scope","HotService","getHotThisWeek","getHotThisWeekFromServer","success","hotThisWeek","updateHotThisWeek","error","errResp","main","responseStatusHandler","$on","$interval","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","clearBanners","isLoading","startLoading","finishedLoading","updateCurrentTime","history","event","toState","toParams","fromState","fromParams","push","$$path","temp","back","prevUrl","splice","path","clearToasts","isEditingPost","PostService","fN","getFullEditPostModel","getCurrentEditPostModelFromServer","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","getCurrentEditPostModel","cancelPostUpdate","port","validateEditForm","submitPostUpdate","getMainSearchResults","pageNumber","mainSearchModel","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","responseMimic2","getAllMainSearchResults","showMore","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","factory","calcObjectLength","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","removePostWithUniqueCuid","postUniqueCuid","found","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","trashPost","unTrashPost","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","logoutClient","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","directive","scope","restrict","link","$element","$attrs","getAccountDetails","theUser","accountStatusBanner","determineAccountStatus","checkAccountStatus","emailIsConfirmed","isApproved","showResendEmail","isBanned","checkAccount","err","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","finishLoading","newPostModel","postUploads","validateForm","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","template","showSpan","getPagePosts","getFromServer","postsCount","defaultTitle","logoutService","validateContactUs","email","message","formStatus","$timeout","fillSearchBox","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","uploads","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.Utils = {\n            keys: Object.keys\n        }\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.newPost', {\n                url: '/newPost',\n                templateUrl: 'views/admin/partials/views/new_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return makeResp(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = makeResp(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, true);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                if (postTags.length > 0) {\n                    postTags.forEach(function (tag, index) {\n                        postTags[index].text = $filter('highlightText')(tag.text, false);\n                    });\n                }\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                if (Object.keys(post).length > 0) {\n                    return prepare(post);\n                } else {\n                    return post;\n                }\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    if (Object.keys(post).length > 0) {\n                        posts[index] = prepare(post);\n                    }\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                isLoading: true,\n\n                startLoading: function () {\n                    this.isLoading = true;\n                },\n                finishedLoading: function () {\n                    $rootScope.isLoading = false;\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService', 'fN',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService, fN) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (Object.keys(resp.thePost).length > 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([], pageNumber);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults($rootScope.$stateParams.pageNumber);\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                removePostWithUniqueCuid: function (postUniqueCuid) {\n                    var found = 0;\n                    for (var pageNumber in allPosts) {\n                        if (found == 0) {\n                            if (allPosts.hasOwnProperty(pageNumber)) {\n                                allPosts[pageNumber].forEach(function (post, index) {\n                                    if (found == 0) {\n                                        if (post.postUniqueCuid == postUniqueCuid) {\n                                            allPosts[pageNumber].splice(index, 1);\n                                            ++found;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', '$location', '$window', function ($rootScope, socketService, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData && Object.keys(userData).length > 0) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.main.goToTop();\n\n                $scope.main = {\n                    post: PostService.getCurrentPost($rootScope.$stateParams.postIndex),\n                    postIsLoaded: false,\n                    isLoading: true,\n                    startLoading: function () {\n                        this.isLoading = true;\n                    },\n                    finishLoading: function () {\n                        this.isLoading = false;\n                    }\n                };\n\n                function getFullPost() {\n                    $scope.main.startLoading();\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (Object.keys(resp.thePost).length > 0) {\n                                $scope.main.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.main.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.main.post = PostService.updatePost({});\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.post = PostService.updatePost({});\n                        });\n                    $scope.main.finishLoading();\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: [],\n                    postUploads: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                                $rootScope.back();\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getAllPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n\n                $scope.$watch(PostService.getMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/general/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([], pageNumber);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updateAllPostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', '$timeout', function ($rootScope, PostService, $timeout) {\n        return {\n            templateUrl: 'views/general/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.suggestedPosts = PostService.getSuggestedPosts();\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                $timeout(getSuggestedPosts, 5000);\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('trashPostDir', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            template: ' <a class=\"btn-link btn btn-default btn-sm\" href ng-click=\"trashPost(post.postUniqueCuid)\">Delete</a>',\n            restrict: 'AE',\n            scope: {\n                post: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.trashPost = function (postUniqueCuid) {\n                    if (postUniqueCuid) {\n                        PostService.trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                PostService.removePostWithUniqueCuid(postUniqueCuid);\n                                $rootScope.back();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            })\n                    }\n                }\n            }\n        }\n    }])","angular.module('adminHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/new_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('editPostUploader', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/edit_post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.editPostModel.postUploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }])\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', function ($rootScope, UserService, socketService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', function ($q, $log, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}