{"version":3,"sources":["adminHomeApp.js","adirectives/bannerDir.js","adirectives/dir.js","adirectives/makePostDir.js","adirectives/postDir.js","filters/filters.js","filters/postFormFilters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","directive","restrict","link","$scope","$element","$attrs","universalBanner","show","bannerClass","msg","$on","event","banner","newPostBanner","showToast","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","resp","status","isLoadingTrue","isLoadingFalse","globals","template","defaultTitle","getDocumentTitle","$watch","$window","$location","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","current","name","stateHistory","length","hasOwnProperty","performMainSearch","location","href","port","host","logoutService","logoutClient","responseStatusHandler","errResponse","showPaging","showThePager","hideThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","pageNumber","toState","toParams","fromState","fromParams","goToPage","go","goToTop","$filter","PostService","newPost","showNewPost","hideNewPost","newPostModel","postHeading","postContent","postSummary","postTags","validateForm","notify","console","log","errors","submitNewPost","scope","model","showSpan","post","forEach","tag","index","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","moment","format","posts","addUrl","postIndex","postUrl","makeResp","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","theElementString","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","highlight","theElement2","removeHighlight","$q","$log","$interval","makeBanner","redirect","redirectPage","type","$broadcast","registrationBanner","reason","warn","broadcast","broadcastShowToast","postContentText","postSummaryText","addMessage","newMessage","messages","numberOfTags","socket","mainService","socketService","$modal","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","hotThisWeek","updateHotThisWeek","errResp","$document","initialRequests","getUserData","userData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","indexPageUrl","allData","history","push","$$path","temp","back","prevUrl","splice","path","showDisqus","search","clearBanners","isEditingPost","duration","someElement","element","document","getElementById","scrollToElement","currentTime","updateCurrentTime","on","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","postsArray","showSuggestedPostsOnly","prepareManyPosts","showSuggestedPosts","getPagePosts","getPostsFromServer","updatePosts","responseMimic","mainSearchResultsPosts","showThePostsOnly","postsCount","defaultDocumentTitle","getCurrentPosts","getCurrentPostsCount","data","prepareOnePost","unshift","getFullPost","getPostFromServer","thePost","calcObjectLength","updatePost","changeDocumentTitle","showThePostOnly","postIsLoaded","showPost","postEdit","goIntoPostEditingMode","goIntoFullPostViewMode","validateEditForm","submitPostUpdate","cancelPostUpdate","getCurrentPost","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","obj","len","prop","documentTitle","newDocumentTitle","hotThisWeekArray","info","done","postUpdate","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home/\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = false;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/admin/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        $scope.pagingTotalCount = 1\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                    $scope.goToTop();\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPost = false;\n                $scope.showNewPost = function () {\n                    $scope.newPost = true;\n                };\n                $rootScope.showNewPost = function () {\n                    $scope.showNewPost();\n                };\n                $scope.hideNewPost = function () {\n                    $scope.newPost = false;\n                };\n                $rootScope.hideNewPost = function () {\n                    $scope.hideNewPost();\n                };\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $scope.hideNewPost();\n                                $rootScope.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"model.postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                model: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.model.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"model.postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                model: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.model.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"model.postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                model: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.model.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: true,\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postContent = $filter('highlightText')($scope.post.postContent);\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: true,\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postSummary = $filter('highlightText')($scope.post.postSummary);\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: true,\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.postTags = $scope.post.postTags;\n                $scope.postTags.forEach(function (tag, index) {\n                    $scope.postTags[index].text = $filter('highlightText')(tag.text);\n                })\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"AddTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"AddPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"AddPostUrl\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (post, posts) {\n            function addUrl(post) {\n                if (post.postIndex) {\n                    post.postUrl = 'http://www.negusmath.com/#!/post/' + post.postIndex;\n                }\n                return post;\n            }\n\n            if (post) {\n                return addUrl(post);\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = addUrl(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        return function (theElementString) {\n\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                var finalString = textToHighlight;\n                var highlightDetails = checkSearchState();\n                if (highlightDetails.status === true) {\n                    //highlight\n                    var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement).highlight(highlightDetails.queryString);\n                    finalString = theElement.html();\n                } else {\n                    //remove highlight\n                    var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement2).removeHighlight();\n                    finalString = theElement2.html();\n                }\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);\n\n\n","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading.length == 0) {\n                errors++;\n                broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n            }\n            if (errors == 0) {\n                if (postHeading.length < 10) {\n                    broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                    errors++;\n                }\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"validatePostContent\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n            if (postContentText.length == 0) {\n                broadcastShowToast('warning', 'Please add some text to the post first')\n            }\n            return postContentText.length > 0;\n        }\n    }])\n    .filter(\"postContentMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent) {\n            var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n            if (postContentText.length == 0) {\n                return \"This is a required field. Please add some text\"\n            } else {\n                return \"\";\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var errors = 0;\n            var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n            if (postSummaryText.length == 0) {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            if (errors == 0) {\n                if (postSummaryText.length > 2000) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n            if (postSummaryText.length == 0) {\n                addMessage('The post summary cannot be empty');\n            }\n            if (postSummaryText.length > 2000) {\n                addMessage('The post summary cannot exceed 2000 characters');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var errors = 0;\n            var numberOfTags = 0;\n\n            postTags.forEach(function (tag) {\n                numberOfTags++;\n                if (tag && tag.text) {\n                    if (errors == 0) {\n                        if (tag.text.length < 3) {\n                            errors++;\n                            broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                        }\n                    }\n\n                    if (errors == 0) {\n                        if (tag.text.length > 30) {\n                            errors++;\n                            broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                }\n            });\n\n            if (errors == 0) {\n                if (numberOfTags > 5) {\n                    errors++;\n                    broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            postTags.forEach(function (tag) {\n                numberOfTags++;\n                if (tag && tag.text) {\n                    if (tag.text.length < 3) {\n                        addMessage('Minimum required length for each tag is 3 characters');\n                    }\n\n                    if (tag.text.length > 30) {\n                        addMessage('Maximum allowed length for each tag is 30 characters');\n                    }\n                }\n            });\n\n            if (numberOfTags > 5) {\n                addMessage('Only a maximum of 5 tags are allowed per post');\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document) {\n\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $scope.showHideLoadingBanner = function (bool) {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(bool);\n                }\n            };\n\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.clientIsRegistered = $scope.userData.isRegistered == 'yes';\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n            globals.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.prepareManyPosts = function (postsArray) {\n                var posts = [];\n                postsArray.forEach(function (post) {\n                    posts.push($filter('makeVideoIframesResponsive')($filter('AddPostUrl')(post, null), null));\n                });\n                return posts;\n            };\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = $scope.prepareManyPosts(resp.postsArray);\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToTop();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToTop();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToTop();\n                        } else {\n                            $scope.posts = PostService.updatePosts($scope.prepareManyPosts(resp.postsArray));\n\n                            $scope.showThePostsOnly();\n\n\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            $scope.showThePager();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = PostService.updatePosts([]);\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    data.post = $scope.prepareOnePost(data.post);\n                    $scope.posts.unshift(data.post);\n                    PostService.updatePosts($scope.posts);\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home') {\n                    getPagePosts();\n                }\n            });\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.postEdit = {};\n            $scope.updatePost = function (newPost) {\n                $scope.post = PostService.updatePost($scope.prepareOnePost(newPost));\n                $scope.postEdit = $scope.post;\n            };\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.prepareOnePost = function (post) {\n                return $filter('makeVideoIframesResponsive')($filter('AddPostUrl')(post, null), null);\n            };\n\n            $scope.prepareManyPosts = function (postsArray) {\n                var posts = [];\n                postsArray.forEach(function (post) {\n                    posts.push($filter('makeVideoIframesResponsive')($filter('AddPostUrl')(post, null), null));\n                });\n                return posts;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = $scope.prepareManyPosts(resp.postsArray);\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToTop();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToTop();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength($scope.post) != 0) {\n                            $scope.updatePost($scope.post);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.updatePost({});\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.updatePost({});\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            $rootScope.goIntoPostEditingMode = function () {\n                $scope.hideThePager();\n                $rootScope.isEditingPost = true;\n            };\n\n            $rootScope.goIntoFullPostViewMode = function () {\n                $scope.hideThePager();\n                $rootScope.isEditingPost = false;\n            };\n\n            $scope.validateEditForm = function (notify) {\n                console.log('ysssssssss');\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.post.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.post.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.post.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.post.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.post)\n                        .success(function (resp) {\n                            $rootScope.goIntoFullPostViewMode();\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            $scope.cancelPostUpdate = function () {\n                console.log(PostService.getCurrentPost());\n                $rootScope.goIntoFullPostViewMode();\n                $rootScope.showToast('success', 'Update cancelled');\n            };\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = $scope.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            $scope.suggestedPosts = $scope.suggestedPosts = $filter('makeVideoIframesResponsive')(null, $scope.suggestedPosts);\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToTop();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToTop();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n\n                //whatever happens, hide the pager\n                $scope.hideThePager();\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.mainSearchResultsPosts = $filter('makeVideoIframesResponsive')(null, $scope.mainSearchResultsPosts);\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            var universalBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var registrationBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var newPostBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var post = {};\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    post = newPost;\n                    return post;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}