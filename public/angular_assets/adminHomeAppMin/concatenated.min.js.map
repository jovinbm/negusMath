{"version":3,"sources":["adminHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","logoutService","$document","cfpLoadingBar","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","showDisqus","host","search","event","toState","toParams","fromState","fromParams","clearBanners","clearToasts","currentState","name","history","push","$$path","back","prevUrl","length","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","clientIsRegistered","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastr","clear","toastType","text","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","getUserData","userData","isRegistered","emit","room","uniqueCuid","errResponse","on","console","log","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","performMainSearch","port","newPost","showNewPost","hideNewPost","newPostModel","postHeading","postContent","postSummary","postTags","postHeadingIsLessMin","postContentIsEmpty","postSummaryIsEmpty","postSummaryHasExceededMaximum","checkIfPostHeadingLessMin","postHeadingText","checkIfPostContentIsEmpty","postContentText","checkIfPostSummaryIsEmpty","postSummaryText","checkPostSummaryMaxLength","maxLength","checkEditPostTags","errorPostTags","numberOfTags","tag","submitNewPost","errors","logoutClient","preparePostSummaryContent","posts","post","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","pageNumber","responseMimic","mainSearchResultsPosts","updatePosts","showThePostsOnly","postCount","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","postBackup","goIntoPostEditingMode","goIntoFullPostViewMode","editPostHeadingLessMin","editPostContentIsEmpty","editPostSummaryIsEmpty","editPostSummaryHasExceededMaximum","checkIfEditPostHeadingLessMin","checkIfEditPostContentIsEmpty","checkIfEditPostSummaryIsEmpty","editPostSummaryText","checkEditPostSummaryMaxLength","submitPostUpdate","cancelPostUpdate","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","currentPage","checkIfPostsSearchResultsIsEmpty","factory","$broadcast","hotThisWeekArray","done","postUpdate","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider.otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:page',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('HotController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', '$state', '$stateParams', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document, $state, $stateParams, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            //variable to show or hide disqus if window.host contains negusmath\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //listens for state changes, used to activate active states\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                //clear all banners\n                $scope.clearBanners();\n\n                //clear all toasts\n                $scope.clearToasts();\n            });\n\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$routeChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n\n            //variable to hold the registered state of the client\n            $scope.clientIsRegistered = false;\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n\n            $scope.clearToasts = function () {\n                toastr.clear();\n            };\n\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n\n            //initial requests\n            socketService.getUserData()\n                .success(function (resp) {\n                    $scope.userData = globals.userData(resp.userData);\n                    if ($scope.userData.isRegistered == 'yes') {\n                        $scope.clientIsRegistered = true;\n                    }\n\n                    //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                    socket.emit('joinRoom', {\n                        room: resp.userData.uniqueCuid\n                    });\n\n                    $scope.responseStatusHandler(resp);\n                })\n                .error(function (errResponse) {\n                    $scope.responseStatusHandler(errResponse);\n                });\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            //search functionality\n            $scope.mainSearchModel = {\n                queryString: \"\",\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            $scope.performMainSearch = function () {\n                if ($scope.mainSearchModel.queryString.length > 0) {\n                    if ($location.port()) {\n                        $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    } else {\n                        $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    }\n                }\n            };\n            //end of search functionality\n\n            //===============new post controllers===========\n\n            //new post\n            $scope.newPost = false;\n            $scope.showNewPost = function () {\n                $scope.newPost = true;\n            };\n            $scope.hideNewPost = function () {\n                $scope.newPost = false;\n            };\n\n            $scope.newPostModel = {\n                postHeading: \"\",\n                postContent: \"\",\n                postSummary: \"\",\n                postTags: []\n            };\n\n            //these variables hold the state of the forms\n            $scope.postHeadingIsLessMin = true;\n            $scope.postContentIsEmpty = true;\n            $scope.postSummaryIsEmpty = true;\n            $scope.postSummaryHasExceededMaximum = false;\n\n            $scope.checkIfPostHeadingLessMin = function () {\n                var postHeadingText = $scope.newPostModel.postHeading;\n                if (postHeadingText.length < 10) {\n                    $scope.postHeadingIsLessMin = true;\n                }\n                else {\n                    $scope.postHeadingIsLessMin = false;\n                }\n                return $scope.postHeadingIsLessMin\n            };\n\n            $scope.checkIfPostContentIsEmpty = function () {\n                var postContentText = $(\"<div>\" + $scope.newPostModel.postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    $scope.postContentIsEmpty = true;\n                }\n                else {\n                    $scope.postContentIsEmpty = false;\n                }\n                return $scope.postContentIsEmpty\n            };\n\n            $scope.checkIfPostSummaryIsEmpty = function () {\n                var postSummaryText = $(\"<div>\" + $scope.newPostModel.postSummary + \"</div>\").text();\n                if (postSummaryText.length == 0) {\n                    $scope.postSummaryIsEmpty = true;\n                }\n                else {\n                    $scope.postSummaryIsEmpty = false;\n                }\n                return $scope.postSummaryIsEmpty\n            };\n\n            $scope.checkPostSummaryMaxLength = function (maxLength) {\n                var postSummaryText = $(\"<div>\" + $scope.newPostModel.postSummary + \"</div>\").text();\n                if (postSummaryText.length > maxLength) {\n                    $scope.postSummaryHasExceededMaximum = true;\n                } else {\n                    $scope.postSummaryHasExceededMaximum = false;\n                }\n                return $scope.postSummaryHasExceededMaximum\n            };\n\n            //returns true if tags pass validation\n            $scope.checkEditPostTags = function () {\n                var errorPostTags = 0;\n                var numberOfTags = 0;\n\n                $scope.newPostModel.postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (errorPostTags == 0) {\n                        if (tag.text.length < 3 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5 && errorPostTags == 0) {\n                    errorPostTags++;\n                    $scope.showToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n\n                if (errorPostTags == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.submitNewPost = function () {\n                var errors = 0;\n                var numberOfTags = 0;\n\n                //validate post heading\n                if ($scope.checkIfPostHeadingLessMin() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The minimum required length of the heading is 10 characters');\n                }\n\n                //validate post content\n                if ($scope.checkIfPostContentIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'Please add some text to the post first');\n                }\n\n                //validate post summary\n                if ($scope.checkIfPostSummaryIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot be empty');\n                }\n\n                if ($scope.checkPostSummaryMaxLength() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n\n                //validate tags\n                //note that the edit post tags returns true if validation succeeded\n                //it also shows toasts depending on whats missing\n                if (!$scope.checkEditPostTags() && errors == 0) {\n                    errors++;\n                }\n\n                if (errors == 0) {\n                    var newPost = {\n                        postHeading: $scope.newPostModel.postHeading,\n                        postContent: $scope.newPostModel.postContent,\n                        postSummary: $scope.newPostModel.postSummary,\n                        postTags: $scope.newPostModel.postTags\n                    };\n                    PostService.submitNewPost(newPost).\n                        success(function (resp) {\n                            $scope.hideNewPost();\n                            $scope.responseStatusHandler(resp);\n                            $scope.newPostModel.postHeading = \"\";\n                            $scope.newPostModel.postContent = \"\";\n                            $scope.newPostModel.postSummary = \"\";\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            //=====================end of submitting post\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postCount) {\n                                $scope.postsCount = resp.postsCount;\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postCount) {\n                    $scope.postCount = data.postCount;\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'home') {\n                    getPagePosts();\n                }\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($scope.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //=============editing post====================\n\n            //variable that holds the editing or show state in the full-post view.\n            $scope.editingMode = false;\n\n            //make copy of post, useful when the user clicks cancel\n            $scope.postBackup = $scope.post;\n\n            $scope.goIntoPostEditingMode = function () {\n                //make copy of post, useful when the user clicks cancel\n                $scope.postBackup = $scope.post;\n                $scope.editingMode = true;\n            };\n\n            $scope.goIntoFullPostViewMode = function () {\n                $scope.editingMode = false;\n            };\n\n            $scope.editPostHeadingLessMin = false;\n            $scope.editPostContentIsEmpty = true;\n            $scope.editPostSummaryIsEmpty = true;\n            $scope.editPostSummaryHasExceededMaximum = false;\n\n            $scope.checkIfEditPostHeadingLessMin = function () {\n                if ($scope.post.postHeading) {\n                    var postHeadingText = $scope.post.postHeading;\n                    if (postHeadingText.length < 10) {\n                        $scope.editPostHeadingLessMin = true;\n                    }\n                    else {\n                        $scope.editPostHeadingLessMin = false;\n                    }\n                    return $scope.editPostHeadingLessMin\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkIfEditPostContentIsEmpty = function () {\n                if ($scope.post.postContent) {\n                    var postContentText = $(\"<div>\" + $scope.post.postContent + \"</div>\").text();\n                    if (postContentText.length == 0) {\n                        $scope.editPostContentIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostContentIsEmpty = false;\n                    }\n                    return $scope.editPostContentIsEmpty\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkIfEditPostSummaryIsEmpty = function () {\n                if ($scope.post.postSummary) {\n                    var editPostSummaryText = $(\"<div>\" + $scope.post.postSummary + \"</div>\").text();\n                    if (editPostSummaryText.length == 0) {\n                        $scope.editPostSummaryIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostSummaryIsEmpty = false;\n                    }\n                    return $scope.editPostSummaryIsEmpty\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkEditPostSummaryMaxLength = function (maxLength) {\n                if ($scope.post.postSummary) {\n                    var editPostSummaryText = $(\"<div>\" + $scope.post.postSummary + \"</div>\").text();\n                    if (editPostSummaryText.length > maxLength) {\n                        $scope.editPostSummaryHasExceededMaximum = true;\n                    } else {\n                        $scope.editPostSummaryHasExceededMaximum = false;\n                    }\n                    return $scope.editPostSummaryHasExceededMaximum\n                } else {\n                    return true;\n                }\n            };\n\n            //returns true if tags pass validation\n            $scope.checkEditPostTags = function () {\n                var errorPostTags = 0;\n                var numberOfTags = 0;\n\n                $scope.post.postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (errorPostTags == 0) {\n                        if (tag.text.length < 3 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Minimum allowed length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5 && errorPostTags == 0) {\n                    errorPostTags++;\n                    $scope.showToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n\n                if (errorPostTags == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.submitPostUpdate = function () {\n                var errors = 0;\n\n                //validate post heading\n                if ($scope.checkIfEditPostHeadingLessMin() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The minimum required length of the heading is 10 characters');\n                }\n\n                //validatePostContent\n                if ($scope.checkIfEditPostContentIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'Please add some text to the post first');\n                }\n\n                //validate postSummary\n                if ($scope.checkIfEditPostSummaryIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot be empty');\n                }\n\n                if ($scope.checkEditPostSummaryMaxLength() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n\n                //validate tags\n                //note that the edit post tags returns true if validation succeeded\n                //it also shows toasts depending on whats missing\n                if (!$scope.checkEditPostTags() && errors == 0) {\n                    errors++;\n                }\n\n                if (errors == 0) {\n                    PostService.submitPostUpdate($scope.post)\n                        .success(function (resp) {\n                            $scope.goIntoFullPostViewMode();\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            $scope.cancelPostUpdate = function () {\n                $scope.post = $scope.postBackup;\n                $scope.goIntoFullPostViewMode();\n                $scope.showToast('success', 'Update cancelled');\n            };\n\n            //end of editing post functions================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    if ($scope.currentState == 'post') {\n                        getFullPost();\n                    }\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n            $scope.currentPage = $stateParams.page;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $scope.currentPage) {\n                    //change page here\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            $scope.mainSearchModel = {\n                queryString: $stateParams.queryString,\n                postSearchUniqueCuid: \"\",\n                requestedPage: $scope.currentPage\n            };\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.showMainSearchResultsOnly();\n                            updateTimeAgo();\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getMainSearchResults();\n            });\n\n            $log.info('SearchController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}