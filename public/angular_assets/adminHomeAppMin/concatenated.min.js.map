{"version":3,"sources":["adminHomeApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","filters/filters.js","filters/postFormFilters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/componentDir.js","adirectives/home/newPostDir.js","adirectives/home/postMessages.js","adirectives/home/postViewDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","fN","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","error","errResp","responseStatusHandler","$on","logoutService","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","showDisqus","host","search","duration","goToTop","someElement","element","document","getElementById","scrollToElement","currentTime","moment","format","updateCurrentTime","$broadcast","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearBanners","clearToasts","isEditingPost","showLoadingBanner","showHideLoadingBanner","hideLoadingBanner","showThePager","hideThePager","showSuggested","showHideSuggestedPosts","hideSuggested","changePagingTotalCount","newTotalCount","getFullPost","getPostFromServer","postIndex","calcObjectLength","thePost","post","updatePost","changeDocumentTitle","postHeading","showThePostOnly","postIsLoaded","showEditPost","showSuggestedPostsOnly","getCurrentPost","data","current","getFullEditPostModel","getCurrentEditPostModelFromServer","editPostModel","updateCurrentEditPostModel","showTheEditPostOnly","getCurrentEditPostModel","cancelPostUpdate","showToast","location","href","port","postPath","validateEditForm","notify","errors","postContent","postSummary","postTags","submitPostUpdate","getMainSearchResults","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","pageNumber","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","banner","bannerClass","msg","responseMimic2","showMainSearchResults","getCurrentMainSearchResults","suggestedPosts","showSuggestedPosts","checkIfPostsSearchResultsIsEmpty","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","posts","makeResp","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","status","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","authorName","removePostTagsHighlight","makeBanner","show","redirect","redirectPage","type","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","factory","obj","len","prop","documentTitle","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","postsCount","mainSearchResultsPostsCount","getCurrentPosts","getCurrentPostsCount","getPostsFromServer","updatePosts","updatePostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","sendContactUs","contactUsModel","logoutClient","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","userUniqueCuid","removeAdminPrivileges","approveUser","banUser","unBanUser","directive","scope","restrict","link","$element","$attrs","getAccountDetails","accountStatusBanner","determineAccountStatus","checkAccountStatus","console","log","JSON","stringify","emailIsConfirmed","isApproved","showResendEmail","isBanned","checkAccount","err","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","bool","removeClass","isLoadingTrue","isLoadingFalse","template","defaultTitle","$watch","fillSearchBox","performMainSearch","getPagePosts","responseMimic","showThePostsOnly","showPaging","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","currentPage","goToPage","go","showNewPost","hideNewPost","newPostModel","validateForm","showSpan","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"AAAAA,QAAAC,OAAA,gBACA,eACA,iBACA,cACA,+BACA,gBACA,YACA,WACA,OACA,YACA,cACA,aACA,oCACA,cACA,aAEAC,KAAA,iBAAA,QAAA,aAAA,SAAA,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAF,EAAAC,OAAAA,EACAD,EAAAE,aAAAA,KAGAC,QAAA,iBAAA,qBAAA,oBAAA,SAAAC,EAAAC,EAAAC,GACAD,EACAE,KAAA,gBAAA,kBACAA,KAAA,cAAA,SACAA,KAAA,kBAAA,SACAA,KAAA,gBAAA,UACAC,UAAA,SAEAJ,EACAK,MAAA,QACAC,IAAA,QACAC,YAAA,yCAEAF,MAAA,eACAC,IAAA,sBACAC,YAAA,gDAEAF,MAAA,aACAC,IAAA,mBACAC,YAAA,8CAEAF,MAAA,iBACAC,IAAA,uBACAC,YAAA,8CAEAF,MAAA,eACAC,IAAA,mCACAC,YAAA,qCAEAF,MAAA,SACAC,IAAA,SACAC,YAAA,0CAEAF,MAAA,aAAAC,IAAA,UAEAJ,EACAM,WAAA,GACAC,WAAA,QC1DAlB,QAAAC,OAAA,gBACAkB,WAAA,iBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,aAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,QAAAC,KACAF,EAAAG,2BACAC,QAAA,SAAAC,GACAZ,EAAAa,YAAAN,EAAAO,kBAAAF,EAAAC,eAEAE,MAAA,SAAAC,GACAhB,EAAAa,YAAAN,EAAAO,sBACAnC,EAAAsC,sBAAAD,KATAhB,EAAAa,YAAAN,EAAAE,iBAaAA,IAIA9B,EAAAuC,IAAA,YAAA,WACAT,SCtBAnC,QAAAC,OAAA,gBACAkB,WAAA,kBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,gBAAA,cAAA,YAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAc,EAAAb,EAAAc,GAyCA,QAAAC,KACAlB,EAAAmB,cACAX,QAAA,SAAAC,GACAZ,EAAAuB,SAAAnB,EAAAmB,SAAAX,EAAAW,UACAvB,EAAAwB,oBACAxB,EAAAyB,mBAAAzB,EAAAuB,SAAAG,aAEA1B,EAAAuB,SAAAG,cAEAzB,EAAA0B,KAAA,YACAC,KAAAhB,EAAAW,SAAAM,aAIA7B,EAAAiB,sBAAAL,KAEAG,MAAA,SAAAe,GACA9B,EAAAiB,sBAAAa,KAvDA9B,EAAA+B,aAAA3B,EAAA4B,QAAAD,aAGA/B,EAAAiC,WAAA,KAAAlC,EAAAmC,OAAAC,OAAA,YAGA,IAAAC,GAAA,CAMApC,GAAAqC,QAAA,WACA,GAAAC,GAAAhE,QAAAiE,QAAAC,SAAAC,eAAA,OACArB,GAAAsB,gBAAAJ,EAAA,GAAAF,IAIApC,EAAA2C,YAAA,GAGA3C,EAAA2C,YAAAC,SAAAC,OAAA,mBACA,IAAAC,GAAA,WACA9C,EAAA2C,YAAAC,SAAAC,OAAA,oBAEAhD,GAAAiD,EAAA,IAAA,GAAA,GAMA9C,EAAAwB,kBAAA,WACA7C,EAAAoE,WAAA,oBAGA/C,EAAAyB,oBAAA,EAwBAJ,GAIA,IAAA2B,KACArE,GAAAsE,gBACAtE,EAAAuC,IAAA,sBAAA,SAAAgC,EAAAC,EAAAC,EAAAC,EAAAC,GACAN,EAAAO,KAAAxD,EAAAyD,OAEA,IAAAC,KACAA,GAAAJ,EAAAK,MAAAJ,EACA3E,EAAAsE,aAAAM,KAAAE,KAEA9E,EAAAgF,KAAA,WACA,GAAAC,GAAAZ,EAAAa,OAAA,EAAAb,EAAAc,OAAA,IAAA,GAAA,GACA/D,GAAAgE,KAAAH,IAGAjF,EAAAuC,IAAA,oBAAA,SAAAgC,EAAAC,EAAAC,EAAAC,EAAAC,GACA3E,EAAAqF,eACArF,EAAAsF,cAGAtF,EAAAuF,eAAA,IAIAvF,EAAAsC,sBAAA,SAAAL,GACAjB,EAAA,kBAAAiB,IAGAjC,EAAAqF,aAAA,WACArF,EAAAoE,WAAA,iBAIA/C,EAAAmE,kBAAA,WACAxF,EAAAyF,uBACAzF,EAAAyF,uBAAA,IAIApE,EAAAqE,kBAAA,WACA1F,EAAAyF,uBACAzF,EAAAyF,uBAAA,IAKApE,EAAAsE,aAAA,WACA3F,EAAA2F,cACA3F,EAAA2F,gBAIAtE,EAAAuE,aAAA,WACA5F,EAAA4F,cACA5F,EAAA4F,gBAKAvE,EAAAwE,cAAA,WACA7F,EAAA8F,wBACA9F,EAAA8F,wBAAA,IAIAzE,EAAA0E,cAAA,WACA/F,EAAA8F,wBACA9F,EAAA8F,wBAAA,IAKAzE,EAAA2E,uBAAA,SAAAC,GACAjG,EAAAgG,wBACAhG,EAAAgG,uBAAAC,IAMAjG,EAAAuC,IAAA,YAAA,WACAG,SCpJA/C,QAAAC,OAAA,gBACAkB,WAAA,sBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,eAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzB,EAAA2B,GAsBA,QAAAqE,KACA7E,EAAAmE,oBACA7D,EAAAwE,kBAAAnG,EAAAE,aAAAkG,WACApE,QAAA,SAAAC,GACAjC,EAAAsC,sBAAAL,GACA,GAAAJ,EAAAwE,iBAAApE,EAAAqE,UACAjF,EAAAkF,KAAA5E,EAAA6E,WAAAvE,EAAAqE,SACA7E,EAAAgF,oBAAApF,EAAAkF,KAAAG,aAEArF,EAAAsF,kBAGAtF,EAAAiC,aACAjC,EAAAuF,cAAA,GAGAvF,EAAAuE,iBAIAvE,EAAAkF,KAAA5E,EAAA6E,eACAnF,EAAAwF,cAAA,EACAxF,EAAAyF,yBACAzF,EAAAqC,aAIAtB,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,GAEA9B,EAAAkF,KAAA5E,EAAA6E,eACAnF,EAAAwF,cAAA,EACAxF,EAAAyF,2BApDAzF,EAAAuE,eACAvE,EAAAkF,KAAA5E,EAAAoF,iBAGA1F,EAAAwF,cAAA,EAEAxF,EAAAsF,gBAAA,WACAtF,EAAAqE,oBACArE,EAAAwF,cAAA,EACAxF,EAAA0E,iBAGA1E,EAAAyF,uBAAA,WACAzF,EAAAqE,oBACArE,EAAAwF,cAAA,EACAxF,EAAAwE,iBAGAxE,EAAAuF,cAAA,EAsCAV,IAIAlG,EAAAuC,IAAA,aAAA,SAAAgC,EAAAyC,GACAhH,EAAAE,aAAAkG,WAAAY,EAAAT,KAAAH,YACA/E,EAAAkF,KAAA5E,EAAA6E,WAAAQ,EAAAT,SAIAvG,EAAAuC,IAAA,YAAA,WAEAvC,EAAAuF,eACA,aAAAvF,EAAAC,OAAAgH,QAAAlC,MACAmB,SAMApF,WAAA,sBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,eAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzB,EAAA2B,GAoBA,QAAAqF,KACA7F,EAAAmE,oBACA7D,EAAAwF,kCAAAnH,EAAAE,aAAAkG,WACApE,QAAA,SAAAC,GACAjC,EAAAsC,sBAAAL,GACA,GAAAJ,EAAAwE,iBAAApE,EAAAqE,UACAjF,EAAA+F,cAAAzF,EAAA0F,2BAAApF,EAAAqE,SACA7E,EAAAgF,oBAAApF,EAAA+F,cAAAV,aAEArF,EAAAiG,sBACAjG,EAAAuE,iBAGAvE,EAAA+F,cAAAzF,EAAA0F,+BACAhG,EAAAwF,cAAA,EACAxF,EAAAyF,yBACAzF,EAAAqC,aAIAtB,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,GAEA9B,EAAA+F,cAAAzF,EAAA0F,+BACAhG,EAAAwF,cAAA,EACAxF,EAAAyF,2BA3CAzF,EAAAuE,eACAvE,EAAA+F,cAAAzF,EAAA4F,0BAGAlG,EAAAwF,cAAA,EAEAxF,EAAAiG,oBAAA,WACAjG,EAAAqE,oBACArE,EAAAwF,cAAA,EACAxF,EAAA0E,iBAGA1E,EAAAyF,uBAAA,WACAzF,EAAAqE,oBACArE,EAAAwF,cAAA,EACAxF,EAAAwE,iBAgCAqB,IAEA7F,EAAAmG,iBAAA,WACAxH,EAAAyH,UAAA,UAAA,oBAEAtG,EAAAuG,SAAAC,KADAvG,EAAAwG,OACA,UAAAxG,EAAAmC,OAAA,IAAAnC,EAAAwG,OAAAvG,EAAA+F,cAAAS,SAEA,UAAAzG,EAAAmC,OAAAlC,EAAA+F,cAAAS,UAIAxG,EAAAyG,iBAAA,SAAAC,GACA,GAAAC,GAAA,CAmBA,OAlBAhH,GAAA,uBAAAK,EAAA+F,cAAAV,YAAAqB,IACAC,IAEA,GAAAA,IACAhH,EAAA,uBAAAK,EAAA+F,cAAAa,YAAAF,IACAC,KAGA,GAAAA,IACAhH,EAAA,uBAAAK,EAAA+F,cAAAc,YAAAH,IACAC,KAGA,GAAAA,IACAhH,EAAA,oBAAAK,EAAA+F,cAAAe,SAAAJ,IACAC,KAGA,GAAAA,GAGA3G,EAAA+G,iBAAA,WACA/G,EAAAyG,kBAAA,IACAnG,EAAAyG,iBAAA/G,EAAA+F,eACApF,QAAA,SAAAC,GACAjC,EAAAsC,sBAAAL,GACAjC,EAAAyH,UAAA,UAAA,SAEAtG,EAAAuG,SAAAC,KADAvG,EAAAwG,OACA,UAAAxG,EAAAmC,OAAA,IAAAnC,EAAAwG,OAAAvG,EAAA+F,cAAAS,SAEA,UAAAzG,EAAAmC,OAAAlC,EAAA+F,cAAAS,WAGAzF,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,SCjLAxD,QAAAC,OAAA,gBACAkB,WAAA,oBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,GAwCA,QAAAwG,KACAhH,EAAAmE,oBAEAnE,EAAAiH,iBACAC,YAAAvI,EAAAE,aAAAqI,aAAA,GACAC,qBAAA,GACAC,cAAAzI,EAAAE,aAAAwI,YAAA,GAGA/G,EAAAgH,WAAAtH,EAAAiH,iBACAtG,QAAA,SAAAC,GAEA,GAAAA,EAAA2G,QAAAC,aAAA,EAAA,CACA,GAAAC,GAAA7G,EAAA2G,OACAvH,GAAA0H,uBAAApH,EAAAqH,wBAAAF,EAAAG,YACA5H,EAAA6H,uBAAAvH,EAAAwH,6BAAAL,EAAAD,cACAxH,EAAA2E,uBAAA3E,EAAA6H,wBACA7H,EAAA+H,kBAAAN,EAAAO,MACAhI,EAAAiH,gBAAAE,qBAAAM,EAAAQ,iBACAjI,EAAAkI,2BAEA,IAAAC,IACAC,QAAA,EACAC,YAAA,wCACAC,IAAA,uBAAAtI,EAAA6H,uBAAA,WAEAlJ,GAAAsC,sBAAAkH,GACAnI,EAAAsE,mBACA,CAEAtE,EAAA0H,uBAAApH,EAAAqH,4BACA3H,EAAA6H,uBAAAvH,EAAAwH,6BAAA,EACA,IAAAS,IACAH,QAAA,EACAC,YAAA,wCACAC,IAAA,gCAEA3J,GAAAsC,sBAAAsH,GACAvI,EAAAwI,uBAAA,EACAxI,EAAAyF,yBACAzF,EAAAqC,aAGAtB,MAAA,SAAAC,GACArC,EAAAsC,sBAAAD,GAEAhB,EAAA0H,uBAAApH,EAAAqH,4BACA3H,EAAA6H,uBAAAvH,EAAAwH,6BAAA,GACA9H,EAAAwI,uBAAA,EACAxI,EAAAyF,2BAvFAzF,EAAAsE,eAEAtE,EAAAiH,iBACAC,YAAAvI,EAAAE,aAAAqI,aAAA,GACAC,qBAAA,GACAC,cAAAzI,EAAAE,aAAAwI,YAAA,GAIAjH,EAAAgF,oBAAAzG,EAAAE,aAAAqI,YAAA,uBAEAlH,EAAA0H,uBAAApH,EAAAmI,8BACAzI,EAAA6H,uBAAA,EAEA7H,EAAA+H,kBAAA,SAAAC,GACAA,GAAArJ,EAAAE,aAAAwI,YAKArH,EAAA0I,kBAGA1I,EAAAwI,uBAAA,EACAxI,EAAA2I,oBAAA,EAEA3I,EAAAkI,0BAAA,WACAlI,EAAAqE,oBACArE,EAAAwI,uBAAA,EACAxI,EAAA0E,iBAGA1E,EAAAyF,uBAAA,WACAzF,EAAAqE,oBACArE,EAAAwI,uBAAA,EACAxI,EAAAwE,iBAwDAwC,IAIAhH,EAAA4I,iCAAA,WACA,MAAA,IAAA5I,EAAA0H,uBAAA7D,QAKAlF,EAAAuC,IAAA,YAAA,WACA,eAAAvC,EAAAC,OAAAgH,QAAAlC,MACAsD,SC3GA1I,QAAAC,OAAA,gBACAkB,WAAA,yBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,SAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,gBAAA,cAAA,YAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAc,EAAA0H,EAAAzH,GAIA,QAAA0H,KACAD,EAAAE,0BACApI,QAAA,SAAAC,GACAZ,EAAAgJ,WAAAH,EAAAI,iBAAArI,EAAAoI,YACArK,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,KATA9B,EAAAgJ,WAAAH,EAAAC,gBAaAA,IAIAnK,EAAAuC,IAAA,cAAA,WACA4H,MAGAnK,EAAAuC,IAAA,YAAA,iBCzBA5C,QAAAC,OAAA,gBACA2K,OAAA,UAAA,WAIA,MAAA,UAAAC,EAAAC,EAAAC,GACA,IAAAF,EAAA,MAAA,OAkBA,IAhBAC,IACAA,EAAAE,KAAAC,OAGAjL,QAAAkL,OAAAL,GACAA,EAAAA,EAAAM,UACA,gBAAAN,KACAA,EAAA,GAAAG,MAAAH,GAAAM,WAGAnL,QAAAkL,OAAAJ,GACAA,EAAAA,EAAAK,UACA,gBAAAL,KACAA,EAAA,GAAAE,MAAAF,GAAAK,WAGA,gBAAAN,IAAA,gBAAAC,GAAA,CAIA,GACAM,GAAAC,KAAAC,KAAAR,EAAAD,GAAA,KACAU,KACAC,EAAA,GACAC,EAAA,KACAC,EAAA,MACAC,EAAA,OAEAC,EAAA,SACAC,EAAA,SAcA,OAZAN,GAAAC,GAAAJ,GAAA,GAAAL,EAAA,MAAA,sBACA,GAAAS,EAAAJ,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAI,IAAA,OACA,GAAAC,EAAAL,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAK,IAAA,MACA,EAAAC,EAAAN,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAM,IAAA,OACA,GAAAC,EAAAP,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAO,IAAA,QACA,GAAAC,EAAAR,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAQ,IAAA,QACA,IAAAC,EAAAT,GAAAC,KAAAS,MAAAT,KAAAC,IAAAF,EAAAS,IAAA,WACA,GAAA,eAEAN,EAAA,IAAA,IAAAA,EAAA,IAAAA,EAAA,GAAA,EAAA,IAAA,GACAA,EAAAA,EAAAQ,KAAA,KAEAhB,KAAA,EACAQ,EAEAT,GAAAD,EAAAU,EAAA,OAAA,MAAAA,MAGAX,OAAA,cAAA,UAAA,SAAAvJ,GAEA,MAAA,UAAA2K,GACA,MAAA3K,GAAA,WAAA2K,OAGApB,OAAA,eAAA,UAAA,WAEA,MAAA,UAAAoB,GACA,MAAA1H,QAAA0H,GAAAzH,OAAA,wBAGAqG,OAAA,sBAAA,UAAA,WACA,MAAA,UAAAnE,GACA,MAAA,yCAAAA,MAGAmE,OAAA,eAAA,UAAA,WACA,MAAA,UAAAnE,GACA,MAAA,iBAAAA,MAGAmE,OAAA,8BAAA,UAAA,WAEA,MAAA,UAAAhE,EAAAqF,GAKA,QAAAC,GAAAtF,GA0CA,MAzCAA,GAAA2B,cAEA4D,EAAAC,EAAA,QAAAxF,EAAA2B,YAAA,UAGA8D,EAAAD,EAAA,sBAAAD,GAGAE,EAAA9G,OAAA,IAGA+G,EAAAD,EACAE,SAAA,yBACAC,KAAA,+DAGAL,EAAAM,KAAA,OAAAC,YAAAJ,IAEA1F,EAAA2B,YAAA4D,EAAAQ,QAGA/F,EAAA0B,cAEA6D,EAAAC,EAAA,QAAAxF,EAAA0B,YAAA,UAGA+D,EAAAD,EAAA,sBAAAD,GAGAE,EAAA9G,OAAA,IAGA+G,EAAAD,EACAE,SAAA,yBACAC,KAAA,+DAGAL,EAAAM,KAAA,OAAAC,YAAAJ,IAEA1F,EAAA0B,YAAA6D,EAAAQ,QAEA/F,EA9CA,GAAAuF,GACAE,EACAC,CA+CA,OAAA1F,GACAsF,EAAAtF,GACAqF,GACAA,EAAAW,QAAA,SAAAhG,EAAAiG,GACAZ,EAAAY,GAAAX,EAAAtF,KAEAqF,GAJA,WAQArB,OAAA,6BAAA,UAAA,WAEA,MAAA,UAAAkC,GAKA,QAAAZ,GAAAY,GAkBA,MAhBAX,GAAAC,EAAA,QAAAU,EAAA,UAGAT,EAAAD,EAAA,sBAAAD,GAGAE,EAAA9G,OAAA,IAGA+G,EAAAD,EACAE,SAAA,yBACAC,KAAA,+DAGAL,EAAAM,KAAA,OAAAC,YAAAJ,IAEAH,EAAAQ,OAtBA,GAAAR,GACAE,EACAC,CAuBA,OAAAQ,GACAZ,EAAAY,GAEAA,MAIAlC,OAAA,iBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GAKA,MAAA,UAAA0M,EAAAC,GAKA,QAAAC,KAEA,MAAA,eAAA5M,EAAAC,OAAAgH,QAAAlC,MAEA8H,QAAA,EACAtE,YAAAvI,EAAAE,aAAAqI,aAAA,IAEAvI,EAAAsE,aAAAY,OAAA,GACAlF,EAAAsE,aAAAtE,EAAAsE,aAAAY,OAAA,GAAA4H,eAAA,gBAGAD,QAAA,EACAtE,YAAAvI,EAAAsE,aAAAtE,EAAAsE,aAAAY,OAAA,GAAA,eAAAqD,cASAsE,QAAA,GAKA,QAAAE,GAAAC,GACA,GAAAL,EAAA,CACA,GAAAM,GAAAD,EACAE,EAAAN,GACA,IAAAM,EAAAL,UAAA,EAAA,CAEA,GAAAf,GAAAC,EAAA,QAAAiB,EAAA,SACAjB,GAAAD,GAAAa,UAAAO,EAAA3E,aACA0E,EAAAnB,EAAAQ,WACA,CAEA,GAAAa,GAAApB,EAAA,QAAAiB,EAAA,SACAjB,GAAAoB,GAAAC,kBACAH,EAAAE,EAAAb,YAEA,CAEA,GAAAe,GAAAtB,EAAA,QAAAiB,EAAA,SACAjB,GAAAsB,GAAAD,kBACAH,EAAAI,EAAAf,OAGA,MAAAW,GAGA,MAAAF,GAAAL,OAIAnC,OAAA,gBAAA,UAAA,SAAAvJ,GAEA,MAAA,UAAAuF,EAAAqF,GACA,QAAA0B,GAAAnF,GAKA,MAJAA,GAAAoE,QAAA,SAAAgB,EAAAf,GACArE,EAAAqE,GAAAgB,KAAAxM,EAAA,iBAAAuM,EAAAC,MAAA,KAGArF,EAGA,QAAAsF,GAAAlH,GAWA,MAVAA,GAAAmH,QAAA1M,EAAA,cAAAuF,EAAAoF,WACApF,EAAAoH,SAAA3M,EAAA,eAAAuF,EAAAoF,WACApF,EAAAqH,gBAAA5M,EAAA,sBAAAuF,EAAAH,WACAG,EAAAsB,SAAA7G,EAAA,eAAAuF,EAAAH,WACAG,EAAAG,YAAA1F,EAAA,iBAAAuF,EAAAG,aAAA,GACAH,EAAAsH,WAAA7M,EAAA,iBAAAuF,EAAAsH,YAAA,GACAtH,EAAA2B,YAAAlH,EAAA,iBAAAA,EAAA,6BAAAuF,EAAA2B,cAAA,GACA3B,EAAA0B,YAAAjH,EAAA,iBAAAA,EAAA,6BAAAuF,EAAA0B,cAAA,GACA1B,EAAA4B,SAAAmF,EAAA/G,EAAA4B,UAEA5B,EAGA,MAAAA,GACAkH,EAAAlH,GACAqF,GACAA,EAAAW,QAAA,SAAAhG,EAAAiG,GACAZ,EAAAY,GAAAiB,EAAAlH,KAEAqF,GAJA,WAQArB,OAAA,oBAAA,UAAA,SAAAvJ,GAEA,MAAA,UAAAuF,EAAAqF,GACA,QAAAkC,GAAA3F,GAKA,MAJAA,GAAAoE,QAAA,SAAAgB,EAAAf,GACArE,EAAAqE,GAAAgB,KAAAxM,EAAA,iBAAAuM,EAAAC,MAAA,KAGArF,EAGA,QAAAsF,GAAAlH,GAWA,MAVAA,GAAAmH,QAAA1M,EAAA,cAAAuF,EAAAoF,WACApF,EAAAoH,SAAA3M,EAAA,eAAAuF,EAAAoF,WACApF,EAAAqH,gBAAA5M,EAAA,sBAAAuF,EAAAH,WACAG,EAAAsB,SAAA7G,EAAA,eAAAuF,EAAAH,WACAG,EAAAG,YAAA1F,EAAA,iBAAAuF,EAAAG,aAAA,GACAH,EAAAsH,WAAA7M,EAAA,iBAAAuF,EAAAsH,YAAA,GACAtH,EAAA2B,YAAAlH,EAAA,iBAAAuF,EAAA2B,aAAA,GACA3B,EAAA0B,YAAAjH,EAAA,iBAAAuF,EAAA0B,aAAA,GACA1B,EAAA4B,SAAA2F,EAAAvH,EAAA4B,UAEA5B,EAGA,MAAAA,GACAkH,EAAAlH,GACAqF,GACAA,EAAAW,QAAA,SAAAhG,EAAAiG,GACAZ,EAAAY,GAAAiB,EAAAlH,KAEAqF,GAJA,WAQArB,OAAA,wBAAA,UAAA,SAAAvJ,GAEA,MAAA,UAAAuF,EAAAqF,GAEA,QAAA6B,GAAAlH,GAKA,MAJAA,GAAAmH,QAAA1M,EAAA,cAAAuF,EAAAoF,WACApF,EAAAoH,SAAA3M,EAAA,eAAAuF,EAAAoF,WACApF,EAAAqH,gBAAA5M,EAAA,sBAAAuF,EAAAH,WACAG,EAAAsB,SAAA7G,EAAA,eAAAuF,EAAAH,WACAG,EAGA,MAAAA,GACAkH,EAAAlH,GACAqF,GACAA,EAAAW,QAAA,SAAAhG,EAAAiG,GACAZ,EAAAY,GAAAiB,EAAAlH,KAEAqF,GAJA,WAQArB,OAAA,kBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,UAAA,SAAAxJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAyB,GAEA,MAAA,UAAAQ,GACA,QAAA8L,GAAAC,EAAAtE,EAAAC,GACA,OACAqE,KAAAA,GAAA,GAAA,EACAtE,YAAAA,EACAC,IAAAA,GAqCA,MAjCA1H,KACAA,EAAAgM,UACAhM,EAAAgM,WACA9M,EAAAuG,SAAAC,KAAA1F,EAAAiM,cAGAjM,EAAA8F,QACA9F,EAAAkM,MAAAlM,EAAA0H,KACA3J,EAAAyH,UAAAxF,EAAAkM,KAAAlM,EAAA0H,KAGA1H,EAAAwH,QACAxH,EAAAyH,aAAAzH,EAAA0H,KACA3J,EAAAoE,WAAA,kBAAA2J,GAAA,EAAA9L,EAAAyH,YAAAzH,EAAA0H,MAGA1H,EAAAmM,eACAnM,EAAAyH,aAAAzH,EAAA0H,KACA3J,EAAAoE,WAAA,gBAAA2J,GAAA,EAAA9L,EAAAyH,YAAAzH,EAAA0H,MAGA1H,EAAAoM,oBACApM,EAAAyH,aAAAzH,EAAA0H,KACA3J,EAAAoE,WAAA,qBAAA2J,GAAA,EAAA9L,EAAAyH,YAAAzH,EAAA0H,MAGA1H,EAAAqM,QACArN,EAAAsN,KAAAtM,EAAAqM,UAMA,MCzXA3O,QAAAC,OAAA,gBACA2K,OAAA,uBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAA0G,EAAA8H,GAGA,QAAAC,GAAAN,EAAAX,GACAgB,GACAxO,EAAAyH,UAAA0G,EAAAX,GAJA,GAAAxF,GAAA,CAuBA,OAfAtB,IACA,GAAAA,EAAAxB,SACA8C,IACAyG,EAAA,UAAA,4BAEA,GAAAzG,GACAtB,EAAAxB,OAAA,KACAuJ,EAAA,UAAA,+DACAzG,OAIAA,IACAyG,EAAA,UAAA,4BAEA,GAAAzG,MAGAuC,OAAA,uBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAA0G,GAGA,QAAAgI,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,EAUA,IAAAlI,EAAA,CACA,GAAAmI,GAAA9C,EAAA,QAAArF,EAAA,UAAA8G,MAEA,IAAAqB,EAAA3J,QACAwJ,EAAA,2BAEAG,EAAA3J,OAAA,GAAA2J,EAAA3J,OAAA,IACAwJ,EAAA,gDAGAA,GAAA,0BAEA,OAAAE,OAIArE,OAAA,uBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAAiI,EAAAuG,GACA,QAAAC,GAAAN,EAAAX,GACAgB,GACAxO,EAAAyH,UAAA0G,EAAAX,GAIA,GAAAvF,EAAA,CACA,GAAA6G,GAAA/C,EAAA,QAAA9D,EAAA,UAAAuF,MAIA,OAHA,IAAAsB,EAAA5J,QACAuJ,EAAA,UAAA,0CAEAK,EAAA5J,OAAA,EAGA,MADAuJ,GAAA,UAAA,2CACA,MAIAlE,OAAA,uBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAAiI,GACA,GAAAA,EAAA,CACA,GAAA6G,GAAA/C,EAAA,QAAA9D,EAAA,UAAAuF,MACA,OAAA,IAAAsB,EAAA5J,OACA,2BAEA,GAGA,MAAA,+BAIAqF,OAAA,uBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAAkI,EAAAsG,GAGA,QAAAC,GAAAN,EAAAX,GACAgB,GACAxO,EAAAyH,UAAA0G,EAAAX,GAJA,GAAAxF,GAAA,CAQA,IAAAE,EAAA,CACA,GAAA6G,GAAAhD,EAAA,QAAA7D,EAAA,UAAAsF,MAEA,IAAAuB,EAAA7J,SACA8C,IACAyG,EAAA,UAAA,qCAEA,GAAAzG,GACA+G,EAAA7J,OAAA,MACA8C,IACAyG,EAAA,UAAA,uDAIAzG,KACAyG,EAAA,UAAA,mCAEA,OAAA,IAAAzG,MAGAuC,OAAA,uBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAAkI,GAGA,QAAAwG,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,EAUA,IAAA1G,EAAA,CACA,GAAA6G,GAAAhD,EAAA,QAAA7D,EAAA,UAAAsF,MAEA,IAAAuB,EAAA7J,QACAwJ,EAAA,oCAEAK,EAAA7J,OAAA,KACAwJ,EAAA,sDAGAA,GAAA,mCAEA,OAAAE,OAIArE,OAAA,oBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAAmI,EAAAqG,GAGA,QAAAC,GAAAN,EAAAX,GACAgB,GACAxO,EAAAyH,UAAA0G,EAAAX,GAJA,GAAAxF,GAAA,EAQAgH,EAAA,CAEA,OAAA7G,IACAA,EAAAoE,QAAA,SAAAgB,GACAyB,IACAzB,GAAAA,EAAAC,OACA,GAAAxF,GACAuF,EAAAC,KAAAtI,OAAA,IACA8C,IACAyG,EAAA,UAAA,yDAIA,GAAAzG,GACAuF,EAAAC,KAAAtI,OAAA,KACA8C,IACAyG,EAAA,UAAA,4DAMA,GAAAzG,GACAgH,EAAA,IACAhH,IACAyG,EAAA,UAAA,kDAOA,GAAAzG,IAHA,MAMAuC,OAAA,oBAAA,UAAA,aAAA,SAAAvJ,EAAAhB,GACA,MAAA,UAAAmI,GAGA,QAAAuG,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,GAUAI,EAAA,CAqBA,OAnBA7G,KACAA,EAAAoE,QAAA,SAAAgB,GACAyB,IACAzB,GAAAA,EAAAC,OACAD,EAAAC,KAAAtI,OAAA,GACAwJ,EAAA,wDAGAnB,EAAAC,KAAAtI,OAAA,IACAwJ,EAAA,2DAKAM,EAAA,GACAN,EAAA,kDAIAE,MCnOAjP,QAAAC,OAAA,gBAEAqP,QAAA,MAAA,KAAA,YAAA,UAAA,aAAA,gBACA,SAAAlO,EAAAK,EAAAD,EAAAnB,EAAAwB,GACA,OACA6E,iBAAA,SAAA6I,GACA,GAAAC,GAAA,CACA,KAAA,GAAAC,KAAAF,GACAA,EAAApC,eAAAsC,IACAD,GAGA,OAAAA,QCZAxP,QAAAC,OAAA,gBAEAqP,QAAA,WAAA,KAAA,YAAA,UAAA,aAAA,gBACA,SAAAlO,EAAAK,EAAAD,EAAAnB,EAAAwB,GACA,GAAAoB,MACAS,GACAgM,cAAA,qEACAjM,aAAAhC,EAAAwG,OAAA,UAAAxG,EAAAmC,OAAA,IAAAnC,EAAAwG,OAAA,SAAAvG,OAAA+B,aAAA,UAAAhC,EAAAmC,OAAA,SAGA,QAEAX,SAAA,SAAAoE,GACA,MAAAA,GACApE,EAAAoE,EAGApE,GAIAS,QAAAA,EAEAiM,iBAAA,WACA,MAAAjM,GAAAgM,eAGAE,qBAAA,WACAlM,EAAAgM,cAAA,sEAGA5I,oBAAA,SAAA+I,GAIA,MAHAA,KACAnM,EAAAgM,cAAAG,GAEAnM,EAAAgM,mBCnCA1P,QAAAC,OAAA,gBACAqP,QAAA,cAAA,UAAA,OAAA,QAAA,UAAA,aAAA,SACA,SAAAjO,EAAAC,EAAAlB,EAAAoB,EAAAnB,EAAAsB,GAEA,GAAAY,KAOA,OALAZ,GAAAmO,GAAA,mBAAA,SAAAzI,GAEAhH,EAAAoE,WAAA,mBAAA4C,MAKAlF,eAAA,WACA,MAAAI,IAGAH,yBAAA,WACA,MAAAhC,GAAAwG,KAAA,2BAGApE,kBAAA,SAAAuN,GAMA,MAJAxN,GADAwN,SAGA1O,EAAA,gBAAA,KAAA0O,GAEAA,OC3BA/P,QAAAC,OAAA,gBACAqP,QAAA,eAAA,OAAA,UAAA,aAAA,SAAA,gBAAA,UACA,SAAAhO,EAAAE,EAAAnB,EAAAsB,EAAAE,EAAAC,GAOA,MALAH,GAAAmO,GAAA,YAAA,WACAxO,EAAA0O,KAAA,kCACA3P,EAAAoE,WAAA,gBAIAwL,KAAA,WACA,MAAA,QCXAjQ,QAAAC,OAAA,gBACAqP,QAAA,eAAA,UAAA,QAAA,UAAA,aAAA,YAAA,SACA,SAAAjO,EAAAjB,EAAAoB,EAAAnB,EAAAkB,EAAAI,GAEA,GAAAiF,MACAa,KACAwE,KACAiE,EAAA,EACA9G,KACA+G,EAAA,EACA/F,IAaA,OAVAzI,GAAAmO,GAAA,UAAA,SAAAzI,GAEAhH,EAAAoE,WAAA,UAAA4C,KAGA1F,EAAAmO,GAAA,aAAA,SAAAzI,GAEAhH,EAAAoE,WAAA,aAAA4C,MAKA+I,gBAAA,WACA,MAAAnE,IAGAoE,qBAAA,WACA,MAAAH,IAGAI,mBAAA,SAAAvH,GACA,MAAA3I,GAAAwG,KAAA,iBACA8C,KAAAX,KAIAwH,YAAA,SAAAjH,GAMA,MAJA2C,GADA3C,SAGAjI,EAAA,gBAAA,KAAAiI,IAKAkH,iBAAA,SAAAC,GAEA,MADAP,GAAAO,GAIAC,cAAA,SAAAC,GACA,QAAAC,GAAAC,GAMA,MAJAA,GADAF,SAGAtP,EAAA,gBAAAwP,EAAA,MAKA,GAAAC,GAAAF,EAAAD,EAEA,OADA1E,GAAA8E,QAAAD,GACA7E,GAGA7E,eAAA,WACA,MAAAR,IAGAJ,kBAAA,SAAAC,GACA,MAAArG,GAAAwG,KAAA,gBACAH,UAAAA,KAIAI,WAAA,SAAA8J,GAMA,MAJA/J,GADA+J,SAGAtP,EAAA,gBAAAsP,EAAA,OAKA/I,wBAAA,WACA,MAAAH,UAGAA,GAIAD,kCAAA,SAAAf,GACA,MAAArG,GAAAwG,KAAA,gBACAH,UAAAA,KAIAiB,2BAAA,SAAAiJ,GAMA,MAJAlJ,GADAkJ,SAGAtP,EAAA,wBAAAsP,EAAA,OAKAxG,4BAAA,WACA,MAAAf,IAGAJ,WAAA,SAAAgI,GACA,MAAA5Q,GAAAwG,KAAA,kBAAAoK,IAGA3H,wBAAA,SAAA4H,GAMA,MAJA7H,GADA6H,SAGA5P,EAAA,gBAAA,KAAA4P,IAKAzH,6BAAA,SAAAiH,GAEA,MADAN,GAAAM,GAIAS,kBAAA,WACA,MAAA9G,IAGA+G,4BAAA,WACA,MAAA/Q,GAAAwG,KAAA,8BAGAwK,qBAAA,SAAAC,GAMA,MAJAjH,GADAiH,SAGAhQ,EAAA,gBAAA,KAAAgQ,IAKAC,cAAA,SAAAX,GACA,MAAAvQ,GAAAwG,KAAA,gBACA+J,QAAAA,KAIAlI,iBAAA,SAAA7B,GACA,MAAAxG,GAAAwG,KAAA,mBACA2K,WAAA3K,SC7JA5G,QAAAC,OAAA,gBAEAqP,QAAA,UAAA,OAAA,YAAA,aACA,SAAAhO,EAAAG,EAAApB,GACA,GAAAU,EAEAA,GADAU,EAAAwG,OACAxG,EAAAmC,OAAA,IAAAnC,EAAAwG,OAEAxG,EAAAmC,MAEA,IAAAjC,GAAA6P,GAAAC,QAAA1Q,EAEA,QACA+O,GAAA,SAAA4B,EAAAC,GACAhQ,EAAAmO,GAAA4B,EAAA,WACA,GAAAE,GAAAC,SACAxR,GAAAyR,OAAA,WACAH,EAAAI,MAAApQ,EAAAiQ,QAKAvO,KAAA,SAAAqO,EAAArK,EAAAsK,GACAhQ,EAAA0B,KAAAqO,EAAArK,EAAA,WACA,GAAAuK,GAAAC,SACAxR,GAAAyR,OAAA,WACAH,GACAA,EAAAI,MAAApQ,EAAAiQ,QAMAI,mBAAA,SAAAN,EAAAC,GACAhQ,EAAAqQ,mBAAAN,EAAA,WACA,GAAAE,GAAAC,SACAxR,GAAAyR,OAAA,WACAH,EAAAI,MAAApQ,EAAAiQ,YAQAtC,QAAA,iBAAA,OAAA,QAAA,aACA,SAAAhO,EAAAlB,EAAAC,GAEA,OAEA2C,YAAA,WACA,MAAA5C,GAAA6R,IAAA,qBAGAC,wBAAA,WACA,MAAA9R,GAAAwG,KAAA,6BAGAuL,cAAA,SAAAC,GACA,MAAAhS,GAAAwG,KAAA,aAAAwL,QAMA9C,QAAA,iBAAA,QACA,SAAAlP,GACA,OAEAiS,aAAA,WACA,MAAAjS,GAAAwG,KAAA,0BCtEA5G,QAAAC,OAAA,gBACAqP,QAAA,eAAA,UAAA,QAAA,UAAA,aAAA,YAAA,SACA,SAAAjO,EAAAjB,EAAAoB,EAAAnB,EAAAkB,EAAAI,GAEA,GAAA+I,MACA4H,KACAC,KACAC,KACAC,IAEA,QAEAjI,cAAA,WACA,MAAAE,IAGAD,wBAAA,WACA,MAAArK,GAAAwG,KAAA,0BAGA+D,iBAAA,SAAA+H,GAEA,MADAhI,GAAAgI,GAIAC,YAAA,WACA,MAAAL,IAGAM,sBAAA,WACA,MAAAxS,GAAAwG,KAAA,wBAGAiM,eAAA,SAAAC,GAEA,MADAR,GAAAQ,GAIAC,cAAA,WACA,MAAAR,IAGAS,wBAAA,WACA,MAAA5S,GAAAwG,KAAA,0BAGAqM,iBAAA,SAAAH,GAEA,MADAP,GAAAO,GAIAI,oBAAA,WACA,MAAAV,IAGAW,8BAAA,WACA,MAAA/S,GAAAwG,KAAA,gCAGAwM,uBAAA,SAAAN,GAEA,MADAN,GAAAM,GAIAO,eAAA,WACA,MAAAZ,IAGAa,yBAAA,WACA,MAAAlT,GAAAwG,KAAA,2BAGA2M,kBAAA,SAAAT,GAEA,MADAL,GAAAK,GAIAU,mBAAA,SAAAC,GACA,MAAArT,GAAAwG,KAAA,2BACA6M,eAAAA,KAIAC,sBAAA,SAAAD,GACA,MAAArT,GAAAwG,KAAA,8BACA6M,eAAAA,KAIAE,YAAA,SAAAF,GACA,MAAArT,GAAAwG,KAAA,oBACA6M,eAAAA,KAIAG,QAAA,SAAAH,GACA,MAAArT,GAAAwG,KAAA,gBACA6M,eAAAA,KAIAI,UAAA,SAAAJ,GACA,MAAArT,GAAAwG,KAAA,kBACA6M,eAAAA,SCvGAzT,QAAAC,OAAA,gBACA6T,UAAA,uBAAA,aAAA,gBAAA,UAAA,SAAAzT,EAAAwB,EAAAC,GACA,OACAiS,SACA/S,YAAA,2CACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GAoBA,QAAAC,KACAvS,EAAAmB,cACAX,QAAA,SAAAC,GACA,GAAAA,EAAAW,SAAAG,eACA1B,EAAA2S,oBAAAC,EAAAhS,EAAAW,UACAsR,EAAAjS,EAAAW,aAGAR,MAAA,WACAf,EAAA2S,qBACAhG,MAAA,EACAtE,YAAA,sBACAC,IAAA,+CAmBA,QAAAsK,GAAArR,GAEA,MADAuR,SAAAC,IAAAC,KAAAC,UAAA1R,EAAA2R,mBACA3R,EAAAG,aACAH,EAAA2R,iBAOA3R,EAAA4R,cAAA,GAEAxG,MAAA,EACAtE,YAAA,sBACAC,IAAA,yKACA8K,iBAAA,GAEA7R,EAAA8R,UACA9R,EAAA8R,SAAA7H,UAAA,GAGAmB,MAAA,EACAtE,YAAA,sBACAC,IAAA,kGACA8K,iBAAA,IAYAzG,MAAA,EACAtE,YAAA,GACAC,IAAA,GACA8K,iBAAA,IAlCAzG,MAAA,EACAtE,YAAA,sBACAC,IAAA,0HACA8K,iBAAA,IAoCAzG,MAAA,EACAtE,YAAA,GACAC,IAAA,GACA8K,iBAAA,GAKA,QAAAP,GAAAtR,GAEAvB,EAAAsT,aAAA/R,KAEAzB,QAAAuG,SAAAC,KADAvG,UAAAwG,OACA,UAAAxG,UAAAmC,OAAA,IAAAnC,UAAAwG,OAAA,SAEA,UAAAxG,UAAAmC,OAAA,UA5GAlC,EAAA2S,qBACAhG,MAAA,EACAtE,YAAA,GACAC,IAAA,GACA8K,iBAAA,GAGApT,EAAAwQ,wBAAA,WACArQ,EAAAqQ,0BACA7P,QAAA,SAAAC,GACAjC,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAwS,GACA5U,EAAAsC,sBAAAsS,MAuBAb,IAEA1S,EAAAsT,aAAA,SAAA/R,GACA,MAAAA,IACAA,EAAAG,cAAAH,EAAA2R,kBAAA3R,EAAA4R,YAAA5R,EAAA8R,SAAA7H,QACA,GAKA,GAmEA7M,EAAAuC,IAAA,kBAAA,cAGAvC,EAAAuC,IAAA,YAAA,WACAwR,WAKAN,UAAA,mBAAA,aAAA,SAAAzT,GACA,OACAW,YAAA,oDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAAwT,iBACA7G,MAAA,EACAtE,YAAA,GACAC,IAAA,IAGA3J,EAAAuC,IAAA,kBAAA,SAAAgC,EAAAkF,GACApI,EAAAwT,gBAAApL,IAGAzJ,EAAAuC,IAAA,eAAA,WACAlB,EAAAwT,iBACA7G,MAAA,EACAtE,YAAA,GACAC,IAAA,WAMA8J,UAAA,iBAAA,aAAA,SAAAzT,GACA,OACAW,YAAA,mDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA+M,eACAJ,MAAA,EACAtE,YAAA,GACAC,IAAA,IAGA3J,EAAAuC,IAAA,gBAAA,SAAAgC,EAAAkF,GACApI,EAAA+M,cAAA3E,IAGAzJ,EAAAuC,IAAA,eAAA,WACAlB,EAAA+M,eACAJ,MAAA,EACAtE,YAAA,GACAC,IAAA,WAMA8J,UAAA,mBAAA,aAAA,SAAAzT,GACA,OACA2T,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACA9T,EAAAyH,UAAA,SAAAqN,EAAAtH,GACA,OAAAsH,GACA,IAAA,UACAC,OAAAC,QACAD,OAAA/S,QAAAwL,EACA,MACA,KAAA,UACAuH,OAAAC,QACAD,OAAAE,QAAAzH,EAAA,WACA0H,aAAA,EACAC,cAAA,GAEA,MACA,KAAA,QACAJ,OAAAC,QACAD,OAAA3S,MAAAoL,EAAA,SACA0H,aAAA,EACAC,cAAA,EACAC,SAAA,GAEA,MACA,SAEAL,OAAAC,UAIAhV,EAAAsF,YAAA,WACAyP,OAAAC,cAKAvB,UAAA,iBAAA,aAAA,SAAAzT,GACA,GAAAc,IAAA,SAAA,aAAA,gBAAA,SAAAO,EAAArB,EAAAqV,GAEArV,EAAAsV,WAAA,EACAtV,EAAAuV,oBAAA,EACAvV,EAAAwV,0BAAA,SAAAC,GACAzV,EAAAuV,oBAAAE,GAIAzV,EAAAyF,sBAAA,SAAAiQ,GACAA,GACA3J,EAAA,wBAAA4J,YAAA,UACA5J,EAAA,sBAAAG,SAAA,yBAEAH,EAAA,wBAAAG,SAAA,UACAH,EAAA,sBAAA4J,YAAA,yBAIA3V,EAAAuC,IAAA,wBAAA,SAAAgC,EAAAtC,GACAjC,EAAAuV,oBAAA,IAAAF,EAAAxI,WAGA7M,EAAAuC,IAAA,uBAAA,SAAAgC,EAAAtC,GACAjC,EAAAuV,oBAAA,IAAAF,EAAAxI,WAGA7M,EAAAuC,IAAA,0BAAA,SAAAgC,EAAAtC,GACAjC,EAAAuV,oBAAA,IAAAF,EAAAxI,WAGA7M,EAAA4V,cAAA,WACA5V,EAAAsV,WAAA,GAEAtV,EAAA6V,eAAA,WACA7V,EAAAsV,WAAA,GAGAtV,EAAAuC,IAAA,gBAAA,WACAvC,EAAAsV,WAAA,IAGAtV,EAAAuC,IAAA,iBAAA,WACAvC,EAAAsV,WAAA,KAIA,QACA3U,YAAA,kDACAgT,SAAA,KACA7S,WAAAA,MC3QAnB,QAAAC,OAAA,gBACA6T,UAAA,kBAAA,UAAA,SAAAhS,GACA,OACAqU,SAAA,yCACAnC,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA0U,aAAAtU,EAAA6N,mBACAjO,EAAA2U,OAAAvU,EAAA6N,iBAAA,WACAjO,EAAA0U,aAAAtU,EAAA6N,0BAKAmE,UAAA,sBAAA,UAAA,YAAA,aAAA,UAAA,SAAAtS,EAAAC,EAAApB,EAAAyB,GACA,OACAd,YAAA,wDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAAiH,iBACAC,YAAA,GACAC,qBAAA,GACAC,cAAA,GAGApH,EAAA4U,cAAA,WAGA5U,EAAAiH,gBAAAC,YADA,eAAAvI,EAAAC,OAAAgH,QAAAlC,KACA/E,EAAAE,aAAAqI,YAAAvI,EAAAE,aAAAqI,YAAA,GACAvI,EAAAsE,aAAAY,OAAA,GACAlF,EAAAsE,aAAAtE,EAAAsE,aAAAY,OAAA,GAAA4H,eAAA,UAEA9M,EAAAsE,aAAAtE,EAAAsE,aAAAY,OAAA,GAAA,OAAAqD,YAKA,IAIAlH,EAAA4U,gBAEA5U,EAAA6U,kBAAA,WACA7U,EAAAiH,gBAAAC,YAAArD,OAAA,IAEA/D,EAAAuG,SAAAC,KADAvG,EAAAwG,OACA,UAAAxG,EAAAmC,OAAA,IAAAnC,EAAAwG,OAAA,mBAAAvG,EAAAiH,gBAAAC,YAAA,KAEA,UAAAnH,EAAAmC,OAAA,mBAAAlC,EAAAiH,gBAAAC,YAAA,YAOAkL,UAAA,UAAA,aAAA,gBAAA,SAAAzT,EAAAwC,GACA,OAEA7B,YAAA,0CACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA2Q,aAAA,WACAxP,EAAAwP,eACAhQ,QAAA,SAAAC,GACAjC,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,WAMAsQ,UAAA,cAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,SAAA1S,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OACAhB,YAAA,6CACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GAuBA,QAAAqC,KACA9U,EAAAmE,oBACA7D,EAAAsO,mBAAAjQ,EAAAE,aAAAwI,YAAA,GACA1G,QAAA,SAAAC,GAGA,GAAA,GAAAA,EAAAgH,WAAA/D,OAAA,CAGA7D,EAAAuK,MAAAjK,EAAAuO,eAEA,IAAAkG,IACA3M,QAAA,EACAC,YAAA,wCACAC,IAAA,wBAEA3J,GAAAsC,sBAAA8T,GACA/U,EAAA0H,wBAAA,EACA1H,EAAAyF,yBACAzF,EAAAqC,cAEArC,GAAAuK,MAAAjK,EAAAuO,YAAAjO,EAAAgH,YACA5H,EAAAgV,mBACApU,EAAA4N,aACAxO,EAAAwO,WAAA5N,EAAA4N,WACAxO,EAAA2E,uBAAA3E,EAAAwO,aAEAxO,EAAAsE,iBAGAvD,MAAA,SAAAC,GACArC,EAAAsC,sBAAAD,GAEAhB,EAAAuK,MAAAjK,EAAAuO,gBACA7O,EAAA0H,wBAAA,EACA1H,EAAAyF,2BAzDAzF,EAAAsE,eACAlE,EAAA8N,uBAEAlO,EAAAuK,MAAAjK,EAAAoO,kBACA1O,EAAAwO,WAAAlO,EAAAqO,uBACA3O,EAAA0I,eAAApI,EAAAkP,oBAGAxP,EAAA0H,wBAAA,EAEA1H,EAAAgV,iBAAA,WACAhV,EAAAqE,oBACArE,EAAA0H,wBAAA,EACA1H,EAAA0E,iBAGA1E,EAAAyF,uBAAA,WACAzF,EAAAqE,oBACArE,EAAA0H,wBAAA,EACA1H,EAAAwE,iBA0CAsQ,IAIAnW,EAAAuC,IAAA,UAAA,SAAAgC,EAAAyC,GAEA,GAAAhH,EAAAE,aAAAwI,aACArH,EAAAuK,MAAAjK,EAAA0O,cAAArJ,EAAAT,OAEAS,EAAA6I,aACAxO,EAAAwO,WAAA7I,EAAA6I,WACAxO,EAAA2E,uBAAA3E,EAAAwO,eAIA7P,EAAAuC,IAAA,YAAA,YACA,QAAAvC,EAAAC,OAAAgH,QAAAlC,MAAA,eAAA/E,EAAAC,OAAAgH,QAAAlC,OACAoR,WAMA1C,UAAA,kBAAA,aAAA,cAAA,SAAAzT,EAAA2B,GACA,OACAhB,YAAA,mDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GAcA,QAAAjD,KACAxP,EAAAmE,oBACA7D,EAAAmP,8BACA9O,QAAA,SAAAC,GACAA,EAAAgH,WAAA/D,OAAA,GACA7D,EAAA0I,eAAApI,EAAAoP,qBAAA9O,EAAAgH,YACA5H,EAAAqE,sBAGArE,EAAA0I,kBACA1I,EAAA2I,oBAAA,EACA3I,EAAAqC,UACArC,EAAAqE,uBAIAtD,MAAA,SAAAC,GACAhB,EAAAqC,UAEArC,EAAA0I,eAAApI,EAAAoP,yBACA1P,EAAA2I,oBAAA,EACAhK,EAAAsC,sBAAAD,GACAhB,EAAAqE,sBAIArE,EAAAuE,eAvCAvE,EAAA0I,eAAApI,EAAAkP,oBAEAxP,EAAA2I,oBAAA,EACAhK,EAAA8F,uBAAA,SAAA4P,GACAA,GACArU,EAAA2I,oBAAA,EAEA6G,KAEAxP,EAAA2I,oBAAA,GAiCA6G,SAIA4C,UAAA,kBAAA,UAAA,YAAA,aAAA,UAAA,SAAAtS,EAAAC,EAAApB,EAAAyB,GACA,OAEAd,YAAA,yCACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAAiV,YAAA,EACAtW,EAAA2F,aAAA,SAAA+P,GAEArU,EAAAiV,WADAZ,GACA,GAEA,GAGA1V,EAAA4F,aAAA,WACAvE,EAAAiV,YAAA,GAEAjV,EAAAkV,cAAA,EACAlV,EAAAmV,SAAA,EACAnV,EAAAoV,aAAA,GACApV,EAAAqV,iBAAA,EACA1W,EAAAgG,uBAAA,SAAAC,GACA5E,EAAAqV,iBAAAzQ,GAGA5E,EAAAsV,YAAA3W,EAAAE,aAAAwI,WACA1I,EAAAuC,IAAA,sBAAA,SAAAgC,EAAAC,EAAAC,EAAAC,EAAAC;AAEAD,EAAAK,MAAAP,EAAAO,MACA,QAAA/E,EAAAC,OAAAgH,QAAAlC,OACA1D,EAAAsV,YAAA3W,EAAAE,aAAAwI,cAKArH,EAAAuV,SAAA,WAEAzC,QAAAC,IAAA/S,EAAAsV,aACA,QAAA3W,EAAAC,OAAAgH,QAAAlC,KACA/E,EAAAC,OAAA4W,GAAA,eAAAnO,WAAArH,EAAAsV,cAEA3W,EAAAC,OAAA4W,GAAA7W,EAAAC,OAAAgH,QAAAlC,MAAA2D,WAAArH,EAAAsV,cAEAtV,EAAAqC,gBAKA+P,UAAA,aAAA,UAAA,SAAAhS,GACA,OACAd,YAAA,8CACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,SAIAL,UAAA,cAAA,UAAA,SAAAhS,GACA,OACAd,YAAA,+CACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,SChRAnU,QAAAC,OAAA,gBACA6T,UAAA,oBAAA,UAAA,aAAA,UAAA,cAAA,SAAAzS,EAAAhB,EAAAyB,EAAAE,GACA,OACAhB,YAAA,4CACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAAiP,SAAA,EACAjP,EAAAyV,YAAA,WACAzV,EAAAiP,SAAA,GAEAtQ,EAAA8W,YAAA,WACAzV,EAAAyV,eAEAzV,EAAA0V,YAAA,WACA1V,EAAAiP,SAAA,GAEAtQ,EAAA+W,YAAA,WACA1V,EAAA0V,eAGA1V,EAAA2V,cACAtQ,YAAA,GACAuB,YAAA,GACAC,YAAA,GACAC,aAKA9G,EAAA4V,aAAA,SAAAlP,GACAoM,QAAAC,IAAArM,EACA,IAAAC,GAAA,CAmBA,OAlBAhH,GAAA,uBAAAK,EAAA2V,aAAAtQ,YAAAqB,IACAC,IAEA,GAAAA,IACAhH,EAAA,uBAAAK,EAAA2V,aAAA/O,YAAAF,IACAC,KAGA,GAAAA,IACAhH,EAAA,uBAAAK,EAAA2V,aAAA9O,YAAAH,IACAC,KAGA,GAAAA,IACAhH,EAAA,oBAAAK,EAAA2V,aAAA7O,SAAAJ,IACAC,KAGA,GAAAA,GAGA3G,EAAA4P,cAAA,WACA,GAAA5P,EAAA4V,cAAA,GAAA,CACA,GAAA3G,IACA5J,YAAArF,EAAA2V,aAAAtQ,YACAuB,YAAA5G,EAAA2V,aAAA/O,YACAC,YAAA7G,EAAA2V,aAAA9O,YACAC,SAAA9G,EAAA2V,aAAA7O,SAEAxG,GAAAsP,cAAAX,GACAtO,QAAA,SAAAC,GACAZ,EAAA0V,cACA/W,EAAAsC,sBAAAL,GACAZ,EAAA2V,aAAAtQ,YAAA,GACArF,EAAA2V,aAAA/O,YAAA,GACA5G,EAAA2V,aAAA9O,YAAA,GACA7G,EAAA2V,aAAA7O,cAEA/F,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,YCvEAxD,QAAAC,OAAA,gBACA6T,UAAA,mBAAA,UAAA,SAAAzS,GACA,OACA8U,SAAA,0HAGAnC,SAAA,KACAD,OACAhN,YAAA,UAEAkN,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA6V,SAAA,WACA,OAAAlW,EAAA,uBAAAK,EAAAqF,mBAKA+M,UAAA,mBAAA,UAAA,SAAAzS,GACA,OACA8U,SAAA,0HAGAnC,SAAA,KACAD,OACAzL,YAAA,UAEA2L,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA6V,SAAA,WACA,OAAAlW,EAAA,uBAAAK,EAAA4G,mBAKAwL,UAAA,mBAAA,UAAA,SAAAzS,GACA,OACA8U,SAAA,0HAGAnC,SAAA,KACAD,OACAxL,YAAA,UAEA0L,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA6V,SAAA,WACA,OAAAlW,EAAA,uBAAAK,EAAA6G,mBAKAuL,UAAA,eAAA,UAAA,SAAAzS,GACA,OACA8U,SAAA,oHAGAnC,SAAA,KACAD,OACAvL,SAAA,UAEAyL,KAAA,SAAAvS,EAAAwS,EAAAC,GACAzS,EAAA6V,SAAA,WACA,OAAAlW,EAAA,oBAAAK,EAAA8G,gBC5DAxI,QAAAC,OAAA,gBACA6T,UAAA,eAAA,UAAA,aAAA,UAAA,cAAA,SAAAzS,EAAAhB,EAAAyB,EAAAE,GACA,OACAhB,YAAA,gDACA+S,OACAzL,YAAA,UAEA0L,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,SAIAL,UAAA,eAAA,UAAA,aAAA,UAAA,cAAA,SAAAzS,EAAAhB,EAAAyB,EAAAE,GACA,OACAhB,YAAA,gDACA+S,OACAxL,YAAA,UAEAyL,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,SAIAL,UAAA,YAAA,UAAA,aAAA,UAAA,cAAA,SAAAzS,EAAAhB,EAAAyB,EAAAE,GACA,OACAhB,YAAA,6CACA+S,OACAvL,SAAA,UAEAwL,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,SC9BAnU,QAAAC,OAAA,gBACA6T,UAAA,cAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,SAAA1S,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAwI,GACA,OACAvJ,YAAA,qDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GAOA,QAAApB,KACAxI,EAAAyI,0BACA3Q,QAAA,SAAAC,GACAZ,EAAA6Q,WAAAhI,EAAA0I,iBAAA3Q,EAAAwQ,YACAzS,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,KAZA9B,EAAA8V,iBACAC,aAAA,IAEA/V,EAAA6Q,WAAAhI,EAAAwI,gBAaAA,IAEA1S,EAAAuC,IAAA,cAAA,WACAmQ,MAGA1S,EAAAuC,IAAA,YAAA,mBC7BA5C,QAAAC,OAAA,gBACA6T,UAAA,YAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,SAAA1S,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAwI,GACA,OACAvJ,YAAA,mDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GASA,QAAAxB,KACApI,EAAAqI,wBACAvQ,QAAA,SAAAC,GACAZ,EAAA4Q,SAAA/H,EAAAsI,eAAAvQ,EAAAwQ,YACAzS,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,KAbA9B,EAAAgW,eACAD,aAAA,IAGA/V,EAAA4Q,SAAA/H,EAAAoI,cAaAA,IAEAtS,EAAAuC,IAAA,cAAA,WACA+P,MAGAtS,EAAAuC,IAAA,YAAA,mBC/BA5C,QAAAC,OAAA,gBACA6T,UAAA,eAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,SAAA1S,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAwI,GACA,OACAvJ,YAAA,sDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GASA,QAAAd,KACA9I,EAAA+I,2BACAjR,QAAA,SAAAC,GACAZ,EAAA+Q,YAAAlI,EAAAgJ,kBAAAjR,EAAAwQ,YACAzS,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,KAbA9B,EAAAiW,kBACAF,aAAA,IAGA/V,EAAA+Q,YAAAlI,EAAA8I,iBAaAA,IAEAhT,EAAAuC,IAAA,cAAA,WACAyQ,MAGAhT,EAAAuC,IAAA,YAAA,mBC/BA5C,QAAAC,OAAA,gBACA6T,UAAA,mBAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,SAAA1S,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAwI,GACA,OACAvJ,YAAA,0DACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GAOA,QAAAjB,KACA3I,EAAA4I,gCACA9Q,QAAA,SAAAC,GACAZ,EAAA8Q,iBAAAjI,EAAA6I,uBAAA9Q,EAAAwQ,YACAzS,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,KAZA9B,EAAAkW,uBACAH,aAAA,IAEA/V,EAAA8Q,iBAAAjI,EAAA2I,sBAaAA,IAEA7S,EAAAuC,IAAA,cAAA,WACAsQ,MAGA7S,EAAAuC,IAAA,YAAA,mBC7BA5C,QAAAC,OAAA,gBACA6T,UAAA,eAAA,UAAA,aAAA,cAAA,SAAAzS,EAAAhB,EAAAkK,GACA,OACAvJ,YAAA,sDACAgT,SAAA,KACAD,OACA8D,KAAA,KAEA5D,KAAA,SAAAvS,EAAAwS,EAAAC,GAGAzS,EAAAoW,aAAA,EAGApW,EAAA8R,mBAAA,SAAAC,GACAlJ,EAAAiJ,mBAAAC,GACApR,QAAA,SAAAC,GACAjC,EAAAoE,WAAA,eACApE,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,MAIA9B,EAAAgS,sBAAA,SAAAD,GACAlJ,EAAAmJ,sBAAAD,GACApR,QAAA,SAAAC,GACAjC,EAAAoE,WAAA,eACApE,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,MAIA9B,EAAAiS,YAAA,SAAAF,GACAlJ,EAAAoJ,YAAAF,GACApR,QAAA,SAAAC,GACAjC,EAAAoE,WAAA,eACApE,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,MAIA9B,EAAAkS,QAAA,SAAAH,GACAlJ,EAAAqJ,QAAAH,GACApR,QAAA,SAAAC,GACAjC,EAAAoE,WAAA,eACApE,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,MAIA9B,EAAAmS,UAAA,SAAAJ,GACAlJ,EAAAsJ,UAAAJ,GACApR,QAAA,SAAAC,GACAjC,EAAAoE,WAAA,eACApE,EAAAsC,sBAAAL,KAEAG,MAAA,SAAAe,GACAnD,EAAAsC,sBAAAa,WCjEAxD,QAAAC,OAAA,gBACA6T,UAAA,cAAA,KAAA,UAAA,OAAA,YAAA,UAAA,YAAA,aAAA,SAAA,cAAA,gBAAA,UAAA,SAAA,cAAA,SAAA1S,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAwI,GACA,OACAvJ,YAAA,yDACAgT,SAAA,KACAC,KAAA,SAAAvS,EAAAwS,EAAAC,GACA9T,EAAAuC,IAAA,cAAA","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService, fN) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //=====================time functions=======================\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //this important function broadcasts the availability of the users data to directives that require\n            //it e.g. the account status directive\n            $scope.broadcastUserData = function () {\n                $rootScope.$broadcast('userDataChanges');\n            };\n\n            $scope.clientIsRegistered = false;\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.broadcastUserData();\n                        $scope.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            $rootScope.clearBanners = function () {\n                $rootScope.$broadcast('clearBanners');\n            };\n\n            //loading banner\n            $scope.showLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(true);\n                }\n            };\n\n            $scope.hideLoadingBanner = function () {\n                if ($rootScope.showHideLoadingBanner) {\n                    $rootScope.showHideLoadingBanner(false);\n                }\n            };\n\n            //pager\n            $scope.showThePager = function () {\n                if ($rootScope.showThePager) {\n                    $rootScope.showThePager();\n                }\n            };\n\n            $scope.hideThePager = function () {\n                if ($rootScope.hideThePager) {\n                    $rootScope.hideThePager();\n                }\n            };\n\n            //suggestedPosts\n            $scope.showSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(true);\n                }\n            };\n\n            $scope.hideSuggested = function () {\n                if ($rootScope.showHideSuggestedPosts) {\n                    $rootScope.showHideSuggestedPosts(false);\n                }\n            };\n\n            //total posts count\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                if ($rootScope.changePagingTotalCount) {\n                    $rootScope.changePagingTotalCount(newTotalCount);\n                }\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.post = PostService.getCurrentPost();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            $scope.postIsLoaded = false;\n\n            function getFullPost() {\n                $scope.showLoadingBanner();\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.post = PostService.updatePost(resp.thePost);\n                            globals.changeDocumentTitle($scope.post.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showThePostOnly();\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.hideThePager();\n\n                        } else {\n                            //empty the post\n                            $scope.post = PostService.updatePost({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = PostService.updatePost({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullPost();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                    $scope.post = PostService.updatePost(data.post);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$rootScope.isEditingPost) {\n                    if ($rootScope.$state.current.name == 'home.post') {\n                        getFullPost();\n                    }\n                }\n            });\n        }\n    ])\n    .controller('EditPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams, fN) {\n            //hide paging\n            $scope.hideThePager();\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showEditPost = false;\n\n            $scope.showTheEditPostOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showEditPost = false;\n                $scope.showSuggested();\n            };\n\n            function getFullEditPostModel() {\n                $scope.showLoadingBanner();\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                            //check that there is a post first before starting disqus and other attributes\n                            $scope.showTheEditPostOnly();\n                            $scope.hideThePager();\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                            $scope.showEditPost = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        $scope.showEditPost = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, fN) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = true;\n                $scope.hideSuggested();\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.hideLoadingBanner();\n                $scope.showMainSearchResults = false;\n                $scope.showSuggested();\n            };\n\n            function getMainSearchResults() {\n                $scope.showLoadingBanner();\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n                            $scope.showMainSearchResultsOnly();\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic1);\n                            $scope.showThePager();\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            $scope.showSuggestedPostsOnly();\n                            $scope.goToTop();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                        $scope.showMainSearchResults = false;\n                        $scope.showSuggestedPostsOnly();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'UserService', '$document', 'fN',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, UserService, $document) {\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", ['$filter', function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", ['$filter', function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePosts')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var posts = [];\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray) {\n                    if (postsArray == []) {\n                        posts = [];\n                    } else {\n                        posts = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts;\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    posts.unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function () {\n                    return post;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post = $filter('preparePosts')(newPost, null);\n                    }\n                    return post;\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePosts')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function () {\n                    return $http.post('/resendConfirmationEmail');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http', '$window', '$rootScope', '$interval', 'socket',\n        function ($filter, $http, $window, $rootScope, $interval, socket) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', 'globals', function ($rootScope, socketService, globals) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function () {\n                    socketService.resendConfirmationEmail()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    console.log(JSON.stringify(userData.emailIsConfirmed));\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('postStream', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showThePager();\n                globals.defaultDocumentTitle();\n\n                $scope.posts = PostService.getCurrentPosts();\n                $scope.postsCount = PostService.getCurrentPostsCount();\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                //variable that determines whether to show posts/suggested posts or not\n                $scope.mainSearchResultsPosts = false;\n\n                $scope.showThePostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = true;\n                    $scope.hideSuggested();\n                };\n\n                $scope.showSuggestedPostsOnly = function () {\n                    $scope.hideLoadingBanner();\n                    $scope.mainSearchResultsPosts = false;\n                    $scope.showSuggested();\n                };\n\n                function getPagePosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getPostsFromServer($rootScope.$stateParams.pageNumber || 1)\n                        .success(function (resp) {\n                            //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                            //used if the user is accessing a page that is beyond the number of posts\n                            if (resp.postsArray.length == 0) {\n\n                                //empty the postsArray\n                                $scope.posts = PostService.updatePosts([]);\n\n                                var responseMimic = {\n                                    banner: true,\n                                    bannerClass: 'alert alert-dismissible alert-success',\n                                    msg: \"No more posts to show\"\n                                };\n                                $rootScope.responseStatusHandler(responseMimic);\n                                $scope.mainSearchResultsPosts = false;\n                                $scope.showSuggestedPostsOnly();\n                                $scope.goToTop();\n                            } else {\n                                $scope.posts = PostService.updatePosts(resp.postsArray);\n                                $scope.showThePostsOnly();\n                                if (resp.postsCount) {\n                                    $scope.postsCount = resp.postsCount;\n                                    $scope.changePagingTotalCount($scope.postsCount);\n                                }\n                                $scope.showThePager();\n                            }\n                        })\n                        .error(function (errResp) {\n                            $rootScope.responseStatusHandler(errResp);\n                            //empty the postsArray\n                            $scope.posts = PostService.updatePosts([]);\n                            $scope.mainSearchResultsPosts = false;\n                            $scope.showSuggestedPostsOnly();\n                        });\n                }\n\n                getPagePosts();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    //newPost goes to page 1, so update only if the page is 1\n                    if ($rootScope.$stateParams.pageNumber == 1) {\n                        $scope.posts = PostService.addNewToPosts(data.post);\n                    }\n                    if (data.postsCount) {\n                        $scope.postsCount = data.postsCount;\n                        $scope.changePagingTotalCount($scope.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        getPagePosts();\n                    }\n                });\n            }\n        }\n    }])\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n\n                $scope.showSuggestedPosts = false;\n                $rootScope.showHideSuggestedPosts = function (bool) {\n                    if (bool) {\n                        $scope.showSuggestedPosts = true;\n                        //get new suggested posts\n                        getSuggestedPosts();\n                    } else {\n                        $scope.showSuggestedPosts = false;\n                    }\n                };\n\n                function getSuggestedPosts() {\n                    $scope.showLoadingBanner();\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                                $scope.hideLoadingBanner();\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                                $scope.showSuggestedPosts = false;\n                                $scope.goToTop();\n                                $scope.hideLoadingBanner();\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            $scope.goToTop();\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $scope.showSuggestedPosts = false;\n                            $rootScope.responseStatusHandler(errResp);\n                            $scope.hideLoadingBanner();\n                        });\n\n                    //whatever happens, hide the pager\n                    $scope.hideThePager();\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }])\n    .directive('pagerDirective', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n\n            templateUrl: 'views/admin/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.showPaging = false;\n                $rootScope.showThePager = function (bool) {\n                    if (bool) {\n                        $scope.showPaging = true;\n                    } else {\n                        $scope.showPaging = true;\n                    }\n                };\n                $rootScope.hideThePager = function () {\n                    $scope.showPaging = false;\n                };\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $rootScope.changePagingTotalCount = function (newTotalCount) {\n                    $scope.pagingTotalCount = newTotalCount;\n                };\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    console.log($scope.currentPage);\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                    $scope.goToTop();\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('mainFooter', ['globals', function (globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPost = false;\n                $scope.showNewPost = function () {\n                    $scope.newPost = true;\n                };\n                $rootScope.showNewPost = function () {\n                    $scope.showNewPost();\n                };\n                $scope.hideNewPost = function () {\n                    $scope.newPost = false;\n                };\n                $rootScope.hideNewPost = function () {\n                    $scope.hideNewPost();\n                };\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $scope.hideNewPost();\n                                $rootScope.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.responseStatusHandler(errResponse);\n                            })\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', ['$filter', '$rootScope', 'globals', 'PostService', function ($filter, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('userDisplay', ['$filter', '$rootScope', 'UserService', function ($filter, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'UserService', function ($q, $filter, $log, $interval, $window, $location, $rootScope, socket, mainService, socketService, globals, $modal, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}