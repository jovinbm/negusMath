{"version":3,"sources":["adminHomeApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/uploadService.js","services/userService.js","filters/filters.js","filters/postFormFilters.js","adirectives/home/bannerDir.js","adirectives/home/fullPostDir.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStreamDir.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/universalSearchBoxDir.js","adirectives/home/uploaderDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$log","$scope","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","error","errResp","main","responseStatusHandler","$on","$filter","$interval","$window","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","currentHost","getLocationHost","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","moment","format","updateCurrentTime","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearToasts","isEditingPost","PostService","fN","getFullEditPostModel","getCurrentEditPostModelFromServer","postIndex","calcObjectLength","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","postHeading","getCurrentEditPostModel","cancelPostUpdate","showToast","location","href","port","postPath","validateEditForm","notify","errors","postContent","postSummary","postTags","submitPostUpdate","getMainSearchResults","pageNumber","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","searchUniqueCuid","responseMimic1","banner","bannerClass","msg","responseMimic2","getAllMainSearchResults","showMore","current","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","factory","obj","len","prop","hasOwnProperty","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","post","hotThisWeekArray","info","done","allPosts","allPostsCount","mainSearchResultsPostsCount","suggestedPosts","getAllPosts","getPosts","getAllPostsCount","getPostsFromServer","page","updatePosts","updateAllPostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","logoutClient","Upload","uploadPostImage","fields","file","upload","uploadPdf","uploadZip","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","posts","makeResp","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","status","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","authorName","removePostTagsHighlight","makeBanner","show","redirect","redirectPage","type","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","directive","scope","restrict","link","$element","$attrs","getAccountDetails","theUser","accountStatusBanner","determineAccountStatus","checkAccountStatus","emailIsConfirmed","isApproved","showResendEmail","isBanned","checkAccount","err","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","newPostModel","validateForm","console","log","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","getCurrentPostsCount","newValue","oldValue","currentPage","goToPage","go","getCurrentMainSearchResultsCount","template","showSpan","getPagePosts","getFromServer","postsCount","updatePostsCount","defaultTitle","logoutService","validateContactUs","email","message","formStatus","fillSearchBox","performMainSearch","uploadService","progress","evt","uploading","percent","parseInt","loaded","total","headers","uploads","fileData","hideProgressBars","selectedFileType","isUploading","showUploading","files","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils',\n    'ngFileUpload'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.newPost', {\n                url: '/newPost',\n                templateUrl: 'views/admin/partials/views/new_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //website host\n            $rootScope.currentHost = globals.getLocationHost();\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService', 'fN',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService, fN) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getAllMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            function getMainSearchResults(pageNumber) {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: pageNumber\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults(theResult.postsArray, pageNumber);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts[pageNumber] = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults(1);\n\n            $scope.showMore = function (pageNumber) {\n                getMainSearchResults(pageNumber);\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                },\n\n                getLocationHost: function () {\n                    if ($location.port()) {\n                        return \"http://\" + $location.host() + \":\" + $location.port();\n                    } else {\n                        return \"http://\" + $location.host();\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var allPosts = {};\n            var allPostsCount = 0;\n            var mainSearchResultsPosts = {};\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = {};\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getAllPosts: function () {\n                    return allPosts;\n                },\n\n                getPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return allPosts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getAllPostsCount: function () {\n                    return allPostsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        allPosts[pageNumber] = [];\n                    } else {\n                        allPosts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return allPosts[pageNumber];\n                },\n\n                updateAllPostsCount: function (newCount) {\n                    allPostsCount = newCount;\n                    return allPostsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    allPosts['1'].unshift(tempPost);\n                    return allPosts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getAllMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getMainSearchResultsCount: function (pageNumber) {\n                    return mainSearchResultsPostsCount[pageNumber];\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray, pageNumber) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts[pageNumber] = [];\n                    } else {\n                        mainSearchResultsPosts[pageNumber] = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts[pageNumber];\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                //admin actions\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('uploadService', ['$q', '$location', 'Upload', 'globals',\n        function ($q, $location, Upload, globals) {\n            return {\n                uploadPostImage: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadPdf: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPdf',\n                        fields: fields,\n                        file: file\n                    });\n                },\n\n                uploadZip: function (fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadZip',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', '$location', '$window', function ($rootScope, socketService, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', 'fN', function ($q, $log, $rootScope, globals, PostService, fN) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.post = PostService.getCurrentPost($rootScope.$stateParams.postIndex);\n                $rootScope.main.goToTop();\n\n                $scope.postIsLoaded = false;\n\n                function getFullPost() {\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (fN.calcObjectLength(resp.thePost) != 0) {\n                                $scope.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.post = PostService.updatePost({});\n                            }\n\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.post = PostService.updatePost({});\n                        });\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    //only update the post variable if the user is not editing the current post\n                    if (!$rootScope.isEditingPost) {\n                        if ($rootScope.$state.current.name == 'home.post') {\n                            getFullPost();\n                        }\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $rootScope.main.goToTop();\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    } else {\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/general/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/general/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.allPosts = PostService.getAllPosts();\n                $rootScope.main.goToTop();\n                $scope.allPostsCount = PostService.getAllPostsCount();\n\n                function getPagePosts(pageNumber) {\n                    //check if we have the posts cached, if so return them\n                    if ($scope.allPosts.hasOwnProperty(pageNumber)) {\n                        if ($scope.allPosts[pageNumber].length > 0) {\n                        } else {\n                            getFromServer(pageNumber);\n                        }\n                    } else {\n                        getFromServer(pageNumber);\n                    }\n\n                    function getFromServer(pageNumber) {\n                        PostService.getPostsFromServer(pageNumber)\n                            .success(function (resp) {\n                                //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                                //used if the user is accessing a page that is beyond the number of posts\n                                if (resp.postsArray.length > 0) {\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts(resp.postsArray, pageNumber);\n                                    if (resp.postsCount) {\n                                        $scope.allPostsCount = PostService.updateAllPostsCount(resp.postsCount);\n                                    }\n                                } else {\n                                    //empty the postsArray\n                                    $scope.allPosts[pageNumber] = PostService.updatePosts([]);\n\n                                    //var responseMimic = {\n                                    //    banner: true,\n                                    //    bannerClass: 'alert alert-dismissible alert-success',\n                                    //    msg: \"No more posts to show\"\n                                    //};\n                                    //$rootScope.main.responseStatusHandler(responseMimic);\n                                }\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.allPosts[pageNumber] = PostService.updatePosts([]);\n                            });\n                    }\n                }\n\n                $scope.showMore = function (pageNumber) {\n                    getPagePosts(pageNumber);\n                };\n                getPagePosts(1);\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.allPostsCount = PostService.updatePostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        //getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('uploaderDirective', ['$rootScope', 'uploadService', function ($rootScope, uploadService) {\n        return {\n\n            templateUrl: 'views/general/smalls/simple_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploads = [];\n                $scope.uploading = {\n                    show: false,\n                    percent: 0\n                };\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                };\n\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadService.uploadPostImage(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadPdf(fields, file) {\n                    uploadService.uploadPdf(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n\n                function uploadZip(fields, file) {\n                    uploadService.uploadZip(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.uploads.push(data.fileData);\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', function ($rootScope, UserService, socketService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', function ($q, $log, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}