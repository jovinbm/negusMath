{"version":3,"sources":["adminHomeApp.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","controllers/userManagerCtrl.js","filters/filters.js","filters/postFormFilters.js","services/functions.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js","services/userService.js","adirectives/home/bannerDir.js","adirectives/home/fullPostDir.js","adirectives/home/newPostDir.js","adirectives/home/pagingDir.js","adirectives/home/postMessages.js","adirectives/home/postStreamDir.js","adirectives/home/postViewDir.js","adirectives/home/simpleComponentsDir.js","adirectives/home/suggestedPostsDir.js","adirectives/home/universalSearchBoxDir.js","adirectives/users/adminUsersDir.js","adirectives/users/allUsersDir.js","adirectives/users/bannedUsersDir.js","adirectives/users/unApprovedUsers.js","adirectives/users/user_display.js","adirectives/users/usersCountDir.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","controller","$q","$log","$scope","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","error","errResp","main","responseStatusHandler","$on","$filter","$interval","$window","$location","socket","socketService","globals","$document","initialRequests","getUserData","userData","broadcastUserData","clientIsRegistered","isRegistered","emit","room","uniqueCuid","errResponse","indexPageUrl","allData","showDisqus","host","search","duration","currentTime","showLoadingBannerDir","showLoadingBanner","this","hideLoadingBanner","goToTop","someElement","element","document","getElementById","scrollToElement","$broadcast","clearBanners","moment","format","updateCurrentTime","history","stateHistory","event","toState","toParams","fromState","fromParams","push","$$path","temp","name","back","prevUrl","length","splice","path","clearToasts","isEditingPost","PostService","fN","getFullEditPostModel","getCurrentEditPostModelFromServer","postIndex","calcObjectLength","thePost","editPostModel","updateCurrentEditPostModel","changeDocumentTitle","postHeading","getCurrentEditPostModel","cancelPostUpdate","showToast","location","href","port","postPath","validateEditForm","notify","errors","postContent","postSummary","postTags","submitPostUpdate","getMainSearchResults","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","pageNumber","mainSearch","results","totalResults","theResult","mainSearchResultsPosts","updateMainSearchResults","postsArray","mainSearchResultsCount","updateMainSearchResultsCount","changeCurrentPage","page","searchUniqueCuid","responseMimic1","banner","bannerClass","msg","responseMimic2","getCurrentMainSearchResults","checkIfPostsSearchResultsIsEmpty","current","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","post","posts","makeResp","theElement","$","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","html","forEach","index","textString","theElementString","highlight","checkSearchState","status","hasOwnProperty","highLightThisText","textToHighlight","finalString","highlightDetails","theElement2","removeHighlight","theElement3","highlightPostTags","tag","text","prepare","timeAgo","postDate","postAbsoluteUrl","authorName","removePostTagsHighlight","makeBanner","show","redirect","redirectPage","type","newPostBanner","registrationBanner","reason","warn","broadcast","broadcastShowToast","addMessage","newMessage","messages","postHeadingText","postContentText","postSummaryText","numberOfTags","factory","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","newDocumentTitle","on","hotThisWeekArray","info","done","postsCount","mainSearchResultsPostsCount","suggestedPosts","getCurrentPosts","getCurrentPostsCount","getPostsFromServer","updatePosts","updatePostsCount","newCount","addNewToPosts","newPost","makePost","theNewPost","tempPost","unshift","getCurrentPost","getPostFromServer","updatePost","getCurrentMainSearchResultsCount","searchObject","resultsArray","getSuggestedPosts","getSuggestedPostsFromServer","updateSuggestedPosts","suggestedPostsArray","submitNewPost","postUpdate","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","resendConfirmationEmail","userUniqueCuid","sendContactUs","contactUsModel","logoutClient","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","directive","scope","restrict","link","$element","$attrs","getAccountDetails","theUser","accountStatusBanner","determineAccountStatus","checkAccountStatus","emailIsConfirmed","isApproved","showResendEmail","isBanned","checkAccount","err","universalBanner","toastType","toastr","clear","warning","closeButton","tapToDismiss","timeOut","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","isLoadingTrue","isLoadingFalse","getFullPost","postIsLoaded","showNewPost","hideNewPost","newPostModel","validateForm","console","log","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","$watch","newValue","oldValue","currentPage","goToPage","go","template","showSpan","getPagePosts","responseMimic","defaultTitle","logoutService","validateContactUs","email","message","formStatus","fillSearchBox","performMainSearch","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","user","isCollapsed"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home/stream/\", '/home/stream/1')\n            .when(\"/home/post/\", '/home')\n            .when(\"/home/editPost/\", '/home')\n            .when(\"/home/search/\", '/home/')\n            .otherwise(\"/home\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: 'views/admin/partials/views/home.html'\n            })\n            .state('home.stream', {\n                url: '/stream/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('home.post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('home.editPost', {\n                url: '/editPost/:postIndex',\n                templateUrl: 'views/admin/partials/views/edit_post.html'\n            })\n            .state('home.search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: 'views/admin/partials/views/users.html'\n            })\n            .state(\"otherwise\", {url: '/home'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$log', '$scope', '$rootScope', 'HotService',\n        function ($q, $log, $scope, $rootScope, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                    })\n                    .error(function (errResp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek([]);\n                        $rootScope.main.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'socketService', 'globals', '$document',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, socketService, globals, $document) {\n\n            //index page url\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //disqus\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            $rootScope.main = {\n                currentTime: \"\",\n\n                clientIsRegistered: false,\n\n                showLoadingBannerDir: false,\n\n                showLoadingBanner: function () {\n                    this.showLoadingBannerDir = true;\n                },\n\n                hideLoadingBanner: function () {\n                    this.showLoadingBannerDir = false;\n                },\n\n                goToTop: function () {\n                    var someElement = angular.element(document.getElementById('top'));\n                    $document.scrollToElement(someElement, 80, duration);\n                },\n\n                broadcastUserData: function () {\n                    $rootScope.$broadcast('userDataChanges');\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                }\n            };\n\n            //=====================time functions=======================\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //======================end time functions===================\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $rootScope.main.broadcastUserData();\n                        $rootScope.main.clientIsRegistered = $scope.userData.isRegistered;\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //$scope functions to be used in other controllers and directives\n            //back navigation functionality\n            var history = [];\n            $rootScope.stateHistory = [];\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                history.push($location.$$path);\n                //push the previous state also\n                var temp = {};\n                temp[fromState.name] = fromParams;\n                $rootScope.stateHistory.push(temp);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.clearBanners();\n                $rootScope.clearToasts();\n\n                //variable to keep track of when the user is editing the post\n                $rootScope.isEditingPost = false;\n            });\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('EditPostController', ['$q', '$filter', '$log', '$window', '$location', '$scope', '$rootScope', 'globals', 'PostService', 'fN',\n        function ($q, $filter, $log, $window, $location, $scope, $rootScope, globals, PostService, fN) {\n\n            $rootScope.main.goToTop();\n\n            $scope.editPostModel = PostService.getCurrentEditPostModel();\n\n            function getFullEditPostModel() {\n                PostService.getCurrentEditPostModelFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (fN.calcObjectLength(resp.thePost) != 0) {\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel(resp.thePost);\n                            globals.changeDocumentTitle($scope.editPostModel.postHeading);\n                        } else {\n                            //empty the post\n                            $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.editPostModel = PostService.updateCurrentEditPostModel({});\n                    });\n            }\n\n            getFullEditPostModel();\n\n            $scope.cancelPostUpdate = function () {\n                $rootScope.showToast('success', 'Update cancelled');\n                if ($location.port()) {\n                    $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                } else {\n                    $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                }\n            };\n\n            $scope.validateEditForm = function (notify) {\n                var errors = 0;\n                if (!$filter(\"validatePostHeading\")($scope.editPostModel.postHeading, notify)) {\n                    errors++;\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostContent\")($scope.editPostModel.postContent, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostSummary\")($scope.editPostModel.postSummary, notify)) {\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (!$filter(\"validatePostTags\")($scope.editPostModel.postTags, notify)) {\n                        errors++;\n                    }\n                }\n                return errors == 0;\n            };\n\n            $scope.submitPostUpdate = function () {\n                if ($scope.validateEditForm(true)) {\n                    PostService.submitPostUpdate($scope.editPostModel)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            $rootScope.showToast('success', 'Saved');\n                            if ($location.port()) {\n                                $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + $scope.editPostModel.postPath;\n                            } else {\n                                $window.location.href = \"http://\" + $location.host() + $scope.editPostModel.postPath\n                            }\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$log', '$scope', '$rootScope', 'globals', 'PostService',\n        function ($q, $log, $scope, $rootScope, globals, PostService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            globals.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentMainSearchResults();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            function getMainSearchResults() {\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: $scope.mainSearchModel.postSearchUniqueCuid,\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        //the response is the resultValue\n                        if (resp.results.totalResults > 0) {\n                            var theResult = resp.results;\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults(theResult.postsArray);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(theResult.totalResults);\n                            $scope.changeCurrentPage(theResult.page);\n                            $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                            $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $rootScope.main.responseStatusHandler(responseMimic2);\n                        }\n                    })\n                    .error(function (errResp) {\n                        $rootScope.main.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = PostService.updateMainSearchResults([]);\n                        $scope.mainSearchResultsCount = PostService.updateMainSearchResultsCount(0);\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($rootScope.$state.current.name == 'home.search') {\n                    getMainSearchResults();\n                }\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $rootScope.main.goToTop();\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            }\n\n            getUsersCount();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('userChanges', function () {\n                getUsersCount();\n            });\n\n            $rootScope.$on('reconnect', function () {\n            });\n        }\n    ]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", [function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"getPostAbsoluteUrl\", [function () {\n        return function (postIndex) {\n            return 'http://www.negusmath.com/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"getPostPath\", [function () {\n        return function (postIndex) {\n            return '/#!/home/post/' + postIndex;\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", [function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postSummary) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postSummary + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postSummary = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"getVideoResponsiveVersion\", [function () {\n        //making embedded videos responsive\n        return function (textString) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(textString) {\n                //convert the element to string\n                theElement = $(\"<div>\" + textString + \"</div>\");\n\n                //find the video iframe elements\n                imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n                return theElement.html();\n            }\n\n            if (textString) {\n                return makeResp(textString)\n            } else {\n                return textString;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$rootScope', function ($rootScope) {\n        //making embedded videos responsive\n        //the highlight variable should be a boolean to make the function\n        //know if to highlight or not\n        //if false then the function will remove highlight\n        return function (theElementString, highlight) {\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'home.search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    //check if previous state was search and current state is post\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('home.search') && $rootScope.$state.current.name == 'home.post') {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['home.search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                if (highlight) {\n                    var finalString = textToHighlight;\n                    var highlightDetails = checkSearchState();\n                    if (highlightDetails.status === true) {\n                        //highlight\n                        var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement).highlight(highlightDetails.queryString);\n                        finalString = theElement.html();\n                    } else {\n                        //remove highlight\n                        var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                        $(theElement2).removeHighlight();\n                        finalString = theElement2.html();\n                    }\n                } else {\n                    //remove highlight\n                    var theElement3 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement3).removeHighlight();\n                    finalString = theElement3.html();\n                }\n\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"preparePosts\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function highlightPostTags(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, true);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, true);\n                post.authorName = $filter('highlightText')(post.authorName, true);\n                post.postSummary = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postSummary), true);\n                post.postContent = $filter('highlightText')($filter('getVideoResponsiveVersion')(post.postContent), true);\n                post.postTags = highlightPostTags(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"removeHighlights\", ['$filter', function ($filter) {\n        //making embedded videos responsive\n        return function (post, posts) {\n            function removePostTagsHighlight(postTags) {\n                postTags.forEach(function (tag, index) {\n                    postTags[index].text = $filter('highlightText')(tag.text, false);\n                });\n\n                return postTags;\n            }\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                post.postHeading = $filter('highlightText')(post.postHeading, false);\n                post.authorName = $filter('highlightText')(post.authorName, false);\n                post.postSummary = $filter('highlightText')(post.postSummary, false);\n                post.postContent = $filter('highlightText')(post.postContent, false);\n                post.postTags = removePostTagsHighlight(post.postTags);\n\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"preparePostsNoChange\", ['$filter', function ($filter) {\n        //does not change the post to make it responsive and does not highlight\n        return function (post, posts) {\n\n            function prepare(post) {\n                post.timeAgo = $filter('getTimeAgo')(post.createdAt);\n                post.postDate = $filter('getPostDate')(post.createdAt);\n                post.postAbsoluteUrl = $filter('getPostAbsoluteUrl')(post.postIndex);\n                post.postPath = $filter('getPostPath')(post.postIndex);\n                return post;\n            }\n\n            if (post) {\n                return prepare(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = prepare(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        //making embedded videos responsive\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);","angular.module('adminHomeApp')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('The is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 2000) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 2000 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 2000) {\n                    addMessage('The post summary cannot exceed 2000 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                return true;\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('adminHomeApp')\n\n    .factory('fN', [function () {\n        return {\n            calcObjectLength: function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            }\n        };\n    }]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$location',\n        function ($q, $location) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$filter', '$log', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $log, $http, $window, $rootScope, socket) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    if (hotThisWeekArray == []) {\n                        hotThisWeek = [];\n                    } else {\n                        hotThisWeek = $filter('preparePostsNoChange')(null, hotThisWeekArray);\n                    }\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket',\n        function ($log, $window, $rootScope, socket) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$filter', '$http', '$window', '$rootScope', 'socket',\n        function ($filter, $http, $window, $rootScope, socket) {\n\n            var post = {};\n            var editPostModel = {};\n            var posts = {};\n            var postsCount = 0;\n            var mainSearchResultsPosts = [];\n            var mainSearchResultsPostsCount = 0;\n            var suggestedPosts = [];\n            var suggestedPostsCount = 0;\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function (pageNumber) {\n                    if (pageNumber) {\n                        return posts[pageNumber];\n                    } else {\n                        return [];\n                    }\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                updatePosts: function (postsArray, pageNumber) {\n                    if (postsArray == []) {\n                        posts[pageNumber] = [];\n                    } else {\n                        posts[pageNumber] = $filter('preparePosts')(null, postsArray);\n                    }\n                    return posts[pageNumber];\n                },\n\n                updatePostsCount: function (newCount) {\n                    postsCount = newCount;\n                    return postsCount;\n                },\n\n                addNewToPosts: function (newPost) {\n                    function makePost(theNewPost) {\n                        if (newPost == {}) {\n                            theNewPost = {}\n                        } else {\n                            theNewPost = $filter('preparePosts')(theNewPost, null);\n                        }\n                        return theNewPost;\n                    }\n\n                    var tempPost = makePost(newPost);\n                    //unshift in firstPage\n                    posts['1'].unshift(tempPost);\n                    return posts;\n                },\n\n                getCurrentPost: function (postIndex) {\n                    if (postIndex) {\n                        return post[postIndex]\n                    } else {\n                        return {};\n                    }\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updatePost: function (newPost) {\n                    if (newPost == {}) {\n                        post = {}\n                    } else {\n                        post[newPost.postIndex] = $filter('preparePosts')(newPost, null);\n                    }\n                    return post[newPost.postIndex];\n                },\n\n                getCurrentEditPostModel: function () {\n                    if (editPostModel == {}) {\n                        return {}\n                    } else {\n                        return editPostModel;\n                    }\n                },\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                updateCurrentEditPostModel: function (newPost) {\n                    if (newPost == {}) {\n                        editPostModel = {}\n                    } else {\n                        editPostModel = $filter('preparePostsNoChange')(newPost, null);\n                    }\n                    return editPostModel;\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                getCurrentMainSearchResultsCount: function () {\n                    return mainSearchResultsPostsCount;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                },\n\n                updateMainSearchResults: function (resultsArray) {\n                    if (resultsArray == []) {\n                        mainSearchResultsPosts = [];\n                    } else {\n                        mainSearchResultsPosts = $filter('preparePosts')(null, resultsArray);\n                    }\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResultsCount: function (newCount) {\n                    mainSearchResultsPostsCount = newCount;\n                    return mainSearchResultsPostsCount;\n                },\n\n                getSuggestedPosts: function () {\n                    return suggestedPosts;\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updateSuggestedPosts: function (suggestedPostsArray) {\n                    if (suggestedPostsArray == []) {\n                        suggestedPosts = [];\n                    } else {\n                        suggestedPosts = $filter('preparePostsNoChange')(null, suggestedPostsArray);\n                    }\n                    return suggestedPosts;\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                resendConfirmationEmail: function (userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);","angular.module('adminHomeApp')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', '$location', '$window', function ($rootScope, socketService, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            $scope.theUser = resp.userData;\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                                checkAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                $scope.checkAccount = function (userData) {\n                    if (userData) {\n                        if (userData.isRegistered && userData.emailIsConfirmed && userData.isApproved && !userData.isBanned.status) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        return false;\n                    }\n                };\n\n                function determineAccountStatus(userData) {\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                function checkAccountStatus(userData) {\n                    //if account status is not okay, redirect user to index\n                    if (!($scope.checkAccount(userData))) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/index\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/index\";\n                        }\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('universalBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('newPostBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPostBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('newPostBanner', function (event, banner) {\n                    $scope.newPostBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.newPostBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = true;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/admin/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('fullPost', ['$q', '$log', '$rootScope', 'globals', 'PostService', 'fN', function ($q, $log, $rootScope, globals, PostService, fN) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_full.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.post = PostService.getCurrentPost($rootScope.$stateParams.postIndex);\n                $rootScope.main.goToTop();\n\n                $scope.postIsLoaded = false;\n\n                function getFullPost() {\n                    PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            if (fN.calcObjectLength(resp.thePost) != 0) {\n                                $scope.post = PostService.updatePost(resp.thePost);\n                                globals.changeDocumentTitle($scope.post.postHeading);\n\n                                //check first that this is a production env --> showDisqus before bootstrapping disqus\n                                if ($scope.showDisqus) {\n                                    $scope.postIsLoaded = true;\n                                }\n                            } else {\n                                //empty the post\n                                $scope.post = PostService.updatePost({});\n                            }\n\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.post = PostService.updatePost({});\n                        });\n                }\n\n                getFullPost();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('postUpdate', function (event, data) {\n                    if ($rootScope.$stateParams.postIndex == data.post.postIndex) {\n                        PostService.updatePost(data.post);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    //only update the post variable if the user is not editing the current post\n                    if (!$rootScope.isEditingPost) {\n                        if ($rootScope.$state.current.name == 'home.post') {\n                            getFullPost();\n                        }\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('newPostDirective', ['$filter', '$rootScope', 'PostService', function ($filter, $rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/new_post.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.newPost = false;\n                $scope.showNewPost = function () {\n                    $scope.newPost = true;\n                    $rootScope.main.goToTop();\n                };\n                $rootScope.showNewPost = function () {\n                    $scope.showNewPost();\n                };\n                $scope.hideNewPost = function () {\n                    $scope.newPost = false;\n                };\n                $rootScope.hideNewPost = function () {\n                    $scope.hideNewPost();\n                };\n\n                $scope.newPostModel = {\n                    postHeading: \"\",\n                    postContent: \"\",\n                    postSummary: \"\",\n                    postTags: []\n                };\n\n                //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                //broadcast takes a boolean value\n                $scope.validateForm = function (notify) {\n                    console.log(notify);\n                    var errors = 0;\n                    if (!$filter(\"validatePostHeading\")($scope.newPostModel.postHeading, notify)) {\n                        errors++;\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostContent\")($scope.newPostModel.postContent, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostSummary\")($scope.newPostModel.postSummary, notify)) {\n                            errors++;\n                        }\n                    }\n                    if (errors == 0) {\n                        if (!$filter(\"validatePostTags\")($scope.newPostModel.postTags, notify)) {\n                            errors++;\n                        }\n                    }\n                    return errors == 0;\n                };\n\n                $scope.submitNewPost = function () {\n                    if ($scope.validateForm(true)) {\n                        var newPost = {\n                            postHeading: $scope.newPostModel.postHeading,\n                            postContent: $scope.newPostModel.postContent,\n                            postSummary: $scope.newPostModel.postSummary,\n                            postTags: $scope.newPostModel.postTags\n                        };\n                        PostService.submitNewPost(newPost).\n                            success(function (resp) {\n                                $scope.hideNewPost();\n                                $rootScope.main.goToTop();\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.newPostModel.postHeading = \"\";\n                                $scope.newPostModel.postContent = \"\";\n                                $scope.newPostModel.postSummary = \"\";\n                                $scope.newPostModel.postTags = [];\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                                $rootScope.main.goToTop();\n                            })\n                    }else{\n                        $rootScope.main.goToTop();\n                    }\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStreamPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/admin/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentPostsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainSearchResultsPager', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n\n            templateUrl: 'views/admin/partials/smalls/pager.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.pagingMaxSize = 5;\n                $scope.numPages = 5;\n                $scope.itemsPerPage = 10;\n                $scope.pagingTotalCount = 1;\n                $scope.$watch(PostService.getCurrentMainSearchResultsCount, function (newValue, oldValue) {\n                    $scope.pagingTotalCount = newValue;\n                });\n\n                $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                    //refresh the currentPage if the user is going to a new state\n                    if (fromState.name != toState.name) {\n                        if ($rootScope.$state.current.name != 'home') {\n                            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                        }\n                    }\n                });\n\n                $scope.goToPage = function () {\n                    //go to the current state's new page\n                    if ($rootScope.$state.current.name == 'home') {\n                        $rootScope.$state.go('home.stream', {pageNumber: $scope.currentPage});\n                    } else {\n                        $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage})\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postStream', ['$q', '$log', '$rootScope', 'globals', 'PostService', function ($q, $log, $rootScope, globals, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_feed.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                globals.defaultDocumentTitle();\n\n                $scope.posts = PostService.getCurrentPosts($rootScope.$stateParams.pageNumber || 1);\n                $rootScope.main.goToTop();\n                $scope.postsCount = PostService.getCurrentPostsCount();\n\n                function getPagePosts() {\n                    PostService.getPostsFromServer($rootScope.$stateParams.pageNumber || 1)\n                        .success(function (resp) {\n                            //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                            //used if the user is accessing a page that is beyond the number of posts\n                            if (resp.postsArray.length > 0) {\n                                $scope.posts = PostService.updatePosts(resp.postsArray, $rootScope.$stateParams.pageNumber || 1);\n                                if (resp.postsCount) {\n                                    $scope.postsCount = PostService.updatePostsCount(resp.postsCount);\n                                }\n                            } else {\n                                //empty the postsArray\n                                $scope.posts = PostService.updatePosts([]);\n\n                                var responseMimic = {\n                                    banner: true,\n                                    bannerClass: 'alert alert-dismissible alert-success',\n                                    msg: \"No more posts to show\"\n                                };\n                                $rootScope.main.responseStatusHandler(responseMimic);\n                            }\n                        })\n                        .error(function (errResp) {\n                            $rootScope.main.responseStatusHandler(errResp);\n                            $scope.posts = PostService.updatePosts([]);\n                        });\n                }\n\n                getPagePosts();\n\n                //===============socket listeners===============\n\n                $rootScope.$on('newPost', function (event, data) {\n                    PostService.addNewToPosts(data.post);\n                    if (data.postsCount) {\n                        $scope.postsCount = PostService.updatePostsCount(data.postsCount);\n                    }\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    if ($rootScope.$state.current.name == 'home' || $rootScope.$state.current.name == 'home.stream') {\n                        getPagePosts();\n                    }\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postSummary', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_summary.html',\n            scope: {\n                postSummary: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }])\n    .directive('postTags', [function () {\n        return {\n            templateUrl: 'views/admin/partials/smalls/post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('titleDirective', ['globals', function (globals) {\n        return {\n            template: '<title ng-bind=\"defaultTitle\">' + '</title>',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.defaultTitle = globals.getDocumentTitle();\n                $scope.$watch(globals.getDocumentTitle, function () {\n                    $scope.defaultTitle = globals.getDocumentTitle();\n                });\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/admin/partials/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/general/smalls/contact_us.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }])\n    .directive('mainFooter', [function () {\n        return {\n            templateUrl: 'views/general/smalls/main_footer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('suggestedPosts', ['$rootScope', 'PostService', function ($rootScope, PostService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/suggested_posts.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.suggestedPosts = PostService.getSuggestedPosts();\n                $rootScope.main.goToTop();\n\n                function getSuggestedPosts() {\n                    PostService.getSuggestedPostsFromServer()\n                        .success(function (resp) {\n                            if ((resp.postsArray.length > 0)) {\n                                $scope.suggestedPosts = PostService.updateSuggestedPosts(resp.postsArray);\n                            } else {\n                                //empty the suggestedPosts\n                                $scope.suggestedPosts = [];\n                            }\n\n                        })\n                        .error(function (errResp) {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = PostService.updateSuggestedPosts([]);\n                            $rootScope.main.responseStatusHandler(errResp);\n                        });\n                }\n\n                getSuggestedPosts();\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'home.search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/home/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', function ($q, $log, $rootScope, UserService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('userDisplay', ['$rootScope', 'UserService', 'socketService', function ($rootScope, UserService, socketService) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    socketService.resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                        })\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('adminHomeApp')\n    .directive('usersCount', ['$q', '$log', '$rootScope', function ($q, $log, $rootScope) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/users/user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}