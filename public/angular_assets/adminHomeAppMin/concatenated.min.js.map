{"version":3,"sources":["adminHomeApp.js","filters.js","controllers/hotCtrl.js","controllers/mainCtrl.js","controllers/postCtrl.js","controllers/searchCtrl.js","services/globals.js","services/hotService.js","services/mainFactory.js","services/postService.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","$rootScope","$state","$stateParams","get","cache","config","$stateProvider","$urlRouterProvider","$locationProvider","when","otherwise","state","url","templateUrl","html5Mode","hashPrefix","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","socket","mainService","socketService","globals","$modal","PostService","HotService","getHotThisWeek","getHotThisWeekFromServer","success","resp","hotThisWeek","updateHotThisWeek","updateTimeAgo","error","errResp","responseStatusHandler","forEach","hot","theTimeAgo","createdAt","postDate","moment","format","$on","info","logoutService","$document","cfpLoadingBar","defaultDocumentTitle","document","title","changeDocumentTitle","newTitle","finishedLoading","$broadcast","showDisqus","host","search","refillHighLightText","current","name","queryString","highlightText","highlightThisText","textToHighlight","theElement","$","highlight","html","removeHighLightText","textString","removeHighlight","highLightPost","postObject","highLightReference","authorName","postHeading","postContent","postSummary","postTags","tag","text","removePostHighlights","stateChangeCounter","length","event","toState","toParams","fromState","fromParams","clearBanners","clearToasts","currentState","history","push","$$path","back","prevUrl","splice","path","calcObjectLength","obj","len","prop","hasOwnProperty","duration","goToTop","someElement","element","getElementById","scrollToElement","goToUniversalBanner","makeVideoIframesResponsive","theElementString","imgElement","imgWrappedInDiv","addClass","wrap","find","replaceWith","clientIsRegistered","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","showNewPostBanner","newPostBannerClass","newPostBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","showToast","banner","newPostBanner","registrationBanner","reason","warn","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","removeClass","status","isLoadingTrue","isLoadingFalse","toastr","clear","toastType","warning","closeButton","tapToDismiss","timeOut","data","currentTime","updateCurrentTime","getUserData","userData","isRegistered","emit","room","uniqueCuid","errResponse","on","console","log","mainSearchModel","postSearchUniqueCuid","requestedPage","fillSearchBox","performMainSearch","port","showPaging","showThePager","hideThePager","pagingMaxSize","numPages","itemsPerPage","pagingTotalCount","changePagingTotalCount","newTotalCount","currentPage","pageNumber","goToPage","go","newPost","showNewPost","hideNewPost","newPostModel","postHeadingIsLessMin","postContentIsEmpty","postSummaryIsEmpty","postSummaryHasExceededMaximum","checkIfPostHeadingLessMin","postHeadingText","checkIfPostContentIsEmpty","postContentText","checkIfPostSummaryIsEmpty","postSummaryText","checkPostSummaryMaxLength","maxLength","checkEditPostTags","errorPostTags","numberOfTags","submitNewPost","errors","logoutClient","preparePostSummaryContent","posts","post","getSuggestedPosts","suggestedPosts","getSuggestedPostsFromServer","prepareSuggestedPostsSummaryContent","postsArray","showSuggestedPostsOnly","showSuggestedPosts","getPagePosts","getPostsFromServer","responseMimic","mainSearchResultsPosts","updatePosts","showThePostsOnly","postsCount","getCurrentPosts","getCurrentPostsCount","checkIfPostsIsEmpty","unshift","getFullPost","getPostFromServer","postIndex","preparePostContent","thePost","showThePostOnly","addPostUrl","postIsLoaded","showPost","postUrl","editingMode","postBackup","goIntoPostEditingMode","goIntoFullPostViewMode","editPostHeadingLessMin","editPostContentIsEmpty","editPostSummaryIsEmpty","editPostSummaryHasExceededMaximum","checkIfEditPostHeadingLessMin","checkIfEditPostContentIsEmpty","checkIfEditPostSummaryIsEmpty","editPostSummaryText","checkEditPostSummaryMaxLength","submitPostUpdate","cancelPostUpdate","getMainSearchResults","mainSearch","theResult","results","updateMainSearchResults","mainSearchResultsCount","totalResults","changeCurrentPage","page","searchUniqueCuid","showMainSearchResultsOnly","responseMimic1","responseMimic2","showMainSearchResults","checkIfPostsSearchResultsIsEmpty","factory","hotThisWeekArray","done","postUpdate","getCurrentMainSearchResults","resultValue","searchObject","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","sendContactUs","contactUsModel"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('adminHomeApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'cfp.loadingBar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'textAngular',\n    'ngSanitize',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http, $rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n        //views\n        $http.get('views/admin/partials/views/post_stream.html', {cache: $templateCache});\n        $http.get('views/admin/partials/views/full_post.html', {cache: $templateCache});\n        $http.get('views/search/search_results.html', {cache: $templateCache});\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider\n            .when(\"/home\", '/home/1')\n            .when(\"/home\", '/home/1')\n            .when(\"/search\", '/home/1')\n            .otherwise(\"/home/1\");\n\n        $stateProvider\n            .state('home', {\n                url: '/home/:pageNumber',\n                templateUrl: 'views/admin/partials/views/post_stream.html'\n            })\n            .state('post', {\n                url: '/post/:postIndex',\n                templateUrl: 'views/admin/partials/views/full_post.html'\n            })\n            .state('search', {\n                url: '/search/:queryString/:pageNumber',\n                templateUrl: 'views/search/search_results.html'\n            })\n            .state(\"otherwise\", {url: '/home/1'});\n\n        $locationProvider\n            .html5Mode(false)\n            .hashPrefix('!');\n    }]);","angular.module('adminHomeApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('adminHomeApp')\n    .controller('HotController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', 'HotService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, HotService) {\n\n            $scope.hotThisWeek = HotService.getHotThisWeek();\n\n            function getHotThisWeek() {\n                HotService.getHotThisWeekFromServer()\n                    .success(function (resp) {\n                        $scope.hotThisWeek = HotService.updateHotThisWeek(resp.hotThisWeek);\n                        updateTimeAgo();\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            getHotThisWeek();\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.hotThisWeek.forEach(function (hot) {\n                    hot.theTimeAgo = $filter('timeago')(hot.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    hot.postDate = moment(hot.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                getHotThisWeek();\n            });\n\n            $log.info('HotController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService', 'PostService', '$document', 'cfpLoadingBar',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService, PostService, $document, cfpLoadingBar) {\n\n            //manipulating document title\n            $scope.defaultDocumentTitle = function () {\n                document.title = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n            };\n\n            $scope.changeDocumentTitle = function (newTitle) {\n                if (newTitle) {\n                    document.title = newTitle;\n                }\n            };\n\n            $scope.finishedLoading = function () {\n                $rootScope.$broadcast('finishedLoading');\n            };\n\n            //variable to show or hide disqus if window.host contains negusmath\n            $scope.showDisqus = $location.host().search(\"negusmath\") !== -1;\n\n            //this function returns the highlightText to the query string on the location url\n            $scope.refillHighLightText = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.highlightText = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                }\n            };\n\n            $scope.refillHighLightText();\n\n            $scope.highlightThisText = function (textToHighlight) {\n                var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                $(theElement).highlight($scope.highlightText);\n                return theElement.html();\n            };\n\n            $scope.removeHighLightText = function (textString) {\n                $scope.highlightText = '';\n                var theElement = $(\"<div>\" + textString + \"</div>\");\n                $(theElement).removeHighlight();\n                return theElement.html();\n            };\n\n            $scope.highLightPost = function (postObject) {\n                if ($scope.highLightReference()) {\n                    if (postObject.authorName) {\n                        postObject.authorName = $scope.highlightThisText(postObject.authorName);\n                    }\n                    if (postObject.postHeading) {\n                        postObject.postHeading = $scope.highlightThisText(postObject.postHeading);\n                    }\n                    if (postObject.postContent) {\n                        postObject.postContent = $scope.highlightThisText(postObject.postContent);\n                    }\n                    if (postObject.postSummary) {\n                        postObject.postSummary = $scope.highlightThisText(postObject.postSummary);\n                    }\n                    if (postObject.postTags) {\n                        postObject.postTags.forEach(function (tag) {\n                            tag.text = $scope.highlightThisText(tag.text);\n                        })\n                    }\n                }\n            };\n\n            $scope.removePostHighlights = function (postObject) {\n                if (postObject.authorName) {\n                    postObject.authorName = $scope.removeHighLightText(postObject.authorName);\n                }\n                if (postObject.postHeading) {\n                    postObject.postHeading = $scope.removeHighLightText(postObject.postHeading);\n                }\n                if (postObject.postContent) {\n                    postObject.postContent = $scope.removeHighLightText(postObject.postContent);\n                }\n                if (postObject.postSummary) {\n                    postObject.postSummary = $scope.removeHighLightText(postObject.postSummary);\n                }\n                if (postObject.postTags) {\n                    postObject.postTags.forEach(function (tag) {\n                        tag.text = $scope.removeHighLightText(tag.text);\n                    })\n                }\n            };\n\n            //stateChangeCounter counts the stateChanges from the previous search,\n            //when the user goes further, you will need to disable search highlight\n            //also, you can use a timer\n            $scope.stateChangeCounter = 0;\n            $scope.highLightReference = function () {\n                var queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                if (queryString) {\n                    //only highlight when the query string is more than 3 characters\n                    if (queryString.length > 3) {\n                        if ($rootScope.$state.current.name == 'search') {\n                            $scope.stateChangeCounter = 0;\n                            $scope.highlightText = $rootScope.$stateParams.queryString;\n                            return true;\n                        } else if ($scope.stateChangeCounter > 0) {\n                            $scope.stateChangeCounter++;\n                            return false;\n                        } else {\n                            $scope.stateChangeCounter++;\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            };\n\n            //listens for state changes, used to activate active states\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                //clear all banners\n                $scope.clearBanners();\n\n                //clear all toasts\n                $scope.clearToasts();\n            });\n\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.currentState = toState.name;\n            });\n\n            //back functionality\n            var history = [];\n            $rootScope.$on('$stateChangeSuccess', function () {\n                history.push($location.$$path);\n            });\n            $rootScope.back = function () {\n                var prevUrl = history.length > 1 ? history.splice(-2)[0] : \"/\";\n                $location.path(prevUrl);\n            };\n\n            //length of an object\n            $scope.calcObjectLength = function (obj) {\n                var len = 0;\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        len++;\n                    }\n                }\n                return len\n            };\n\n            //end of object lengths\n\n            //scrolling functions\n            var duration = 0; //milliseconds\n            var offset = 40; //pixels; adjust for floating menu, context etc\n            //Scroll to #some-id with 30 px \"padding\"\n            //Note: Use this in a directive, not with document.getElementById\n\n            //scrolling to top\n            $scope.goToTop = function () {\n                var someElement = angular.element(document.getElementById('top'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //scrolling to universal banner\n            $scope.goToUniversalBanner = function () {\n                var someElement = angular.element(document.getElementById('universalBanner'));\n                $document.scrollToElement(someElement, 80, duration);\n            };\n\n            //making videos responsive\n            $scope.makeVideoIframesResponsive = function (theElementString) {\n                //convert the element to string\n                var theElement = $(\"<div>\" + theElementString + \"</div>\");\n\n                //find the video iframe elements\n                var imgElement = $('img.ta-insert-video', theElement);\n\n                //only perform operation if there are iframes available\n                if (imgElement.length > 0) {\n\n                    //add class and wrap in div\n                    var imgWrappedInDiv = imgElement\n                        .addClass('embed-responsive-item')\n                        .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                    //replace in original\n                    theElement.find('img').replaceWith(imgWrappedInDiv);\n                }\n\n                return theElement.html();\n\n            };\n\n\n            //variable to hold the registered state of the client\n            $scope.clientIsRegistered = false;\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n\n            //universal banner\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            //registration banner\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            //new post banner\n            $scope.showNewPostBanner = false;\n            $scope.newPostBannerClass = \"\";\n            $scope.newPostBannerMessage = \"\";\n\n            $scope.clearBanners = function () {\n                $scope.showBanner = false;\n                $scope.showRegistrationBanner = false;\n                $scope.showNewPostBanner = false;\n            };\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.newPostBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showNewPostBanner = true;\n                            $scope.newPostBannerClass = resp.bannerClass;\n                            $scope.newPostBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n            $scope.isLoadingPercentage = 0;\n            $scope.changeIsLoadingPercentage = function (num) {\n                $scope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $scope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $scope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n\n            $scope.clearToasts = function () {\n                toastr.clear();\n            };\n\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //************time functions****************\n            $scope.currentTime = \"\";\n\n            //set current Date\n            $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            var updateCurrentTime = function () {\n                $scope.currentTime = moment().format(\"ddd, MMM D, H:mm\");\n            };\n            $interval(updateCurrentTime, 20000, 0, true);\n\n            //***************end time functions***********************\n\n\n            //initial requests\n            socketService.getUserData()\n                .success(function (resp) {\n                    $scope.userData = globals.userData(resp.userData);\n                    if ($scope.userData.isRegistered == 'yes') {\n                        $scope.clientIsRegistered = true;\n                    }\n\n                    //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                    socket.emit('joinRoom', {\n                        room: resp.userData.uniqueCuid\n                    });\n\n                    $scope.responseStatusHandler(resp);\n                })\n                .error(function (errResponse) {\n                    $scope.responseStatusHandler(errResponse);\n                });\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            //===================================search functionality\n            $scope.mainSearchModel = {\n                queryString: \"\",\n                postSearchUniqueCuid: \"\",\n                requestedPage: 1\n            };\n\n            //put the query string in the search box\n            $scope.fillSearchBox = function () {\n                if ($rootScope.$state.current.name == 'search' && $rootScope.$stateParams.queryString) {\n                    $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : $scope.highlightText;\n                } else {\n                    $scope.mainSearchModel.queryString = '';\n                }\n            };\n\n            $scope.fillSearchBox();\n\n            $scope.performMainSearch = function () {\n                if ($scope.mainSearchModel.queryString.length > 0) {\n                    if ($location.port()) {\n                        $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    } else {\n                        $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                    }\n                }\n            };\n            //==================================================end of search functionality\n\n            //==================================================paging controllers for posts\n            $scope.showPaging = false;\n            $scope.showThePager = function () {\n                $scope.showPaging = true;\n            };\n            $scope.hideThePager = function () {\n                $scope.showPaging = false;\n            };\n            $scope.pagingMaxSize = 5;\n            $scope.numPages = 5;\n            $scope.itemsPerPage = 10;\n            $scope.pagingTotalCount = 1;\n            $scope.changePagingTotalCount = function (newTotalCount) {\n                $scope.pagingTotalCount = newTotalCount;\n            };\n\n            $scope.currentPage = $rootScope.$stateParams.pageNumber;\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                //refresh the currentPage if the user is going to a new state\n                if (fromState.name != toState.name) {\n                    $scope.currentPage = $rootScope.$stateParams.pageNumber;\n                    $scope.pagingTotalCount = 1\n                }\n            });\n\n            $scope.goToPage = function () {\n                //go to the current state's new page\n                $rootScope.$state.go($rootScope.$state.current.name, {pageNumber: $scope.currentPage});\n                $scope.goToTop();\n            };\n            //=======================================================end of post paging controllers\n\n            //===============new post controllers===========\n\n            //new post\n            $scope.newPost = false;\n            $scope.showNewPost = function () {\n                $scope.newPost = true;\n            };\n            $scope.hideNewPost = function () {\n                $scope.newPost = false;\n            };\n\n            $scope.newPostModel = {\n                postHeading: \"\",\n                postContent: \"\",\n                postSummary: \"\",\n                postTags: []\n            };\n\n            //these variables hold the state of the forms\n            $scope.postHeadingIsLessMin = true;\n            $scope.postContentIsEmpty = true;\n            $scope.postSummaryIsEmpty = true;\n            $scope.postSummaryHasExceededMaximum = false;\n\n            $scope.checkIfPostHeadingLessMin = function () {\n                var postHeadingText = $scope.newPostModel.postHeading;\n                if (postHeadingText.length < 10) {\n                    $scope.postHeadingIsLessMin = true;\n                }\n                else {\n                    $scope.postHeadingIsLessMin = false;\n                }\n                return $scope.postHeadingIsLessMin\n            };\n\n            $scope.checkIfPostContentIsEmpty = function () {\n                var postContentText = $(\"<div>\" + $scope.newPostModel.postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    $scope.postContentIsEmpty = true;\n                }\n                else {\n                    $scope.postContentIsEmpty = false;\n                }\n                return $scope.postContentIsEmpty\n            };\n\n            $scope.checkIfPostSummaryIsEmpty = function () {\n                var postSummaryText = $(\"<div>\" + $scope.newPostModel.postSummary + \"</div>\").text();\n                if (postSummaryText.length == 0) {\n                    $scope.postSummaryIsEmpty = true;\n                }\n                else {\n                    $scope.postSummaryIsEmpty = false;\n                }\n                return $scope.postSummaryIsEmpty\n            };\n\n            $scope.checkPostSummaryMaxLength = function (maxLength) {\n                var postSummaryText = $(\"<div>\" + $scope.newPostModel.postSummary + \"</div>\").text();\n                if (postSummaryText.length > maxLength) {\n                    $scope.postSummaryHasExceededMaximum = true;\n                } else {\n                    $scope.postSummaryHasExceededMaximum = false;\n                }\n                return $scope.postSummaryHasExceededMaximum\n            };\n\n            //returns true if tags pass validation\n            $scope.checkEditPostTags = function () {\n                var errorPostTags = 0;\n                var numberOfTags = 0;\n\n                $scope.newPostModel.postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (errorPostTags == 0) {\n                        if (tag.text.length < 3 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5 && errorPostTags == 0) {\n                    errorPostTags++;\n                    $scope.showToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n\n                if (errorPostTags == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.submitNewPost = function () {\n                var errors = 0;\n                var numberOfTags = 0;\n\n                //validate post heading\n                if ($scope.checkIfPostHeadingLessMin() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The minimum required length of the heading is 10 characters');\n                }\n\n                //validate post content\n                if ($scope.checkIfPostContentIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'Please add some text to the post first');\n                }\n\n                //validate post summary\n                if ($scope.checkIfPostSummaryIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot be empty');\n                }\n\n                if ($scope.checkPostSummaryMaxLength() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n\n                //validate tags\n                //note that the edit post tags returns true if validation succeeded\n                //it also shows toasts depending on whats missing\n                if (!$scope.checkEditPostTags() && errors == 0) {\n                    errors++;\n                }\n\n                if (errors == 0) {\n                    var newPost = {\n                        postHeading: $scope.newPostModel.postHeading,\n                        postContent: $scope.newPostModel.postContent,\n                        postSummary: $scope.newPostModel.postSummary,\n                        postTags: $scope.newPostModel.postTags\n                    };\n                    PostService.submitNewPost(newPost).\n                        success(function (resp) {\n                            $scope.hideNewPost();\n                            $scope.responseStatusHandler(resp);\n                            $scope.newPostModel.postHeading = \"\";\n                            $scope.newPostModel.postContent = \"\";\n                            $scope.newPostModel.postSummary = \"\";\n                            $scope.newPostModel.postTags = [];\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            //=====================end of submitting post\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('PostsController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            //show paging\n            $scope.showThePager();\n\n            //change to default document title\n            $scope.defaultDocumentTitle();\n\n            $scope.posts = PostService.getCurrentPosts();\n            $scope.postsCount = PostService.getCurrentPostsCount();\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.mainSearchResultsPosts = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.mainSearchResultsPosts = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.posts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                            $scope.finishedLoading();\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getPagePosts() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostsFromServer($rootScope.$stateParams.pageNumber)\n                    .success(function (resp) {\n                        //this function  creates a banner to notify user that there are no posts by mimicking a response and calling the response handler\n                        //used if the user is accessing a page that is beyond the number of posts\n                        if (resp.postsArray.length == 0) {\n\n                            //empty the postsArray\n                            $scope.posts = [];\n\n                            var responseMimic = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"No more posts to show\"\n                            };\n                            $scope.responseStatusHandler(responseMimic);\n                            $scope.mainSearchResultsPosts = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        } else {\n                            $scope.posts = PostService.updatePosts(resp.postsArray);\n                            $scope.showThePostsOnly();\n                            updateTimeAgo();\n                            if (resp.postsCount) {\n                                $scope.postsCount = resp.postsCount;\n                                $scope.changePagingTotalCount($scope.postsCount);\n                            }\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.finishedLoading();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.posts = [];\n                        $scope.mainSearchResultsPosts = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getPagePosts();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsIsEmpty = function () {\n                return $scope.posts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.posts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('newPost', function (event, data) {\n                //newPost goes to page 1, so update only if the page is 1\n                if ($rootScope.$stateParams.pageNumber == 1) {\n                    $scope.posts.unshift(data.post);\n                    updateTimeAgo();\n                    preparePostSummaryContent();\n                }\n                if (data.postsCount) {\n                    $scope.postsCount = data.postsCount;\n                    $scope.changePagingTotalCount($scope.postsCount);\n                }\n            });\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'home') {\n                    getPagePosts();\n                }\n            });\n\n            $log.info('PostController booted successfully');\n\n        }\n    ])\n\n    .controller('FullPostController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService', '$stateParams',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService, $stateParams) {\n            //hide paging\n            $scope.hideThePager();\n\n            $scope.postIndex = $stateParams.postIndex;\n            $scope.post = {};\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showPost = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showThePostOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showPost = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            $scope.postIsLoaded = false;\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                            $scope.finishedLoading();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getFullPost() {\n                $scope.showHideLoadingBanner(true);\n                PostService.getPostFromServer($rootScope.$stateParams.postIndex)\n                    .success(function (resp) {\n                        $scope.post = resp.thePost;\n                        $scope.responseStatusHandler(resp);\n                        //check that there is a post first before starting disqus and other attributes\n                        if ($scope.calcObjectLength($scope.post) != 0) {\n\n                            //change the document title\n                            $scope.changeDocumentTitle($scope.post.postHeading);\n\n                            $scope.showThePostOnly();\n                            updateTimeAgo();\n                            addPostUrl();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function preparePostContent() {\n                                $scope.post.postContent = $scope.makeVideoIframesResponsive($scope.post.postContent);\n                            }\n\n                            preparePostContent();\n\n                            //highlight the post if needed\n                            $scope.highLightPost($scope.post);\n\n                            //check first that this is a production env --> showDisqus before bootstrapping disqus\n                            if ($scope.showDisqus) {\n                                $scope.postIsLoaded = true;\n                            }\n\n                            $scope.finishedLoading();\n\n                        } else {\n                            //empty the post\n                            $scope.post = {};\n                            $scope.showPost = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        //empty the post\n                        $scope.post = {};\n                        $scope.showPost = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getFullPost();\n\n            //=============function to update timeago on this post\n            function updateTimeAgo() {\n                if ($scope.post) {\n                    $scope.post.theTimeAgo = $filter('timeago')($scope.post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    $scope.post.postDate = moment($scope.post.createdAt).format(\"ddd, MMM D, H:mm\");\n                }\n\n                if ($scope.suggestedPosts) {\n                    $scope.suggestedPosts.forEach(function (post) {\n                        post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                        //post date/time it was ordered e.g. Sun, Mar 17..\n                        post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                    });\n                }\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            function addPostUrl() {\n                $scope.post.postUrl = 'http://www.negusmath.com/#!/post/' + $scope.post.postIndex;\n                //$scope.post.postUrl = 'http://' + $location.host() + '/#!/post/' + $scope.post.postIndex;\n            }\n\n            //==============end of update time ago\n\n            //=============editing post====================\n\n            //variable that holds the editing or show state in the full-post view.\n            $scope.editingMode = false;\n\n            //make copy of post, useful when the user clicks cancel\n            $scope.postBackup = $scope.post;\n\n            $scope.goIntoPostEditingMode = function () {\n                //remove all the text highlights if available\n                $scope.removePostHighlights($scope.post);\n\n                //make copy of post, useful when the user clicks cancel\n                $scope.postBackup = $scope.post;\n                $scope.editingMode = true;\n            };\n\n            $scope.goIntoFullPostViewMode = function () {\n                $scope.editingMode = false;\n            };\n\n            $scope.editPostHeadingLessMin = false;\n            $scope.editPostContentIsEmpty = true;\n            $scope.editPostSummaryIsEmpty = true;\n            $scope.editPostSummaryHasExceededMaximum = false;\n\n            $scope.checkIfEditPostHeadingLessMin = function () {\n                if ($scope.post.postHeading) {\n                    var postHeadingText = $scope.post.postHeading;\n                    if (postHeadingText.length < 10) {\n                        $scope.editPostHeadingLessMin = true;\n                    }\n                    else {\n                        $scope.editPostHeadingLessMin = false;\n                    }\n                    return $scope.editPostHeadingLessMin\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkIfEditPostContentIsEmpty = function () {\n                if ($scope.post.postContent) {\n                    var postContentText = $(\"<div>\" + $scope.post.postContent + \"</div>\").text();\n                    if (postContentText.length == 0) {\n                        $scope.editPostContentIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostContentIsEmpty = false;\n                    }\n                    return $scope.editPostContentIsEmpty\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkIfEditPostSummaryIsEmpty = function () {\n                if ($scope.post.postSummary) {\n                    var editPostSummaryText = $(\"<div>\" + $scope.post.postSummary + \"</div>\").text();\n                    if (editPostSummaryText.length == 0) {\n                        $scope.editPostSummaryIsEmpty = true;\n                    }\n                    else {\n                        $scope.editPostSummaryIsEmpty = false;\n                    }\n                    return $scope.editPostSummaryIsEmpty\n                } else {\n                    return true;\n                }\n            };\n\n            $scope.checkEditPostSummaryMaxLength = function (maxLength) {\n                if ($scope.post.postSummary) {\n                    var editPostSummaryText = $(\"<div>\" + $scope.post.postSummary + \"</div>\").text();\n                    if (editPostSummaryText.length > maxLength) {\n                        $scope.editPostSummaryHasExceededMaximum = true;\n                    } else {\n                        $scope.editPostSummaryHasExceededMaximum = false;\n                    }\n                    return $scope.editPostSummaryHasExceededMaximum\n                } else {\n                    return true;\n                }\n            };\n\n            //returns true if tags pass validation\n            $scope.checkEditPostTags = function () {\n                var errorPostTags = 0;\n                var numberOfTags = 0;\n\n                $scope.post.postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (errorPostTags == 0) {\n                        if (tag.text.length < 3 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Minimum allowed length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30 && errorPostTags == 0) {\n                            errorPostTags++;\n                            $scope.showToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5 && errorPostTags == 0) {\n                    errorPostTags++;\n                    $scope.showToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                }\n\n                if (errorPostTags == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            $scope.submitPostUpdate = function () {\n                var errors = 0;\n\n                //validate post heading\n                if ($scope.checkIfEditPostHeadingLessMin() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The minimum required length of the heading is 10 characters');\n                }\n\n                //validatePostContent\n                if ($scope.checkIfEditPostContentIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'Please add some text to the post first');\n                }\n\n                //validate postSummary\n                if ($scope.checkIfEditPostSummaryIsEmpty() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot be empty');\n                }\n\n                if ($scope.checkEditPostSummaryMaxLength() && errors == 0) {\n                    errors++;\n                    $scope.showToast('warning', 'The post summary cannot exceed 2000 characters');\n                }\n\n                //validate tags\n                //note that the edit post tags returns true if validation succeeded\n                //it also shows toasts depending on whats missing\n                if (!$scope.checkEditPostTags() && errors == 0) {\n                    errors++;\n                }\n\n                if (errors == 0) {\n                    PostService.submitPostUpdate($scope.post)\n                        .success(function (resp) {\n                            $scope.goIntoFullPostViewMode();\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $scope.responseStatusHandler(errResponse);\n                        })\n                }\n            };\n\n            $scope.cancelPostUpdate = function () {\n                $scope.post = $scope.postBackup;\n                $scope.goIntoFullPostViewMode();\n                $scope.showToast('success', 'Update cancelled');\n            };\n\n            //end of editing post functions================\n\n            //===============socket listeners===============\n\n            $rootScope.$on('postUpdate', function (event, data) {\n                $scope.post = data.post;\n                updateTimeAgo();\n            });\n\n            $rootScope.$on('reconnect', function () {\n                //only update the post variable if the user is not editing the current post\n                if (!$scope.editingMode) {\n                    if ($scope.currentState == 'post') {\n                        getFullPost();\n                    }\n                }\n            });\n\n            $log.info('FullPostController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n    .controller('SearchController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'PostService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, PostService) {\n\n            $scope.showThePager();\n\n            $scope.mainSearchModel = {\n                queryString: $rootScope.$stateParams.queryString || '',\n                postSearchUniqueCuid: \"\",\n                requestedPage: $rootScope.$stateParams.pageNumber || 1\n            };\n\n            //change to default document title\n            $scope.changeDocumentTitle($rootScope.$stateParams.queryString + \" - NegusMath Search\");\n\n            $scope.mainSearchResultsPosts = PostService.getCurrentPosts();\n            $scope.mainSearchResultsCount = 0;\n\n            $scope.changeCurrentPage = function (page) {\n                if (page != $rootScope.$stateParams.pageNumber) {\n                    //change page here****************************************\n                }\n            };\n\n            $scope.suggestedPosts = [];\n\n            //variable that determines whether to show posts/suggested posts or not\n            $scope.showMainSearchResults = false;\n            $scope.showSuggestedPosts = false;\n\n            $scope.showMainSearchResultsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = true;\n                $scope.showSuggestedPosts = false;\n            };\n\n            $scope.showSuggestedPostsOnly = function () {\n                $scope.showHideLoadingBanner(false);\n                $scope.showMainSearchResults = false;\n                $scope.showSuggestedPosts = true;\n            };\n\n            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n            function preparePostSummaryContent() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                });\n            }\n\n            //function used to fill in with suggested posts in case no posts are received\n            function getSuggestedPosts() {\n                $scope.showHideLoadingBanner(true);\n                //empty the suggestedPosts\n                $scope.suggestedPosts = [];\n                PostService.getSuggestedPostsFromServer()\n                    .success(function (resp) {\n                        if ((resp.postsArray.length > 0)) {\n                            $scope.showSuggestedPostsOnly();\n                            $scope.suggestedPosts = resp.postsArray;\n                            updateTimeAgo();\n\n                            //function that parses and prepares the post content e.g. making iframes in html string to be responsive\n                            function prepareSuggestedPostsSummaryContent() {\n                                $scope.suggestedPosts.forEach(function (post) {\n                                    post.postSummary = $scope.makeVideoIframesResponsive(post.postSummary);\n                                });\n                            }\n\n                            prepareSuggestedPostsSummaryContent();\n                        } else {\n                            //empty the suggestedPosts\n                            $scope.suggestedPosts = [];\n                            $scope.showSuggestedPosts = false;\n                            $scope.goToUniversalBanner();\n                            $scope.showHideLoadingBanner(false);\n                        }\n\n                    })\n                    .error(function (errResp) {\n                        $scope.goToUniversalBanner();\n                        $scope.showHideLoadingBanner(false);\n                        //empty the suggestedPosts\n                        $scope.suggestedPosts = [];\n                        $scope.showSuggestedPosts = false;\n                        $scope.responseStatusHandler(errResp);\n                    });\n            }\n\n            function getMainSearchResults() {\n                $scope.showHideLoadingBanner(true);\n\n                $scope.mainSearchModel = {\n                    queryString: $rootScope.$stateParams.queryString || '',\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: $rootScope.$stateParams.pageNumber || 1\n                };\n\n                PostService.mainSearch($scope.mainSearchModel)\n                    .success(function (resp) {\n                        var theResult = resp.results;\n\n                        PostService.updateMainSearchResults(theResult);\n                        $scope.mainSearchResultsCount = theResult.totalResults;\n                        $scope.changePagingTotalCount($scope.mainSearchResultsCount);\n                        $scope.changeCurrentPage(theResult.page);\n                        $scope.mainSearchModel.postSearchUniqueCuid = theResult.searchUniqueCuid;\n\n                        //the response is the resultValue\n                        if (theResult.totalResults > 0) {\n                            $scope.mainSearchResultsPosts = theResult.postsArray;\n                            $scope.showMainSearchResultsOnly();\n                            updateTimeAgo();\n                            //parse the posts and prepare them, eg, making iframes responsive\n                            preparePostSummaryContent();\n                            $scope.mainSearchResultsPosts.forEach(function (post) {\n                                $scope.highLightPost(post);\n                            });\n\n                            var responseMimic1 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned \" + $scope.mainSearchResultsCount + \" results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic1);\n                        } else {\n                            //empty the postsArray\n                            $scope.mainSearchResultsPosts = [];\n                            var responseMimic2 = {\n                                banner: true,\n                                bannerClass: 'alert alert-dismissible alert-success',\n                                msg: \"The search returned 0 results\"\n                            };\n                            $scope.responseStatusHandler(responseMimic2);\n                            $scope.showMainSearchResults = false;\n                            getSuggestedPosts();\n                            $scope.goToUniversalBanner();\n                        }\n                    })\n                    .error(function (errResp) {\n                        $scope.responseStatusHandler(errResp);\n                        //empty the postsArray\n                        $scope.mainSearchResultsPosts = [];\n                        $scope.showMainSearchResults = false;\n                        getSuggestedPosts();\n                    });\n            }\n\n            getMainSearchResults();\n\n            //this functions evaluates to true if object is not empty, useful for ng-show\n            //this function also creates a banner to notify user that there are no posts by mimicing a response and calling the response handler\n            $scope.checkIfPostsSearchResultsIsEmpty = function () {\n                return $scope.mainSearchResultsPosts.length == 0\n            };\n\n            //=============function to update timeago on all posts\n            //updates the timeago on all incoming orders using the timeago filter\n            function updateTimeAgo() {\n                $scope.mainSearchResultsPosts.forEach(function (post) {\n                    post.theTimeAgo = $filter('timeago')(post.createdAt);\n\n                    //post date/time it was ordered e.g. Sun, Mar 17..\n                    post.postDate = moment(post.createdAt).format(\"ddd, MMM D, H:mm\");\n                });\n            }\n\n            $interval(updateTimeAgo, 120000, 0, true);\n\n            //==============end of update time ago\n\n            updateTimeAgo();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnect', function () {\n                if ($scope.currentState == 'search') {\n                    getMainSearchResults();\n                }\n            });\n\n            $log.info('SearchController booted successfully');\n\n        }\n    ]);","angular.module('adminHomeApp')\n\n    .factory('globals', ['$q', '$window', '$rootScope', 'socketService',\n        function ($q, $window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('HotService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals) {\n\n            var hotThisWeek = [];\n\n            socket.on('hotThisWeekPosts', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('hotThisWeekPosts', data);\n            });\n\n            return {\n\n                getHotThisWeek: function () {\n                    return hotThisWeek;\n                },\n\n                getHotThisWeekFromServer: function () {\n                    return $http.post('/api/getHotThisWeek', {})\n                },\n\n                updateHotThisWeek: function (hotThisWeekArray) {\n                    hotThisWeek = hotThisWeekArray;\n                    return hotThisWeekArray;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnect');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n    .factory('PostService', ['$log', '$http', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $http, $window, $rootScope, socket, socketService, globals, $stateParams) {\n\n            var posts = [];\n            var postsCount = 0;\n\n            var mainSearchResultsPosts = [];\n\n            socket.on('newPost', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('newPost', data);\n            });\n\n            socket.on('postUpdate', function (data) {\n                //data here has the keys post, postCount\n                $rootScope.$broadcast('postUpdate', data);\n            });\n\n            return {\n\n                getCurrentPosts: function () {\n                    return posts;\n                },\n\n                getCurrentPostsCount: function () {\n                    return postsCount;\n                },\n\n                getPostsFromServer: function (pageNumber) {\n                    return $http.post('/api/getPosts', {\n                        page: pageNumber\n                    })\n                },\n\n                getSuggestedPostsFromServer: function () {\n                    return $http.post('/api/getSuggestedPosts', {})\n                },\n\n                updatePosts: function (postsArray) {\n                    posts = postsArray;\n                    return postsArray;\n                },\n\n                getPostFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                getCurrentMainSearchResults: function () {\n                    return mainSearchResultsPosts;\n                },\n\n                updateMainSearchResults: function (resultValue) {\n                    mainSearchResultsPosts = resultValue;\n                    return mainSearchResultsPosts;\n                },\n\n                mainSearch: function (searchObject) {\n                    return $http.post('/api/mainSearch', searchObject);\n                }\n            };\n        }]);","angular.module('adminHomeApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}