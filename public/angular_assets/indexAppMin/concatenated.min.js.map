{"version":3,"sources":["aindexApp.js","adirectives/bannerDir.js","adirectives/componentDir.js","controllers/mainCtrl.js","filters/filters.js","services/functions.js","services/globals.js","services/mainFactory.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","directive","$rootScope","socketService","globals","$location","$window","scope","templateUrl","restrict","link","$scope","$element","$attrs","getAccountDetails","getUserData","success","resp","userData","isRegistered","accountStatusBanner","determineAccountStatus","error","show","bannerClass","msg","console","log","JSON","stringify","emailIsConfirmed","isApproved","showResendEmail","isBanned","status","resendConfirmationEmail","responseStatusHandler","err","$on","signInBanner","event","banner","registrationBanner","showToast","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","clearToasts","controller","cfpLoadingBar","isLoading","isLoadingPercentage","changeIsLoadingPercentage","num","showHideLoadingBanner","bool","$","removeClass","addClass","isLoadingTrue","isLoadingFalse","mainSearchModel","queryString","postSearchUniqueCuid","requestedPage","fillSearchBox","$state","current","name","$stateParams","stateHistory","length","hasOwnProperty","performMainSearch","location","href","port","host","logoutService","logoutClient","errResponse","userLoginState","changeUserLoginState","newState","loginFormModel","username","password","submitLocalLoginForm","localUserLogin","registrationDetails","email","firstName","lastName","password1","password2","invitationCode","createAccount","validateContactUs","message","errors","contactUsModel","sendContactUs","formStatus","errResp","$q","$filter","$log","$interval","socket","mainService","initialRequests","broadcastUserData","clientIsRegistered","accountStatusIsGood","checkAccountStatus","emit","room","uniqueCuid","indexPageUrl","allData","$broadcast","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","createdAt","moment","format","post","posts","makeResp","postHeading","theElement","imgElement","imgWrappedInDiv","wrap","find","replaceWith","html","postContent","forEach","index","theElementString","checkSearchState","highLightThisText","textToHighlight","finalString","highlightDetails","highlight","theElement2","removeHighlight","makeBanner","universalDisable","redirect","redirectPage","disable","notify","type","newPostBanner","reason","warn","factory","calcObjectLength","obj","len","prop","documentTitle","data","getDocumentTitle","defaultDocumentTitle","changeDocumentTitle","newDocumentTitle","on","info","done","url","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","details","loginData"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('indexApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate',\n    'ui.utils'\n])\n    .run(function ($templateCache, $http) {\n        //views\n\n        //partials\n        //partials->navs\n        //partials->modals\n    });","angular.module('indexApp')\n    .directive('accountStatusBanner', ['$rootScope', 'socketService', 'globals', '$location', '$window', function ($rootScope, socketService, globals, $location, $window) {\n        return {\n            scope: {},\n            templateUrl: 'views/general/smalls/account_status.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.accountStatusBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\",\n                    showResendEmail: false\n                };\n\n                $scope.resendConfirmationEmail = function () {\n                    socketService.resendConfirmationEmail()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            $rootScope.responseStatusHandler(err);\n                        })\n                };\n\n\n                //initial requests\n                function getAccountDetails() {\n                    socketService.getUserData()\n                        .success(function (resp) {\n                            if (resp.userData.isRegistered == true) {\n                                $scope.accountStatusBanner = determineAccountStatus(resp.userData);\n                            }\n                        })\n                        .error(function () {\n                            $scope.accountStatusBanner = {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"An error has occurred. Please reload page\"\n                            };\n                        });\n                }\n\n                getAccountDetails();\n\n                function determineAccountStatus(userData) {\n                    console.log(JSON.stringify(userData.emailIsConfirmed));\n                    if (userData.isRegistered) {\n                        if (!userData.emailIsConfirmed) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Please confirm your account by clicking the confirmation link we sent on your email. Please also check your spam folder\",\n                                showResendEmail: true\n                            };\n                        } else if (userData.isApproved === false) {\n                            return {\n                                show: true,\n                                bannerClass: \"alert alert-warning\",\n                                msg: \"Your account is awaiting approval from the administrators. Please allow up to 3 business days. You will get an email notification as soon as your account is approved.\",\n                                showResendEmail: false\n                            };\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return {\n                                    show: true,\n                                    bannerClass: \"alert alert-warning\",\n                                    msg: \"Your have been banned from this service. Please contact the administrators for more information\",\n                                    showResendEmail: false\n                                };\n                            } else {\n                                return {\n                                    show: false,\n                                    bannerClass: \"\",\n                                    msg: \"\",\n                                    showResendEmail: false\n                                };\n                            }\n                        } else {\n                            return {\n                                show: false,\n                                bannerClass: \"\",\n                                msg: \"\",\n                                showResendEmail: false\n                            };\n                        }\n                    } else {\n                        return {\n                            show: false,\n                            bannerClass: \"\",\n                            msg: \"\",\n                            showResendEmail: false\n                        };\n                    }\n                }\n\n                $rootScope.$on('userDataChanges', function () {\n                });\n\n                $rootScope.$on('reconnect', function () {\n                    getAccountDetails();\n                });\n            }\n        }\n    }])\n    .directive('signInBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/index/smalls/sign_in_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.signInBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('signInBanner', function (event, banner) {\n                    $scope.signInBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.signInBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('registrationBanner', ['$rootScope', function ($rootScope) {\n        return {\n            templateUrl: 'views/index/smalls/registration_banner.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.registrationBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('registrationBanner', function (event, banner) {\n                    $scope.registrationBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.registrationBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                })\n            }\n        }\n    }])\n    .directive('toastrDirective', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        }\n    }])\n    .directive('loadingBanner', ['$rootScope', function ($rootScope) {\n        var controller = ['$scope', '$rootScope', 'cfpLoadingBar', function ($scope, $rootScope, cfpLoadingBar) {\n\n            $rootScope.isLoading = false;\n            $rootScope.isLoadingPercentage = 0;\n            $rootScope.changeIsLoadingPercentage = function (num) {\n                $rootScope.isLoadingPercentage = num;\n            };\n\n            //hides or shows the loading splash screen\n            $rootScope.showHideLoadingBanner = function (bool) {\n                if (bool) {\n                    $('#loading-splash-card').removeClass('hidden');\n                    $('.hideMobileLoading').addClass('hidden-xs hidden-sm');\n                } else {\n                    $('#loading-splash-card').addClass('hidden');\n                    $('.hideMobileLoading').removeClass('hidden-xs hidden-sm');\n                }\n            };\n\n            $rootScope.$on('cfpLoadingBar:loading', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:loaded', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.$on('cfpLoadingBar:completed', function (event, resp) {\n                $rootScope.isLoadingPercentage = cfpLoadingBar.status() * 100\n            });\n\n            $rootScope.isLoadingTrue = function () {\n                $rootScope.isLoading = true;\n            };\n            $rootScope.isLoadingFalse = function () {\n                $rootScope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $rootScope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $rootScope.isLoading = false;\n            });\n        }];\n\n        return {\n            templateUrl: 'views/client/partials/smalls/loading_banner.html',\n            restrict: 'AE',\n            controller: controller\n        }\n    }]);","angular.module('indexApp')\n    .directive('universalSearchBox', ['$window', '$location', '$rootScope', 'globals', function ($window, $location, $rootScope, globals) {\n        return {\n            templateUrl: 'views/admin/partials/smalls/universal_search_box.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.mainSearchModel = {\n                    queryString: \"\",\n                    postSearchUniqueCuid: \"\",\n                    requestedPage: 1\n                };\n\n                $scope.fillSearchBox = function () {\n                    //check latest state\n                    if ($rootScope.$state.current.name == 'search') {\n                        $scope.mainSearchModel.queryString = $rootScope.$stateParams.queryString ? $rootScope.$stateParams.queryString : \"\";\n                    } else if ($rootScope.stateHistory.length > 0) {\n                        if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                            //checking the previous state\n                            $scope.mainSearchModel.queryString = $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        } else {\n                            $scope.mainSearchModel.queryString = \"\";\n                        }\n                    } else {\n                        $scope.mainSearchModel.queryString = \"\";\n                    }\n                };\n\n                $scope.fillSearchBox();\n\n                $scope.performMainSearch = function () {\n                    if ($scope.mainSearchModel.queryString.length > 0) {\n                        if ($location.port()) {\n                            $window.location.href = \"http://\" + $location.host() + \":\" + $location.port() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        } else {\n                            $window.location.href = \"http://\" + $location.host() + \"/#!/search/\" + $scope.mainSearchModel.queryString + \"/1\";\n                        }\n                    }\n                };\n            }\n        }\n    }])\n    .directive('topNav', ['$rootScope', 'logoutService', function ($rootScope, logoutService) {\n        return {\n\n            templateUrl: 'views/index/views/top_nav.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.logoutClient = function () {\n                    logoutService.logoutClient()\n                        .success(function (resp) {\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('accountOuter', ['$rootScope', function ($rootScope, logoutService) {\n        return {\n            templateUrl: 'views/index/views/account_outer.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //variable to hold state between local login and creating a new account\n                //values =  signIn, register\n                $scope.userLoginState = 'signIn';\n                $scope.changeUserLoginState = function (newState) {\n                    $scope.userLoginState = newState;\n                };\n            }\n        }\n    }])\n    .directive('signIn', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/index/views/sign_in.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    socketService.localUserLogin($scope.loginFormModel)\n                        .success(function (resp) {\n                            //the responseStatusHandler handles all basic response stuff including redirecting the user if a success is picked\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('createAccount', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/index/views/create_account.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\",\n                    invitationCode: \"\"\n                };\n\n                $scope.createAccount = function () {\n                    socketService.createAccount($scope.registrationDetails)\n                        .success(function (resp) {\n                            //the responseStatusHandler handles all basic response stuff including redirecting the user if a success is picked\n                            $rootScope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            $scope.registrationDetails.invitationCode = \"\";\n                            $rootScope.responseStatusHandler(errResponse);\n                        });\n                };\n            }\n        }\n    }])\n    .directive('contactUs', ['$rootScope', 'socketService', function ($rootScope, socketService) {\n        return {\n            templateUrl: 'views/index/views/create_account.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.contactUsModel = {\n                    name: \"\",\n                    email: \"\",\n                    message: \"\"\n                };\n\n                function validateContactUs(name, email, message) {\n                    var errors = 0;\n\n                    if (!name || name.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter your name\");\n                        return -1\n                    } else if (!email || email.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Please enter a valid email\");\n                        return -1\n                    } else if (!message || message.length == 0) {\n                        ++errors;\n                        $rootScope.showToast('warning', \"Message field is empty\");\n                        return -1;\n                    } else if (errors == 0) {\n                        return 1;\n                    }\n                }\n\n                $scope.sendContactUs = function () {\n                    var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                    if (formStatus == 1) {\n                        socketService.sendContactUs($scope.contactUsModel)\n                            .success(function (resp) {\n                                $scope.contactUsModel.name = \"\";\n                                $scope.contactUsModel.email = \"\";\n                                $scope.contactUsModel.message = \"\";\n                                $rootScope.responseStatusHandler(resp);\n                            })\n                            .error(function (errResp) {\n                                $rootScope.responseStatusHandler(errResp);\n                            });\n                    }\n                };\n            }\n        }\n    }]);","angular.module('indexApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals) {\n\n            $scope.indexPageUrl = globals.allData.indexPageUrl;\n\n            //register error handler error handler\n            $rootScope.responseStatusHandler = function (resp) {\n                $filter('responseFilter')(resp);\n            };\n\n            //function that determines if it's okay for the user to proceed\n            $scope.checkAccountStatus = function (userData) {\n                if (userData) {\n                    if (userData.isRegistered) {\n                        //checkApprovalStatus\n                        if (userData.isApproved === false) {\n                            return false\n                        } else if (userData.isBanned) {\n                            if (userData.isBanned.status === true) {\n                                //checking banned status\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            };\n\n            //this important function broadcasts the availability of the users data to directives that require\n            //it e.g. the account status directive\n            $scope.broadcastUserData = function () {\n                $rootScope.$broadcast('userDataChanges');\n            };\n\n            $scope.clientIsRegistered = false;\n\n            //variable that holds the account status\n            $scope.accountStatusIsGood = false;\n\n            //initial requests\n            function initialRequests() {\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        $scope.broadcastUserData();\n\n                        //important isRegistered variable\n                        $scope.clientIsRegistered = $scope.userData.isRegistered;\n                        $scope.accountStatusIsGood = $scope.checkAccountStatus($scope.userData);\n\n                        if ($scope.userData.isRegistered) {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n                        $rootScope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.responseStatusHandler(errResponse);\n                    });\n            }\n\n            initialRequests();\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnectSuccess', function () {\n                initialRequests();\n            });\n        }\n    ]);","angular.module('indexApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    })\n    .filter(\"getTimeAgo\", ['$filter', function ($filter) {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return $filter('timeago')(createdAt);\n        }\n    }])\n    .filter(\"getPostDate\", ['$filter', function () {\n        //takes in a post or an array of posts, and adds a timeAgo key in them\n        return function (createdAt) {\n            return moment(createdAt).format(\"ddd, MMM D, H:mm\");\n        }\n    }])\n    .filter(\"makeVideoIframesResponsive\", ['$filter', function () {\n        //making embedded videos responsive\n        return function (post, posts) {\n            var theElement;\n            var imgElement;\n            var imgWrappedInDiv;\n\n            function makeResp(post) {\n                if (post.postHeading) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postHeading + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postHeading = theElement.html();\n\n                }\n                if (post.postContent) {\n                    //convert the element to string\n                    theElement = $(\"<div>\" + post.postContent + \"</div>\");\n\n                    //find the video iframe elements\n                    imgElement = $('img.ta-insert-video', theElement);\n\n                    //only perform operation if there are iframes available\n                    if (imgElement.length > 0) {\n\n                        //add class and wrap in div\n                        imgWrappedInDiv = imgElement\n                            .addClass('embed-responsive-item')\n                            .wrap(\"<div class='embed-responsive embed-responsive-16by9'></div>\");\n\n                        //replace in original\n                        theElement.find('img').replaceWith(imgWrappedInDiv);\n                    }\n                    post.postContent = theElement.html();\n                }\n                return post;\n            }\n\n            if (post) {\n                return makeResp(post)\n            } else if (posts) {\n                posts.forEach(function (post, index) {\n                    posts[index] = makeResp(post);\n                });\n                return posts;\n            }\n        }\n    }])\n    .filter(\"highlightText\", ['$filter', '$rootScope', function ($filter, $rootScope) {\n        //making embedded videos responsive\n        return function (theElementString) {\n\n            //text is highlighted only if the present or previous state was search\n            //this fn checks if the present or previous state was search, and returns an object with status false if not\n            //if true, the returned object carries the queryString with it\n            function checkSearchState() {\n                //check latest state\n                if ($rootScope.$state.current.name == 'search') {\n                    return {\n                        status: true,\n                        queryString: $rootScope.$stateParams.queryString || \"\"\n                    }\n                } else if ($rootScope.stateHistory.length > 0) {\n                    if ($rootScope.stateHistory[$rootScope.stateHistory.length - 1].hasOwnProperty('search')) {\n                        //checking the previous state\n                        return {\n                            status: true,\n                            queryString: $rootScope.stateHistory[$rootScope.stateHistory.length - 1]['search'].queryString\n                        }\n                    } else {\n                        return {\n                            status: false\n                        }\n                    }\n                } else {\n                    return {\n                        status: false\n                    }\n                }\n            }\n\n            function highLightThisText(textToHighlight) {\n                var finalString = textToHighlight;\n                var highlightDetails = checkSearchState();\n                if (highlightDetails.status === true) {\n                    //highlight\n                    var theElement = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement).highlight(highlightDetails.queryString);\n                    finalString = theElement.html();\n                } else {\n                    //remove highlight\n                    var theElement2 = $(\"<div>\" + textToHighlight + \"</div>\");\n                    $(theElement2).removeHighlight();\n                    finalString = theElement2.html();\n                }\n                return finalString;\n            }\n\n            return highLightThisText(theElementString);\n\n        }\n    }])\n    .filter(\"responseFilter\", ['$q', '$filter', '$log', '$interval', '$window', '$location', '$rootScope', 'globals', function ($q, $filter, $log, $interval, $window, $location, $rootScope, globals) {\n        //making embedded videos responsive\n        return function (resp) {\n\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                }\n            }\n\n            $rootScope.universalDisable = false;\n\n            if (resp) {\n                if (resp.redirect) {\n                    if (resp.redirect) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.disable) {\n                    $rootScope.universalDisable = true;\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.newPostBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('newPostBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('signInBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n        }\n    }]);\n\n\n","angular.module('indexApp')\n\n    .factory('fN', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            return {\n                calcObjectLength: function (obj) {\n                    var len = 0;\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            len++;\n                        }\n                    }\n                    return len\n                }\n            };\n        }]);","angular.module('indexApp')\n\n    .factory('globals', ['$q', '$location', '$window', '$rootScope', 'socketService',\n        function ($q, $location, $window, $rootScope, socketService) {\n            var userData = {};\n            var allData = {\n                documentTitle: \"Negus Math - College Level Advanced Mathematics for Kenya Students\",\n                indexPageUrl: $location.port() ? \"http://\" + $location.host() + \":\" + $location.port() + \"/index\" : $scope.indexPageUrl = \"http://\" + $location.host() + \"/index\"\n            };\n\n            var universalBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            var registrationBanner = {\n                show: false,\n                bannerClass: \"\",\n                msg: \"\"\n            };\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                allData: allData,\n\n                getDocumentTitle: function () {\n                    return allData.documentTitle\n                },\n\n                defaultDocumentTitle: function () {\n                    allData.documentTitle = \"Negus Math - College Level Advanced Mathematics for Kenya Students\";\n                },\n\n                changeDocumentTitle: function (newDocumentTitle) {\n                    if (newDocumentTitle) {\n                        allData.documentTitle = newDocumentTitle;\n                    }\n                    return allData.documentTitle\n                }\n            };\n        }]);","angular.module('indexApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnectSuccess');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('indexApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                createAccount: function (details) {\n                    return $http.post('/createAccount', details);\n                },\n\n                localUserLogin: function (loginData) {\n                    return $http.post('/localUserLogin', loginData);\n                },\n\n                resendConfirmationEmail: function () {\n                    return $http.post('/resendConfirmationEmail');\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}