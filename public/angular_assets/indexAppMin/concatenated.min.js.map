{"version":3,"sources":["aindexApp.js","filters.js","controllers/mainCtrl.js","services/globals.js","services/mainFactory.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","$rootScope","socket","mainService","socketService","globals","$modal","logoutService","initialRequests","isLoadingTrue","getUserData","success","resp","userData","clientIsRegistered","isRegistered","isRandomClient","emit","room","uniqueCuid","responseStatusHandler","isLoadingFalse","error","errResponse","validateContactUs","name","email","message","errors","length","showToast","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","universalDisableTrue","universalDisableFalse","redirect","location","href","redirectPage","disable","notify","type","msg","banner","registrationBanner","reason","warn","$on","event","isLoading","toastType","text","toastr","clear","warning","closeButton","tapToDismiss","timeOut","data","on","console","log","userLoginState","changeUserLoginState","newState","loginFormModel","username","password","submitLocalLoginForm","localUserLogin","registrationDetails","firstName","lastName","password1","password2","invitationCode","createAccount","contactUsModel","sendContactUs","formStatus","errResp","logoutClient","info","factory","$broadcast","done","url","port","host","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","details","post","loginData"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('indexApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate'\n])\n    .run(function ($templateCache, $http) {\n        //views\n\n        //partials\n        //partials->navs\n        //partials->modals\n    });","angular.module('indexApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('indexApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService) {\n\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //initial requests\n            function initialRequests() {\n                $scope.isLoadingTrue();\n                socketService.getUserData()\n                    .success(function (resp) {\n                        $scope.userData = globals.userData(resp.userData);\n                        if ($scope.userData.isRegistered == 'yes') {\n                            $scope.clientIsRegistered = true;\n                        } else {\n                            $scope.clientIsRegistered = false;\n                        }\n\n                        if ($scope.userData.isRandomClient) {\n                            $scope.isRandomClient = true;\n                        } else {\n                            $scope.isRandomClient = false;\n                        }\n\n                        if ($scope.userData.isRegistered == 'yes') {\n                            //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                            socket.emit('joinRoom', {\n                                room: resp.userData.uniqueCuid\n                            });\n                        }\n\n                        $scope.responseStatusHandler(resp);\n                        $scope.isLoadingFalse();\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                        $scope.isLoadingFalse();\n                    });\n            }\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n            initialRequests();\n\n\n            //variable to hold state between local login and creating a new account\n            //values =  signIn, register\n            $scope.userLoginState = 'signIn';\n            $scope.changeUserLoginState = function (newState) {\n                $scope.userLoginState = newState;\n            };\n\n            //===============THE LOCAL LOGIN FORM===============\n\n            $scope.loginFormModel = {\n                username: \"\",\n                password: \"\"\n            };\n\n            $scope.submitLocalLoginForm = function () {\n                socketService.localUserLogin($scope.loginFormModel)\n                    .success(function (resp) {\n                        //the responseStatusHandler handles all basic response stuff including redirecting the user if a success is picked\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.loginFormModel.password = \"\";\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //===============END OF LOCAL LOGIN FORM FUNCTIONS===============\n\n            //===============REGISTRATION FORM===============\n            //===============registration details and functions===============\n            $scope.registrationDetails = {\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                username: \"\",\n                password1: \"\",\n                password2: \"\",\n                invitationCode: \"\"\n            };\n\n            $scope.createAccount = function () {\n                socketService.createAccount($scope.registrationDetails)\n                    .success(function (resp) {\n                        //the responseStatusHandler handles all basic response stuff including redirecting the user if a success is picked\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n\n                        $scope.registrationDetails.password1 = \"\";\n                        $scope.registrationDetails.password2 = \"\";\n                        $scope.registrationDetails.invitationCode = \"\";\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n            //===============END OF REGISTRATION FORM===============\n\n            //===============contact us form===============\n            $scope.contactUsModel = {\n                name: \"\",\n                email: \"\",\n                message: \"\"\n            };\n\n            function validateContactUs(name, email, message) {\n                var errors = 0;\n\n                if (!name || name.length == 0) {\n                    ++errors;\n                    $scope.showToast('warning', \"Please enter your name\");\n                    return -1\n                } else if (!email || email.length == 0) {\n                    ++errors;\n                    $scope.showToast('warning', \"Please enter a valid email\");\n                    return -1\n                } else if (!message || message.length == 0) {\n                    ++errors;\n                    $scope.showToast('warning', \"Message field is empty\");\n                    return -1;\n                } else if (errors == 0) {\n                    return 1;\n                }\n            }\n\n            $scope.sendContactUs = function () {\n                var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                if (formStatus == 1) {\n                    socketService.sendContactUs($scope.contactUsModel)\n                        .success(function (resp) {\n                            $scope.contactUsModel.name = \"\";\n                            $scope.contactUsModel.email = \"\";\n                            $scope.contactUsModel.message = \"\";\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResp) {\n                            $scope.responseStatusHandler(errResp);\n                        });\n                }\n            };\n\n            //===============end of contactUs===============\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnectSuccess', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('indexApp')\n\n    .factory('globals', ['$window', '$rootScope', 'socketService',\n        function ($window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('indexApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnectSuccess');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('indexApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                createAccount: function (details) {\n                    return $http.post('/createAccount', details);\n                },\n\n                localUserLogin: function (loginData) {\n                    return $http.post('/localUserLogin', loginData);\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}