{"version":3,"sources":["aindexApp.js","filters.js","controllers/mainCtrl.js","services/globals.js","services/mainFactory.js","services/socketIoService.js"],"names":["angular","module","run","$templateCache","$http","filter","time","local","raw","Date","now","isDate","getTime","offset","Math","abs","span","MINUTE","HOUR","DAY","WEEK","YEAR","DECADE","round","join","controller","$q","$filter","$log","$interval","$window","$location","$scope","$rootScope","socket","mainService","socketService","globals","$modal","logoutService","validateContactUs","name","email","message","errors","length","showToast","clientIsRegistered","universalDisable","showBanner","bannerClass","bannerMessage","showRegistrationBanner","registrationBannerClass","registrationBannerMessage","universalDisableTrue","universalDisableFalse","responseStatusHandler","resp","redirect","location","href","redirectPage","disable","notify","type","msg","banner","registrationBanner","reason","warn","$on","event","isLoading","isLoadingTrue","isLoadingFalse","toastType","text","toastr","clear","success","warning","closeButton","tapToDismiss","error","timeOut","data","getUserData","userData","isRegistered","emit","room","uniqueCuid","errResponse","on","console","log","userLoginState","changeUserLoginState","newState","loginFormModel","username","password","submitLocalLoginForm","localUserLogin","registrationDetails","firstName","lastName","password1","password2","invitationCode","createAccount","contactUsModel","sendContactUs","formStatus","errResp","logoutClient","info","factory","$broadcast","done","url","port","host","io","connect","eventName","callback","args","arguments","$apply","apply","removeAllListeners","get","details","post","loginData"],"mappings":"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","file":"concatenated.min.js","sourcesContent":["angular.module('indexApp', [\n    'ui.bootstrap',\n    'angular-loading-bar',\n    'angulartics',\n    'angulartics.google.analytics',\n    'angularMoment',\n    'ui.router',\n    'duScroll',\n    'ngFx',\n    'ngAnimate'\n])\n    .run(function ($templateCache, $http) {\n        //views\n\n        //partials\n        //partials->navs\n        //partials->modals\n    });","angular.module('indexApp')\n    .filter(\"timeago\", function () {\n        //time: the time\n        //local: compared to what time? default: now\n        //raw: whether you want in a format of \"5 minutes ago\", or \"5 minutes\"\n        return function (time, local, raw) {\n            if (!time) return \"never\";\n\n            if (!local) {\n                (local = Date.now())\n            }\n\n            if (angular.isDate(time)) {\n                time = time.getTime();\n            } else if (typeof time === \"string\") {\n                time = new Date(time).getTime();\n            }\n\n            if (angular.isDate(local)) {\n                local = local.getTime();\n            } else if (typeof local === \"string\") {\n                local = new Date(local).getTime();\n            }\n\n            if (typeof time !== 'number' || typeof local !== 'number') {\n                return;\n            }\n\n            var\n                offset = Math.abs((local - time) / 1000),\n                span = [],\n                MINUTE = 60,\n                HOUR = 3600,\n                DAY = 86400,\n                WEEK = 604800,\n                MONTH = 2629744,\n                YEAR = 31556926,\n                DECADE = 315569260;\n\n            if (offset <= MINUTE)              span = ['', raw ? 'now' : 'less than a minute'];\n            else if (offset < (MINUTE * 60))   span = [Math.round(Math.abs(offset / MINUTE)), 'min'];\n            else if (offset < (HOUR * 24))     span = [Math.round(Math.abs(offset / HOUR)), 'hr'];\n            else if (offset < (DAY * 7))       span = [Math.round(Math.abs(offset / DAY)), 'day'];\n            else if (offset < (WEEK * 52))     span = [Math.round(Math.abs(offset / WEEK)), 'week'];\n            else if (offset < (YEAR * 10))     span = [Math.round(Math.abs(offset / YEAR)), 'year'];\n            else if (offset < (DECADE * 100))  span = [Math.round(Math.abs(offset / DECADE)), 'decade'];\n            else                               span = ['', 'a long time'];\n\n            span[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';\n            span = span.join(' ');\n\n            if (raw === true) {\n                return span;\n            }\n            return (time <= local) ? span + ' ago' : 'in ' + span;\n        }\n    });\n\n\n","angular.module('indexApp')\n    .controller('MainController', ['$q', '$filter', '$log', '$interval', '$window', '$location', '$scope', '$rootScope', 'socket', 'mainService', 'socketService', 'globals', '$modal', 'logoutService',\n        function ($q, $filter, $log, $interval, $window, $location, $scope, $rootScope, socket, mainService, socketService, globals, $modal, logoutService) {\n\n            //variable to hold the registered state of the client\n            $scope.clientIsRegistered = false;\n\n            //===============request error handler===============\n\n            //universalDisable variable is used to disable everything crucial in case an error\n            //occurs.This is sometimes needed if a reload did not work\n            $scope.universalDisable = false;\n            $scope.showBanner = false;\n            $scope.bannerClass = \"\";\n            $scope.bannerMessage = \"\";\n\n            $scope.showRegistrationBanner = false;\n            $scope.registrationBannerClass = \"\";\n            $scope.registrationBannerMessage = \"\";\n\n            $scope.universalDisableTrue = function () {\n                $scope.universalDisable = true;\n            };\n            $scope.universalDisableFalse = function () {\n                $scope.universalDisable = false;\n            };\n\n            $scope.responseStatusHandler = function (resp) {\n                if (resp) {\n                    if (resp.redirect) {\n                        if (resp.redirect) {\n                            $window.location.href = resp.redirectPage;\n                        }\n                    }\n                    if (resp.disable) {\n                        if (resp.disable) {\n                            $scope.universalDisableTrue();\n                        }\n                    }\n                    if (resp.notify) {\n                        if (resp.type && resp.msg) {\n                            $scope.showToast(resp.type, resp.msg);\n                        }\n                    }\n                    if (resp.banner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showBanner = true;\n                            $scope.bannerClass = resp.bannerClass;\n                            $scope.bannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.registrationBanner) {\n                        if (resp.bannerClass && resp.msg) {\n                            $scope.showRegistrationBanner = true;\n                            $scope.registrationBannerClass = resp.bannerClass;\n                            $scope.registrationBannerMessage = resp.msg;\n                        }\n                    }\n                    if (resp.reason) {\n                        $log.warn(resp.reason);\n                    }\n                } else {\n                    //do nothing\n                }\n            };\n\n            $rootScope.$on('responseStatusHandler', function (event, resp) {\n                $scope.responseStatusHandler(resp);\n            });\n\n\n            //===============end of request error handler===============\n\n\n            //===============isLoading functions to disable elements while content is loading or processing===============\n            $scope.isLoading = false;\n\n            $scope.isLoadingTrue = function () {\n                $scope.isLoading = true;\n            };\n            $scope.isLoadingFalse = function () {\n                $scope.isLoading = false;\n            };\n\n            $rootScope.$on('isLoadingTrue', function () {\n                $scope.isLoading = true;\n            });\n\n            $rootScope.$on('isLoadingFalse', function () {\n                $scope.isLoading = false;\n            });\n\n            //===============end of isLoading functions===============\n\n            //===============toastr show functions===============\n            $scope.showToast = function (toastType, text) {\n                switch (toastType) {\n                    case \"success\":\n                        toastr.clear();\n                        toastr.success(text);\n                        break;\n                    case \"warning\":\n                        toastr.clear();\n                        toastr.warning(text, 'Warning', {\n                            closeButton: true,\n                            tapToDismiss: true\n                        });\n                        break;\n                    case \"error\":\n                        toastr.clear();\n                        toastr.error(text, 'Error', {\n                            closeButton: true,\n                            tapToDismiss: true,\n                            timeOut: false\n                        });\n                        break;\n                    default:\n                        //clears current list of toasts\n                        toastr.clear();\n                }\n            };\n\n            $rootScope.$on('showToast', function (event, data) {\n                var toastType = data.toastType;\n                var text = data.text;\n\n                $scope.showToast(toastType, text);\n            });\n\n            //===============end of toastr show functions===============\n\n            //initial requests\n            socketService.getUserData()\n                .success(function (resp) {\n                    $scope.userData = globals.userData(resp.userData);\n                    if ($scope.userData.isRegistered == 'yes') {\n                        $scope.clientIsRegistered = true;\n                    }\n\n                    //join a socketRoom for websocket connection, equivalent to user's uniqueCuid\n                    socket.emit('joinRoom', {\n                        room: resp.userData.uniqueCuid\n                    });\n\n                    $scope.responseStatusHandler(resp);\n                })\n                .error(function (errResponse) {\n                    $scope.responseStatusHandler(errResponse);\n                });\n\n            socket.on('joined', function () {\n                console.log(\"JOIN SUCCESS\");\n            });\n\n\n            //variable to hold state between local login and creating a new account\n            //values =  signIn, register\n            $scope.userLoginState = 'signIn';\n            $scope.changeUserLoginState = function (newState) {\n                $scope.userLoginState = newState;\n            };\n\n            //===============THE LOCAL LOGIN FORM===============\n\n            $scope.loginFormModel = {\n                username: \"\",\n                password: \"\"\n            };\n\n            $scope.submitLocalLoginForm = function () {\n                socketService.localUserLogin($scope.loginFormModel)\n                    .success(function (resp) {\n                        //the responseStatusHandler handles all basic response stuff including redirecting the user if a success is picked\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.loginFormModel.password = \"\";\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //===============END OF LOCAL LOGIN FORM FUNCTIONS===============\n\n            //===============REGISTRATION FORM===============\n            //===============registration details and functions===============\n            $scope.registrationDetails = {\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                username: \"\",\n                password1: \"\",\n                password2: \"\",\n                invitationCode: \"\"\n            };\n\n            $scope.createAccount = function () {\n                socketService.createAccount($scope.registrationDetails)\n                    .success(function (resp) {\n                        //the responseStatusHandler handles all basic response stuff including redirecting the user if a success is picked\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n\n                        $scope.registrationDetails.password1 = \"\";\n                        $scope.registrationDetails.password2 = \"\";\n                        $scope.registrationDetails.invitationCode = \"\";\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n            //===============END OF REGISTRATION FORM===============\n\n            //===============contact us form===============\n            $scope.contactUsModel = {\n                name: \"\",\n                email: \"\",\n                message: \"\"\n            };\n\n            function validateContactUs(name, email, message) {\n                var errors = 0;\n\n                if (!name || name.length == 0) {\n                    ++errors;\n                    $scope.showToast('warning', \"Please enter your name\");\n                    return -1\n                } else if (!email || email.length == 0) {\n                    ++errors;\n                    $scope.showToast('warning', \"Please enter a valid email\");\n                    return -1\n                } else if (!message || message.length == 0) {\n                    ++errors;\n                    $scope.showToast('warning', \"Message field is empty\");\n                    return -1;\n                } else if (errors == 0) {\n                    return 1;\n                }\n            }\n\n            $scope.sendContactUs = function () {\n                var formStatus = validateContactUs($scope.contactUsModel.name, $scope.contactUsModel.email, $scope.contactUsModel.message);\n                if (formStatus == 1) {\n                    socketService.sendContactUs($scope.contactUsModel)\n                        .success(function (resp) {\n                            $scope.contactUsModel.name = \"\";\n                            $scope.contactUsModel.email = \"\";\n                            $scope.contactUsModel.message = \"\";\n                            $scope.responseStatusHandler(resp);\n                        })\n                        .error(function (errResp) {\n                            $scope.responseStatusHandler(errResp);\n                        });\n                }\n            };\n\n            //===============end of contactUs===============\n\n            //===============logout functions===============\n            $scope.logoutClient = function () {\n                logoutService.logoutClient()\n                    .success(function (resp) {\n                        $scope.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $scope.responseStatusHandler(errResponse);\n                    });\n            };\n\n            //=============end of logout===================\n\n\n            //===============socket listeners===============\n\n            $rootScope.$on('reconnectSuccess', function () {\n            });\n\n            $log.info('MainController booted successfully');\n\n        }\n    ]);","angular.module('indexApp')\n\n    .factory('globals', ['$window', '$rootScope', 'socketService',\n        function ($window, $rootScope, socketService) {\n            var userData = {};\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                }\n            };\n        }]);","angular.module('indexApp')\n    .factory('mainService', ['$log', '$window', '$rootScope', 'socket', 'socketService', 'globals',\n        function ($log, $window, $rootScope, socket, socketService, globals) {\n\n            socket.on('reconnect', function () {\n                $log.info(\"'reconnect sequence' triggered\");\n                $rootScope.$broadcast('reconnectSuccess');\n            });\n\n            return {\n                done: function () {\n                    return 1;\n                }\n            };\n        }]);","angular.module('indexApp')\n\n    .factory('socket', ['$log', '$location', '$rootScope',\n        function ($log, $location, $rootScope) {\n            var url;\n            if ($location.port()) {\n                url = $location.host() + \":\" + $location.port();\n            } else {\n                url = $location.host();\n            }\n            var socket = io.connect(url);\n            //return socket;\n            return {\n                on: function (eventName, callback) {\n                    socket.on(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                },\n\n                emit: function (eventName, data, callback) {\n                    socket.emit(eventName, data, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            if (callback) {\n                                callback.apply(socket, args);\n                            }\n                        });\n                    });\n                },\n\n                removeAllListeners: function (eventName, callback) {\n                    socket.removeAllListeners(eventName, function () {\n                        var args = arguments;\n                        $rootScope.$apply(function () {\n                            callback.apply(socket, args);\n                        });\n                    });\n                }\n            };\n        }])\n\n\n    .factory('socketService', ['$log', '$http', '$rootScope',\n        function ($log, $http, $rootScope) {\n\n            return {\n\n                getUserData: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                createAccount: function (details) {\n                    return $http.post('/createAccount', details);\n                },\n\n                localUserLogin: function (loginData) {\n                    return $http.post('/localUserLogin', loginData);\n                },\n\n                sendContactUs: function (contactUsModel) {\n                    return $http.post('/contactUs', contactUsModel);\n                }\n            }\n        }\n    ])\n\n    .factory('logoutService', ['$http',\n        function ($http) {\n            return {\n\n                logoutClient: function () {\n                    return $http.post('/api/logoutClient');\n                }\n            }\n        }]);"],"sourceRoot":"/source/"}